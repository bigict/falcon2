function onAxisChanged(e) {
    e.target;
    ThumbpadAxes = e.axes
}

function onMenuUp(e) {
}

function onMenuDown(e) {
    PDB.TravelMode ? PDB.render.changeToVrMode(PDB.MODE_VR, !1) : PDB.isShowMenu ? (PDB.isShowMenu = !1, PDB.render.hideMenu()) : (PDB.isShowMenu = !0, PDB.render.showMenu(), PDB.painter.showMenu(PDB.MENU_TYPE_CURRENT)), PDB.render.clearGroupIndex(PDB.GROUP_INFO)
}

function onThumbpadUp(e) {
    e.target;
    window.clearInterval(id), PDB.ROTATION_START_FLAG = !1
}

function onThumbpadDown(e) {
    e.target;
    switch (x = ThumbpadAxes[0], y = ThumbpadAxes[1], y <= -.5 && x >= -.5 && x <= 0 || y <= -.5 && x <= .5 && x >= 0 ? action = 1 : y >= .5 && x >= -.5 && x <= 0 || y >= .5 && x <= .5 && x >= 0 ? action = 2 : x <= -.5 && y >= -.5 && y <= 0 || x <= -.5 && y <= .5 && y >= 0 ? action = 3 : (x >= .5 && y >= -.5 && y <= 0 || x >= .5 && y <= .5 && y >= 0) && (action = 4), action) {
        case 0:
            break;
        case 1:
            id = self.setInterval("PDB.painter.near()", 20);
            break;
        case 2:
            id = self.setInterval("PDB.painter.far()", 20);
            break;
        case 3:
            PDB.ROTATION_DIRECTION = 0, id = self.setInterval("PDB.painter.rotate()", 20);
            break;
        case 4:
            PDB.ROTATION_DIRECTION = 1, id = self.setInterval("PDB.painter.rotate()", 20)
    }
}

function dealwithMenu(e) {
    if (void 0 !== e && void 0 !== e.userData) {
        var r = "";
        if (void 0 !== e.userData.group) {
            r = e.userData.group, void 0 !== e.name && r == PDB.GROUP_KEYBOARD && PDB.painter.showInput(e.name);
            var t = "";
            if (void 0 !== e.userData.reptype && "" !== e.userData.reptype) switch (t = e.userData.reptype, r) {
                case PDB.GROUP_MENU:
                    PDB.isShowMenu ? (PDB.render.hideSubMenu(), PDB.MENU_TYPE_CURRENT = t, PDB.painter.showMenu(t)) : PDB.render.showMenu();
                    break;
                case PDB.GROUP_MENU_MAIN:
                    t !== PDB.HIDE ? (PDB.render.clear(5), PDB.config.mainMode = t, PDB.controller.refreshGeometryByMode(t)) : (PDB.render.clear(0), PDB.render.clear(1)), onMenuDown();
                    break;
                case PDB.GROUP_MENU_HET:
                    t !== PDB.HIDE ? (PDB.render.clear(5), PDB.config.hetMode = t, PDB.controller.refreshGeometryByMode(t)) : PDB.render.clear(1), onMenuDown();
                    break;
                case PDB.GROUP_MENU_LABEL:
                    PDB.trigger = PDB.TRIGGER_EVENT_LABEL, PDB.selection_mode = t, onMenuDown();
                    break;
                case PDB.GROUP_MENU_TRAVEL:
                    onMenuDown(), PDB.CHANGESTYLE = 6, PDB.render.changeToVrMode(PDB.MODE_TRAVEL_VR, !0), PDB.painter.showResidueByThreeTravel();
                    break;
                case PDB.GROUP_MENU_EX_HET:
                    switch (t) {
                        case 1:
                            PDB.isShowWater ? PDB.isShowWater = !PDB.isShowWater : (PDB.isShowWater = !PDB.isShowWater, PDB.painter.showWater());
                            break;
                        case 2:
                            PDB.isShowWater = !PDB.isShowAxis, PDB.tool.showAxis(PDB.isShowAxis)
                    }
                    onMenuDown();
                    break;
                case PDB.GROUP_MENU_COLOR:
                    if ("Conservation" == t) {
                        var a = "A", o = PDB.CONSERVATION_URL + "&pdbid=" + PDB.pdbId.toUpperCase() + "&chain=" + a;
                        2 != ServerType && (o = SERVERURL + "/data/conservation.json"), PDB.tool.ajax.get(o, function (e) {
                            PDB.controller.clear(4, void 0), PDB.painter.showConservation(e), PDB.render.clearMain(), PDB.controller.drawGeometry(PDB.config.mainMode), onMenuDown()
                        })
                    } else PDB.controller.switchColorBymode(e.userData.reptype), onMenuDown();
                    break;
                case PDB.GROUP_MENU_MEASURE:
                    PDB.controller.switchMeasureByMode(e.userData.reptype), onMenuDown();
                    break;
                case PDB.GROUP_MENU_DRAG:
                    var n = e.userData.reptype;
                    "exit" === t ? PDB.trigger = PDB.TRIGGER_EVENT_LABEL : 0 === n ? PDB.tool.backToInitialPositionForVr() : PDB.controller.switchDragByMode(e.userData.reptype), onMenuDown();
                    break;
                case PDB.GROUP_MENU_FRAGMENT:
                    "exit" !== t ? (PDB.selection_mode = PDB.SELECTION_RESIDUE, PDB.controller.switchFragmentByMode(t)) : PDB.trigger = PDB.TRIGGER_EVENT_LABEL, onMenuDown();
                    break;
                case PDB.GROUP_MENU_EDITING:
                    "exit" !== t ? PDB.controller.switchEditingByMode(t) : PDB.trigger = PDB.TRIGGER_EVENT_LABEL, onMenuDown();
                    break;
                case PDB.GROUP_MENU_SURFACE:
                    PDB.render.clear(5);
                    var n = e.userData.reptype;
                    switch (n) {
                        case 0:
                            PDB.GROUP[PDB.GROUP_SURFACE].visible = !1, PDB.render.clearGroupIndex(PDB.GROUP_SURFACE);
                            break;
                        case 1:
                            PDB.GROUP[PDB.GROUP_SURFACE].visible = !0, PDB.controller.refreshSurface(PDB.config.surfaceMode, 1, PDB.SURFACE_OPACITY, PDB.SURFACE_WIREFRAME);
                            break;
                        case 2:
                            PDB.GROUP[PDB.GROUP_SURFACE].visible = !0, PDB.controller.refreshSurface(PDB.config.surfaceMode, 2, PDB.SURFACE_OPACITY, PDB.SURFACE_WIREFRAME);
                            break;
                        case 3:
                            PDB.GROUP[PDB.GROUP_SURFACE].visible = !0, PDB.controller.refreshSurface(PDB.config.surfaceMode, 3, PDB.SURFACE_OPACITY, PDB.SURFACE_WIREFRAME);
                            break;
                        case 4:
                            PDB.GROUP[PDB.GROUP_SURFACE].visible = !0, PDB.controller.refreshSurface(PDB.config.surfaceMode, 4, PDB.SURFACE_OPACITY, PDB.SURFACE_WIREFRAME);
                            break;
                        case 5:
                            PDB.controller.refreshSurface(PDB.config.surfaceMode, PDB.SURFACE_TYPE, 1, PDB.SURFACE_WIREFRAME);
                            break;
                        case 6:
                            PDB.controller.refreshSurface(PDB.config.surfaceMode, PDB.SURFACE_TYPE, .9, PDB.SURFACE_WIREFRAME);
                            break;
                        case 7:
                            PDB.controller.refreshSurface(PDB.config.surfaceMode, PDB.SURFACE_TYPE, .8, PDB.SURFACE_WIREFRAME);
                            break;
                        case 8:
                            PDB.controller.refreshSurface(PDB.config.surfaceMode, PDB.SURFACE_TYPE, .7, PDB.SURFACE_WIREFRAME);
                            break;
                        case 9:
                            PDB.controller.refreshSurface(PDB.config.surfaceMode, PDB.SURFACE_TYPE, .6, PDB.SURFACE_WIREFRAME);
                            break;
                        case 10:
                            PDB.controller.refreshSurface(PDB.config.surfaceMode, PDB.SURFACE_TYPE, .5, PDB.SURFACE_WIREFRAME);
                            break;
                        case 11:
                            PDB.controller.refreshSurface(PDB.config.surfaceMode, PDB.SURFACE_TYPE, PDB.SURFACE_OPACITY, !PDB.SURFACE_WIREFRAME)
                    }
                    onMenuDown();
                    break;
                case PDB.GROUP_MENU_MUTATION:
                    var n = e.userData.reptype;
                    switch (n) {
                        case 1:
                            PDB.render.clearGroupIndex(PDB.GROUP_MUTATION);
                            break;
                        case 2:
                            2;
                            var o = PDB.MUTATION_URL + "&pdbid=" + PDB.pdbId.toUpperCase() + "&ds=tcga";
                            2 !== ServerType && (o = SERVERURL + "/data/mutation.json"), PDB.tool.ajax.get(o, function (e) {
                                PDB.controller.clear(4, void 0), PDB.painter.showMutation(e)
                            });
                            break;
                        case 3:
                            3;
                            var o = PDB.MUTATION_URL + "&pdbid=" + PDB.pdbId.toUpperCase() + "&ds=ccle";
                            2 !== ServerType && (o = SERVERURL + "/data/mutation.json"), PDB.tool.ajax.get(o, function (e) {
                                PDB.controller.clear(4, void 0), PDB.painter.showMutation(e)
                            });
                            break;
                        case 4:
                            4;
                            var o = PDB.MUTATION_URL + "&pdbid=" + PDB.pdbId.toUpperCase() + "&ds=exac";
                            2 !== ServerType && (o = SERVERURL + "/data/mutation.json"), PDB.tool.ajax.get(o, function (e) {
                                PDB.controller.clear(4, void 0), PDB.painter.showMutation(e)
                            })
                    }
                    onMenuDown();
                    break;
                case PDB.GROUP_MENU_ROTATION:
                    PDB.ROTATION_AXIS = e.userData.reptype, 1 == PDB.ROTATION_AXIS ? PDB.MOVE_AXIS = 2 : 2 == PDB.ROTATION_AXIS ? PDB.MOVE_AXIS = 1 : 3 == PDB.ROTATION_AXIS && (PDB.MOVE_AXIS = 3), onMenuDown();
                    break;
                case PDB.GROUP_MENU_DIRECTION:
                    var n = e.userData.reptype;
                    switch (n) {
                        case 1:
                        case 2:
                        case 3:
                            PDB.MOVE_AXIS = n;
                            break;
                        case 4:
                            PDB.ZOOM_TIMES = 1;
                            break;
                        case 5:
                            PDB.ZOOM_TIMES = 2;
                            break;
                        case 6:
                            PDB.ZOOM_TIMES = 4
                    }
                    onMenuDown();
                    break;
                case PDB.GROUP_MENU_OUTBALL:
                    PDB.loadType = e.userData.reptype, PDB.loadType == PDB.bigmodel ? document.getElementById("isLow").checked = !0 : document.getElementById("isLow").checked = !1, onMenuDown(), PDB.render.clear(2), PDB.controller.refreshGeometryByMode(PDB.config.mainMode);
                    break;
                case PDB.GROUP_MENU_DRUG:
                    switch (t) {
                        case 1:
                            PDB.DRUGMOVE = !1, PDB.render.clearGroupIndex(PDB.GROUP_DRUG), PDB.render.clearGroupIndex(PDB.GROUP_VR_MENU_DOCKING), PDB.render.clearGroupIndex(PDB.GROUP_VR_MENU_DRUG), PDB.selection_mode = PDB.SELECTION_RESIDUE;
                            break;
                        case 2:
                            var o = API_URL + "/server/api.php?taskid=12&pdbid=" + PDB.pdbId.toUpperCase();
                            2 !== ServerType && (o = SERVERURL + "/data/drug.json"), PDB.selection_mode = PDB.SELECTION_DRUG_LIST, PDB.tool.showDrugMenuForVr(o);
                            break;
                        case 3:
                            PDB.tool.generateDrugMigrationPath(), PDB.DRUGMOVE = !0, PDB.drugMoveTime = new Date;
                            break;
                        case 4:
                            void 0 !== PDB.GROUP[PDB.GROUP_BOX_HELPER] && PDB.GROUP[PDB.GROUP_BOX_HELPER].visible ? PDB.GROUP[PDB.GROUP_BOX_HELPER].visible = !1 : void 0 === PDB.GROUP[PDB.GROUP_BOX_HELPER] || PDB.GROUP[PDB.GROUP_BOX_HELPER].visible || (PDB.GROUP[PDB.GROUP_BOX_HELPER].visible = !0)
                    }
                    onMenuDown();
                    break;
                case PDB.GROUP_VR_MENU_DRUG:
                    console.log(e.userData.reptype);
                    break;
                case PDB.GROUP_MENU_DENSITYMAP:
                    var n = e.userData.reptype;
                    if (void 0 != PDB.EMMAP.DATA && void 0 != PDB.EMMAP.DATA.data) {
                        var i = PDB.EMMAP.DATA;
                        if (1 === n) PDB.SHOWSOLID = !0, PDB.map_surface_show = 0, PDB.render.clearGroupIndex(PDB.GROUP_MAP), PDB.painter.showMapSolid(i, i.threshold); else if (2 === n) {
                            if (0 === PDB.map_surface_show) PDB.render.clearGroupIndex(PDB.GROUP_MAP), PDB.painter.showMapSurface(i, i.threshold, !1); else {
                                var s = PDB.GROUP[PDB.GROUP_MAP];
                                if (void 0 !== s && void 0 != s.children && s.children.length > 0 && s.children[0] instanceof THREE.Mesh) {
                                    var l = PDB.GROUP[PDB.GROUP_MAP].children[0];
                                    void 0 !== l.material && (l.material.wireframe = !1)
                                }
                            }
                            PDB.map_surface_show = 1
                        } else if (3 === n) {
                            if (0 === PDB.map_surface_show) PDB.render.clearGroupIndex(PDB.GROUP_MAP), PDB.painter.showMapSurface(i, i.threshold, !0); else {
                                var s = PDB.GROUP[PDB.GROUP_MAP];
                                if (void 0 !== s && void 0 != s.children && s.children.length > 0 && s.children[0] instanceof THREE.Mesh) {
                                    var l = PDB.GROUP[PDB.GROUP_MAP].children[0];
                                    void 0 !== l.material && (l.material.wireframe = !0)
                                }
                            }
                            PDB.map_surface_show = 1
                        } else 4 === n && (PDB.map_surface_show = 0, PDB.render.clearGroupIndex(PDB.GROUP_MAP));
                        onMenuDown()
                    } else {
                        var o = API_URL_EMMAP + PDB.pdbId.toUpperCase();
                        PDB.tool.ajax.get(o, function (e) {
                            if (PDB.MATERIALLIST = [], 0 == PDB.MATERIALLIST.length) for (var r = 1e3; r < 1100; r++) {
                                var t = new THREE.MeshPhongMaterial({
                                    color: new THREE.Color(w3m.rgb[r][0], w3m.rgb[r][1], w3m.rgb[r][2]),
                                    wireframe: !1,
                                    side: THREE.DoubleSide
                                });
                                PDB.MATERIALLIST.push(t)
                            }
                            var a = JSON.parse(e);
                            if (1 === a.code && void 0 !== a.data) {
                                var o = a.data;
                                0 === PDB.EMMAP.FIRST_ID && o.length > 0 && (PDB.EMMAP.FIRST_ID = o[0]);
                                var i = a.method;
                                1 == PDB.DEBUG_MODE && (i = "map-local"), PDB.controller.emmapLoad(PDB.EMMAP.FIRST_ID, i, function (e) {
                                    1 === n ? (PDB.SHOWSOLID = !0, PDB.map_surface_show = 0, PDB.painter.showMapSolid(e, e.threshold)) : 2 === n ? (PDB.painter.showMapSurface(e, e.threshold, !1), PDB.map_surface_show = 1) : 3 === n ? (PDB.painter.showMapSurface(e, e.threshold, !0), PDB.map_surface_show = 1) : 4 === n && (PDB.map_surface_show = 0, PDB.render.clearGroupIndex(PDB.GROUP_MAP)), onMenuDown()
                                })
                            }
                        })
                    }
                    break;
                case PDB.GROUP_MENU_CONSERVATION:
                    var n = e.userData.reptype, a = "A",
                        o = PDB.CONSERVATION_URL + "&pdbid=" + PDB.pdbId.toUpperCase() + "&chain=" + a;
                    PDB.tool.ajax.get(o, function (e) {
                        PDB.controller.clear(4, void 0), PDB.painter.showConservation(e), PDB.render.clearMain(), PDB.controller.drawGeometry(PDB.config.mainMode), onMenuDown()
                    });
                    break;
                case PDB.GROUP_MENU_HBOND:
                    var n = e.userData.reptype;
                    switch (n) {
                        case PDB.BOND_TYPE_NONE:
                            PDB.render.clearGroupIndex(PDB.GROUP_BOND);
                            break;
                        case PDB.BOND_TYPE_SSBOND:
                            PDB.render.clearGroupIndex(PDB.GROUP_BOND), PDB.painter.showBond(PDB.BOND_TYPE_SSBOND);
                            break;
                        case PDB.BOND_TYPE_COVALENT:
                            PDB.render.clearGroupIndex(PDB.GROUP_BOND), PDB.painter.showBond(PDB.BOND_TYPE_COVALENT);
                            break;
                        case PDB.BOND_TYPE_HBOND:
                            PDB.render.clearGroupIndex(PDB.GROUP_BOND), PDB.painter.showBond(PDB.BOND_TYPE_HBOND)
                    }
                    onMenuDown()
            }
        }
    }
}

function onTriggerDown(e) {
    var r = e.target, t = getIntersections(r);
    if (!(t.length <= 0)) {
        tempMatrix.getInverse(r.matrixWorld);
        var a = t[0], o = a.object, n = a.pos;
        if (console.log("----------------" + o.name), PDB.isShowMenu) dealwithMenu(o); else {
            switch (PDB.selection_mode) {
                case PDB.SELECTION_MODEL:
                case PDB.SELECTION_MAIN:
                case PDB.SELECTION_HET:
                    break;
                case PDB.SELECTION_CHAIN:
                    void 0 !== o.userData.presentAtom && (o.userData.presentAtom.pos = n, PDB.painter.showChainInfo(o.userData.presentAtom));
                    break;
                case PDB.SELECTION_DRUG:
                    void 0 !== o.userData.presentAtom && PDB.painter.showChainInfo(o.userData.presentAtom);
                    break;
                case PDB.SELECTION_RESIDUE:
                    void 0 !== o.userData.presentAtom && (atom = o.userData.presentAtom, atom.pos_curr = n, PDB.painter.showAtomInfo(atom), PDB.trigger === PDB.TRIGGER_EVENT_FRAGMENT ? PDB.fragmentArray.push(o) : PDB.trigger === PDB.TRIGGER_EVENT_EDITING && PDB.editingArray.push(o));
                    break;
                case PDB.SELECTION_ATOM:
                    void 0 !== o.userData.presentAtom && (atom = o.userData.presentAtom, atom.pos_curr = n, PDB.painter.showAtomInfo(atom), PDB.trigger !== PDB.TRIGGER_EVENT_DISTANCE && PDB.trigger !== PDB.TRIGGER_EVENT_ANGLE || (PDB.distanceArray.length > 0 ? PDB.tool.equalAtom(PDB.distanceArray[PDB.distanceArray.length - 1], atom) || PDB.distanceArray.push(atom) : PDB.distanceArray.push(atom)));
                    break;
                case PDB.SELECTION_OBJECT:
                    objectTrans(r, o);
                    break;
                case PDB.SELECTION_DRUG_LIST:
                    if (o) {
                        var i = o.userData, s = i.reptype.split(",");
                        if ("drugListMenu" === s[0]) {
                            var l = i.name;
                            PDB.loader.loadDrug(l, s[1], function () {
                                w3m.mol[l].drug = !0, PDB.render.clearGroupIndex(PDB.GROUP_DRUG), PDB.painter.showHet(l), PDB.tool.generateDrugMigrationPath(), PDB.GROUP[PDB.GROUP_DRUG].position.copy(PDB.GROUP[PDB.GROUP_MAIN].position), PDB.GROUP[PDB.GROUP_DRUG].visible = !0
                            })
                        } else if ("docking" === s[0]) PDB.DRUGMOVE = !0, PDB.drugMoveTime = new Date, PDB.render.clearGroupIndex(PDB.GROUP_VR_MENU_DOCKING), PDB.tool.showDockingMenuForVr(s[1]); else if ("dockingMenu" === s[0]) {
                            var l = s[1].replace(".pdb", "");
                            PDB.config.selectedDrug = l, PDB.DRUBDB_URL.docking = s[2] + "/", PDB.loader.loadDrug(l, "docking", function () {
                                w3m.mol[l].drug = !0, PDB.render.clearGroupIndex(PDB.GROUP_DOCKING), PDB.render.clearGroupIndex(PDB.GROUP_DRUG), PDB.DRUGMOVE = !1;
                                PDB.painter.showHet(l, !0)
                            })
                        } else "menuOn" === s[0] ? (PDB.GROUP[PDB.GROUP_VR_MENU_DRUG].visible = !0, PDB.GROUP[PDB.GROUP_VR_MENU_DOCKING].visible = !0) : "menuOff" === s[0] && (PDB.GROUP[PDB.GROUP_VR_MENU_DRUG].visible = !1, PDB.GROUP[PDB.GROUP_VR_MENU_DOCKING].visible = !1)
                    }
            }
            switch (PDB.trigger) {
                case PDB.TRIGGER_EVENT_DRAG:
                    objectTrans(r, o)
            }
        }
    }
}

function onTriggerUp(e) {
    switch (PDB.selection_mode) {
        case PDB.SELECTION_MODEL:
        case PDB.SELECTION_MAIN:
        case PDB.SELECTION_HET:
            break;
        case PDB.SELECTION_CHAIN:
        case PDB.SELECTION_DRUG:
        case PDB.SELECTION_RESIDUE:
        case PDB.SELECTION_ATOM:
            PDB.render.clearGroupIndex(PDB.GROUP_INFO);
            break;
        case PDB.SELECTION_OBJECT:
    }
    var r = e.target;
    if (void 0 !== r.userData && void 0 !== r.userData.selected) {
        var t = r.userData.selected, a = t;
        objectDeTrans(r, a), r.userData.selected = void 0
    }
    switch (PDB.trigger) {
        case PDB.GROUP_MENU_DRAG:
            break;
        case PDB.TRIGGER_EVENT_DISTANCE:
            if (2 === PDB.distanceArray.length) {
                var o = PDB.distanceArray[0], n = PDB.distanceArray[1];
                PDB.painter.showDistance(o, n), PDB.distanceArray = []
            }
            break;
        case PDB.TRIGGER_EVENT_ANGLE:
            if (1 === PDB.distanceArray.length) ; else if (2 === PDB.distanceArray.length) {
                var o = PDB.distanceArray[0], n = PDB.distanceArray[1];
                PDB.painter.showDistance(o, n)
            } else if (3 === PDB.distanceArray.length) {
                var o = PDB.distanceArray[1], n = PDB.distanceArray[2];
                PDB.painter.showDistance(o, n);
                var i = o, s = PDB.distanceArray[0], l = n, c = [i.pos_curr.x, i.pos_curr.y, i.pos_curr.z],
                    d = [s.pos_curr.x, s.pos_curr.y, s.pos_curr.z], m = [l.pos_curr.x, l.pos_curr.y, l.pos_curr.z],
                    P = PDB.tool.getAngleMeasurement(c, d, m), u = o.pos_curr;
                PDB.drawer.drawTextForDistance(PDB.GROUP_MAIN, u, P.result, "", i.color, 180), PDB.distanceArray = []
            }
            break;
        case PDB.TRIGGER_EVENT_ATOM:
            var r = e.target;
            if (void 0 !== r.userData.selected) {
                var a = r.userData.selected;
                PDB.tool.colorIntersectObjectBlue(a, 0), r.userData.selected = void 0
            }
            break;
        case PDB.TRIGGER_EVENT_FRAGMENT:
            var r = e.target;
            if (void 0 !== r.userData.selected) {
                var a = r.userData.selected;
                PDB.tool.colorIntersectObjectBlue(a, 0), PDB.GROUP[PDB.GROUP_MAIN].add(a), r.userData.selected = void 0
            }
            if (2 === PDB.fragmentArray.length) {
                var D = PDB.fragmentArray[0], _ = PDB.fragmentArray[1];
                D.name <= _.name ? PDB.controller.fragmentPainter(D.name, _.name, PDB.fragmentMode) : PDB.controller.fragmentPainter(_.name, D.name, PDB.fragmentMode), PDB.fragmentArray = []
            }
            break;
        case PDB.TRIGGER_EVENT_EDITING:
            var r = e.target;
            if (void 0 !== r.userData.selected) {
                var a = r.userData.selected;
                PDB.tool.colorIntersectObjectBlue(a, 0), PDB.GROUP[PDB.GROUP_MAIN].add(a), r.userData.selected = void 0
            }
            if (1 === PDB.editingArray.length) {
                var h = PDB.editingArray[0].userData.presentAtom, B = PDB.tool.getResidueId(h);
                PDB.tool.editingReplace("a", B, h.pos_curr, PDB.fragmentMode), PDB.editingArray = []
            }
            break;
        case PDB.TRIGGER_EVENT_LABEL:
    }
}

function objectTrans(e, r) {
    if (void 0 != r && (void 0 != r.material || "Group" === r.type)) {
        PDB.tool.colorIntersectObjectBlue(r, 1);
        var t = r.userData.group;
        if (void 0 != t) {
            if (r.matrix.premultiply(tempMatrix), r.matrix.decompose(r.position, r.quaternion, r.scale), e.add(r), e.userData.selected = r, "Mesh" == r.type) if (t.search("_low") > 0) {
                var a = t.substring(0, t.length - 4);
                for (var o in PDB.GROUP[a].children) if (PDB.GROUP[a].children[o].id == r.id) {
                    var n = PDB.GROUP[a].children[o];
                    n.matrix.premultiply(tempMatrix), n.matrix.decompose(n.position, n.quaternion, n.scale), e.add(n);
                    break
                }
            } else if (PDB.GROUP[t + "_low"] && PDB.GROUP[t + "_low"].children.length > 0) for (var o in PDB.GROUP[t + "_low"].children) if (PDB.GROUP[t + "_low"].children[o].id == r.id) {
                var n = PDB.GROUP[t + "_low"].children[o];
                n.matrix.premultiply(tempMatrix), n.matrix.decompose(n.position, n.quaternion, n.scale), e.add(n);
                break
            }
            if (r.userData.type) {
                var i = "";
                "low" == r.userData.type ? i = t.substring(0, t.length - 4) : "normal" == r.userData.type && (i = t + "_low"), PDB.tool.colorIntersectObjectBlue(PDB.GROUP[i], 1), PDB.GROUP[i].matrix.premultiply(tempMatrix), PDB.GROUP[i].matrix.decompose(PDB.GROUP[i].position, PDB.GROUP[i].quaternion, PDB.GROUP[i].scale), e.add(PDB.GROUP[i])
            }
        }
    }
}

function objectDeTrans(e, r) {
    if (void 0 != r && (void 0 != r.material || "Group" === r.type)) {
        r.matrix.premultiply(e.matrixWorld), r.matrix.decompose(r.position, r.quaternion, r.scale), PDB.tool.colorIntersectObjectBlue(r, 0);
        var t = r.userData.group;
        if ("Group" != r.type) {
            if (void 0 != t) if (PDB.GROUP[t].add(r), t.search("_low") > 0) {
                var a = t.substring(0, t.length - 4);
                for (var o in PDB.GROUP[a].children) if (PDB.GROUP[a].children[o].id == r.id) {
                    var n = PDB.GROUP[a].children[o];
                    n.matrix.premultiply(e.matrixWorld), n.matrix.decompose(n.position, n.quaternion, n.scale), PDB.GROUP[a].add(r);
                    break
                }
            } else if (PDB.GROUP[t + "_low"] && PDB.GROUP[t + "_low"].children.length > 0) for (var o in PDB.GROUP[t + "_low"].children) if (PDB.GROUP[t + "_low"].children[o].id == r.id) {
                var n = PDB.GROUP[t + "_low"].children[o];
                n.matrix.premultiply(e.matrixWorld), n.matrix.decompose(n.position, n.quaternion, n.scale), PDB.GROUP[t + "_low"].add(r);
                break
            }
            r.userData.presentAtom && r.userData.presentAtom.chainname && r.userData.presentAtom.resid && PDB.residueGroupObject[r.userData.presentAtom.chainname][r.userData.presentAtom.resid] && (PDB.residueGroupObject[r.userData.presentAtom.chainname][r.userData.presentAtom.resid].moveVec || (PDB.residueGroupObject[r.userData.presentAtom.chainname][r.userData.presentAtom.resid].moveVec = new THREE.Vector3(0, 0, 0)), PDB.residueGroupObject[r.userData.presentAtom.chainname][r.userData.presentAtom.resid].moveVec.copy(r.position))
        } else {
            if (r.userData.type) {
                var i = "";
                "low" == r.userData.type ? i = t.substring(0, t.length - 4) : "normal" == r.userData.type && (i = t + "_low"), PDB.GROUP[i].matrix.premultiply(e.matrixWorld), PDB.GROUP[i].matrix.decompose(PDB.GROUP[i].position, PDB.GROUP[i].quaternion, PDB.GROUP[i].scale), PDB.tool.colorIntersectObjectBlue(PDB.GROUP[i], 0), scene.add(PDB.GROUP[i])
            }
            scene.add(r)
        }
    }
}

function getIntersections(e) {
    tempMatrix.identity().extractRotation(e.matrixWorld), raycaster.ray.origin.setFromMatrixPosition(e.matrixWorld), raycaster.ray.direction.set(0, 0, -1).applyMatrix4(tempMatrix);
    var r = [];
    if (PDB.isShowMenu) {
        for (var t = [PDB.GROUP_MENU_MAIN, PDB.GROUP_MENU_HET, PDB.GROUP_MENU_COLOR, PDB.GROUP_MENU_MEASURE, PDB.GROUP_MENU_DRAG, PDB.GROUP_MENU_FRAGMENT, PDB.GROUP_MENU, PDB.GROUP_MENU_LABEL, PDB.GROUP_MENU_EX_HET, PDB.GROUP_MENU_TRAVEL, PDB.GROUP_MENU_SURFACE, PDB.GROUP_MENU_MUTATION, PDB.GROUP_MENU_ROTATION, PDB.GROUP_MENU_DRUG, PDB.GROUP_MENU_HBOND, PDB.GROUP_MENU_CONSERVATION, PDB.GROUP_MENU_DENSITYMAP, PDB.GROUP_MENU_EDITING, PDB.GROUP_MENU_DIRECTION, PDB.GROUP_MENU_EXPORT, PDB.GROUP_MENU_SPEECH, PDB.GROUP_MENU_OUTBALL, PDB.GROUP_KEYBOARD], a = t.length - 1; a >= 0; a--) if (PDB.GROUP[t[a]].visible) for (var o = raycaster.intersectObjects(PDB.GROUP[t[a]].children), n = 0; n < o.length; n++) r.push(o[n])
    } else switch (PDB.selection_mode) {
        case PDB.SELECTION_MODEL:
            for (var a in PDB.GROUP_STRUCTURE_INDEX) r.push({object: PDB.GROUP[PDB.GROUP_STRUCTURE_INDEX[a]]});
            break;
        case PDB.SELECTION_MAIN:
            for (var a in PDB.GROUP_MAIN_INDEX) r.push({object: PDB.GROUP[PDB.GROUP_MAIN_INDEX[a]]});
            break;
        case PDB.SELECTION_HET:
            var t = PDB.GROUP_HET_INDEX;
            for (var i in t) {
                var s = t[i];
                if (PDB.GROUP[s].visible) {
                    var o = raycaster.intersectObjects(PDB.GROUP[s].children);
                    o.length <= 0 || (P = o[0].object, void 0 != P.name && "" != P.name && void 0 !== P.userData.presentAtom && r.push({object: PDB.GROUP[s]}))
                }
            }
            break;
        case PDB.SELECTION_CHAIN:
            var t = PDB.GROUP_STRUCTURE_INDEX;
            for (var i in t) {
                var s = t[i];
                if (PDB.GROUP[s].visible) {
                    var o = raycaster.intersectObjects(PDB.GROUP[s].children);
                    o.length <= 0 || (P = o[0].object, void 0 != P.name && "" != P.name && void 0 !== P.userData.presentAtom && r.push({
                        object: PDB.GROUP[s],
                        pos: o[0].point
                    }))
                }
            }
            break;
        case PDB.SELECTION_DRUG:
            var s = PDB.GROUP_DRUG;
            if (!PDB.GROUP[s].visible) break;
            var o = raycaster.intersectObjects(PDB.GROUP[s].children);
            if (o.length <= 0) break;
            P = o[0].object, void 0 != P.name && "" != P.name && void 0 !== P.userData.presentAtom && r.push({object: PDB.GROUP[s]});
            break;
        case PDB.SELECTION_RESIDUE:
            for (var t = PDB.GROUP_STRUCTURE_INDEX, a = t.length - 1; a >= 0; a--) if (PDB.GROUP[t[a]].visible) {
                var o = raycaster.intersectObjects(PDB.GROUP[t[a]].children);
                if (!(o.length <= 0) && (P = o[0].object, u = o[0].point, void 0 != P.name && "" != P.name && void 0 !== P.userData.presentAtom)) if ("tube" === P.userData.reptype) {
                    void 0 !== P.userData.realtype && "arrow" === P.userData.realtype && console.log(P.userData);
                    for (var l = PDB.GROUP[t[a]].getChildrenByName(P.userData.presentAtom.id), c = 0; c < l.length; c++) r.push({
                        object: l[c],
                        pos: u
                    })
                } else for (var d = PDB.tool.getMainResAtomsByAtom(P.userData.presentAtom), m = 0; m < d.length; m++) for (var l = PDB.GROUP[t[a]].getChildrenByName(d[m].id), c = 0; c < l.length; c++) r.push({
                    object: l[c],
                    pos: u
                })
            }
            break;
        case PDB.SELECTION_ATOM:
            for (var t = PDB.GROUP_STRUCTURE_INDEX, a = t.length - 1; a >= 0; a--) if (PDB.GROUP[t[a]].visible) {
                var o = raycaster.intersectObjects(PDB.GROUP[t[a]].children);
                if (!(o.length <= 0)) {
                    n = 0;
                    var P = o[n].object, u = o[0].point;
                    r.push({object: P, pos: u});
                    var l = PDB.GROUP[t[a]].getChildrenByName(P.name);
                    for (var c in l) P.userData.presentAtom && P.userData.presentAtom.id == l[c].userData.presentAtom.id && r.push({
                        object: l[c],
                        pos: u
                    })
                }
            }
            break;
        case PDB.SELECTION_OBJECT:
            for (var a in PDB.GROUP_STRUCTURE_INDEX) for (var D = PDB.GROUP[PDB.GROUP_STRUCTURE_INDEX[a]], o = raycaster.intersectObjects(D.children), n = 0; n < o.length; n++) r.push(o[n]);
            break;
        case PDB.SELECTION_DRUG_LIST:
            if (void 0 !== PDB.GROUP[PDB.GROUP_VR_MENU_DRUG] && PDB.GROUP[PDB.GROUP_VR_MENU_DRUG].children.length > 0) for (var o = raycaster.intersectObjects(PDB.GROUP[PDB.GROUP_VR_MENU_DRUG].children), n = 0; n < o.length; n++) r.push(o[n]);
            if (void 0 !== PDB.GROUP[PDB.GROUP_VR_MENU_DOCKING] && PDB.GROUP[PDB.GROUP_VR_MENU_DOCKING].children.length > 0) for (var o = raycaster.intersectObjects(PDB.GROUP[PDB.GROUP_VR_MENU_DOCKING].children), n = 0; n < o.length; n++) r.push(o[n]);
            if (void 0 !== PDB.GROUP[PDB.GROUP_VR_MENU_SWITCH] && PDB.GROUP[PDB.GROUP_VR_MENU_SWITCH].children.length > 0) for (var o = raycaster.intersectObjects(PDB.GROUP[PDB.GROUP_VR_MENU_SWITCH].children), n = 0; n < o.length; n++) r.push(o[n])
    }
    return r
}

function intersectObjects(e) {
    if (void 0 === e.userData.selected) {
        var r = e.getObjectByName("line"), t = getIntersections(e);
        if (void 0 != t && t.length > 0) {
            var a = t[0];
            "Group" === a.type ? r.scale.z = a.children[0].distance : r.scale.z = a.distance;
            for (var o = 0; o < t.length; o++) {
                var a = t[o];
                if ("Group" === a.object.type) {
                    var n = "", i = a.object.userData.group;
                    "low" == a.object.userData.type ? n = i.substring(0, i.length - 4) : "normal" == a.object.userData.type && (n = i + "_low"), "" != n && PDB.tool.colorIntersectObjectRed(PDB.GROUP[n], 1)
                }
                var s = a.object;
                intersected.push(s), PDB.tool.colorIntersectObjectRed(s, 1)
            }
        } else r.scale.z = 10
    }
}

function cleanIntersected() {
    for (; intersected.length;) {
        var e = intersected.pop();
        if (PDB.tool.colorIntersectObjectRed(e, 0), "Group" === e.type) {
            var r = "", t = e.userData.group;
            "low" == e.userData.type ? r = t.substring(0, t.length - 4) : "normal" == e.userData.type && (r = t + "_low"), "" != r && PDB.tool.colorIntersectObjectRed(PDB.GROUP[r], 0)
        }
    }
}

function onDocumentMouseMove(e) {
    e.preventDefault(), mouse.x = e.clientX / window.innerWidth * 2 - 1, mouse.y = -e.clientY / window.innerHeight * 2 + 1
}

function PDBMLparser() {
    this.data = {}
}

function loadPDBML(e, r) {
    var t = new PDBMLparser;
    if (t.parse(e), r) return t.data;
    window.__CIFDICT__ || loadCIFdic();
    var a, o, n, i, s;
    for (o in t.data) for (n in t.data[o]) if (__CIFDICT__.hasOwnProperty(n)) for (i in t.data[o][n]) if (__CIFDICT__[n].hasOwnProperty(i)) if (a = __CIFDICT__[n][i], t.data[o][n][i] instanceof Array) for (s = 0; s < t.data[o][n][i].length; s++) t.data[o][n][i][s] = a.call(null, t.data[o][n][i][s]); else t.data[o][n][i] = a.call(null, t.data[o][n][i]);
    return t.data
}

function setupCIFTree(e, r, t) {
    var a = e.pushNode("DIV");
    return a.expandableTarget = t, a.popup = e.parentNode, a.topNode = !0, renderChildCIFTree(a, r), 1 == a.childNodes.length && -1 != a.childNodes[0].childNodes[0].className.indexOf("optCat_p") && a.childNodes[0].childNodes[0].onclick(), a
}

function renderChildCIFTree(e, r) {
    var t, a, o = Object.keys(r), n = null;
    if (r[o[0]] instanceof Array || "splice" in r[o[0]]) {
        var a, n = new drawTable;
        (!e.showAll || r[o[0]].length < 1e4) && n.tbl.setClass("dTO eqSpacedTbl"), n.tbl.border = "1", n.tbl.style.width = "", a = n.addRowXH(o);
        for (var i, s = 0; s < (e.showAll ? r[o[0]].length : Math.min(r[o[0]].length, 25)); s++) for (a = n.addRow(), i = 0; i < o.length; i++) a.addCell(r[o[i]][s]);
        e.pushNode(n.tbl), !e.showAll && r[o[0]].length > 25 && (a = e.pushNode("a", "Show all (" + r[o[0]].length + (r[o[0]].length > 2500 ? " rows, which will take some time to process and might cause your browser to become unresponsive. Alternatively, switch to flat file representation." : " rows") + ")"), a.targetObj = e, a.jso = r, a.style.cursor = "pointer", a.onclick = function () {
            Clear(this.targetObj), this.targetObj.showAll = !0, renderChildCIFTree(this.targetObj, this.jso)
        })
    } else for (var s = 0; s < o.length; s++) t = e.pushNode("DIV"), t.plus = t.pushNode("a", "+"), t.plus.setClass("optCat_p"), t.name = t.pushNode("a", o[s]), t.name.setClass("optCat_n"), t.plus.onclick = t.name.onclick = expandCatTree, t.payload = r[o[s]], t.expandFunc = renderChildCIFTree
}

function _loop(e) {
    this.parserObj = e, this.length = 0, this.refID = -1, this.refList = [], this.namesDefined = !1
}

function CIFparser() {
    this.data = {}, this.currentTarget = null, this.loopPointer = null, this.selectGlobal()
}

function loadCIFdic() {
    var e = new CallRemote("GET");
    e.Send("/mmcif_pdbx.dic");
    var r = new CIFparser;
    r.parse(e.request.responseText);
    var t, a = r.data["data_mmcif_pdbx.dic"], o = {};
    for (var n in a) "object" != typeof a[n] || a[n] instanceof Array || !a[n].hasOwnProperty("item_type") || (t = Partition(n.substr(6), "."), o.hasOwnProperty(t[0]) || (o[t[0]] = {}), o[t[0]][t[2]] = a[n].item_type.code.trim());
    var i, s = {};
    for (var n in o) for (i in o[n]) "int" == o[n][i] ? (s.hasOwnProperty(n) || (s[n] = {}), s[n][i] = parseInt) : "float" == o[n][i] ? (s.hasOwnProperty(n) || (s[n] = {}), s[n][i] = parseFloat) : "int-range" == o[n][i] ? (s.hasOwnProperty(n) || (s[n] = {}), s[n][i] = parseIntRange) : "float-range" == o[n][i] && (s.hasOwnProperty(n) || (s[n] = {}), s[n][i] = parseFloatRange);
    __CIFDICT__ = s
}

function parseIntRange(e) {
    try {
        var r = e.indexOf("-", 1);
        if (-1 == r) throw-1;
        return [parseInt(e.substr(0, r)), parseInt(e.substr(r + 1))]
    } catch (r) {
        return [parseInt(e)]
    }
}

function parseFloatRange() {
    try {
        var e = inp.indexOf("-", 1);
        if (-1 == e) throw-1;
        return [parseFloat(inp.substr(0, e)), parseFloat(inp.substr(e + 1))]
    } catch (e) {
        return [parseFloat(inp)]
    }
}

function loadCIF(e, r) {
    var t = new CIFparser;
    if (t.parse(e), r) return cont = to_cont(t.data), cont;
    window.__CIFDICT__ || loadCIFdic();
    var a, o, n, i;
    for (a in t.data) for (o in t.data[a]) for (n in t.data[a][o]) if (t.data[a][o][n] instanceof Array) for (i = 0; i < t.data[a][o][n].length; i++) t.data[a][o][n][i] = "?" != t.data[a][o][n][i] && "." != t.data[a][o][n][i] ? t.data[a][o][n][i] : null; else t.data[a][o][n] = "?" != t.data[a][o][n] && "." != t.data[a][o][n] ? t.data[a][o][n] : null;
    var s;
    for (a in t.data) for (o in t.data[a]) if (__CIFDICT__.hasOwnProperty(o)) for (n in t.data[a][o]) if (__CIFDICT__[o].hasOwnProperty(n)) if (s = __CIFDICT__[o][n], t.data[a][o][n] instanceof Array) for (i = 0; i < t.data[a][o][n].length; i++) t.data[a][o][n][i] = s.call(null, t.data[a][o][n][i]); else t.data[a][o][n] = s.call(null, t.data[a][o][n]);
    return cont = to_cont(t.data), cont
}

function to_cont(e) {
    var r = "", t = e[Object.keys(e)], a = t.struct_keywords;
    void 0 !== a && (classification = "%-40s".$(a.pdbx_keywords[0]), depDate = "%-10s".$(t.pdbx_database_status.recvd_initial_deposition_date[0]), idCode = "%4s".$(a.entry_id[0]), line = "%-6s".$("HEADER") + "     " + classification + depDate + " " + idCode, r = r + line + "\n"), r = r + t.entry.id + "\n", r = r + "TITLE     " + t.struct.title + "\n";
    var o = t.struct_conf;
    if (o.id.length > 0) for (i = 0; i < o.id.length; i++) serNum = "%4d".$(o.id[i]), helixID = "%3s".$(o.pdbx_PDB_helix_id[i]), beg_label = "%-3s".$(o.beg_label_comp_id[i]), end_label = "%-3s".$(o.end_label_comp_id[i]), beg_chain = "%s".$(o.beg_label_asym_id[i]), end_chain = "%s".$(o.end_label_asym_id[i]), beg_seqid = "%4d".$(o.beg_label_seq_id[i]), end_seqid = "%4d".$(o.end_label_seq_id[i]), initICode = "%s".$(" "), endICode = "%s".$(" "), helixClass = "%2d".$(o.pdbx_PDB_helix_class[i]), comment = "%-30s".$(" "), length = "%2d".$(o.pdbx_PDB_helix_length[i]), line = "%-6s".$("HELIX") + " " + helixID + " " + helixID + " " + beg_label + " " + beg_chain + " " + beg_seqid + initICode + " " + end_label + " " + end_chain + " " + end_seqid + endICode + helixClass + comment + " " + length, r = r + line + "\n";
    var n = t.struct_sheet_range;
    if (n.id.length > 0) for (i = 0; i < n.id.length; i++) {
        if (strand = "%3d".$(n.id[i]), sheetID = "%3s".$(n.sheet_id[i]), numStrands = "%-2s".$(n.id.length), beg_label = "%-3s".$(n.beg_label_comp_id[i]), end_label = "%-3s".$(n.end_label_comp_id[i]), beg_chain = "%s".$(n.beg_label_asym_id[i]), end_chain = "%s".$(n.end_label_asym_id[i]), beg_seqid = "%4d".$(n.beg_label_seq_id[i]), end_seqid = "%4d".$(n.end_label_seq_id[i]), initICode = "%s".$(" "), endICode = "%s".$(" "), sense = 0, sense = "%2d".$(sense), curAtom = "", curResName = "", curChainId = "", curResSeq = "", curICode = "", preAtom = "", preResName = "", preChainId = "", preResSeq = "", preICode = "", i > 0 && (sense = t.struct_sheet_order.sense[i], "anti-parallel" === sense ? sense = -1 : "parallel" === sense ? sense = 1 : sense = 0), i > 0 && 0 !== sense) {
            sense = "%2d".$(sense);
            var s = t.pdbx_struct_sheet_hbond;
            curAtom = "%-4s".$(s.range_2_label_atom_id[i - 1]), curResName = "%-3s".$(s.range_2_label_comp_id[i - 1]), curChainId = "%s".$(s.range_2_label_asym_id[i - 1]), curResSeq = "%4d".$(s.range_2_label_seq_id[i - 1]), curICode = "%s".$(" "), preAtom = "%-4s".$(s.range_1_label_atom_id[i - 1]), preResName = "%-3s".$(s.range_1_label_comp_id[i - 1]), preChainId = "%s".$(s.range_1_label_asym_id[i - 1]), preResSeq = "%4d".$(s.range_1_label_seq_id[i - 1]), preICode = "%s".$(" ")
        }
        line = "%-6s".$("SHEET") + " " + strand + " " + sheetID + numStrands + " " + beg_label + " " + beg_chain + beg_seqid + initICode + " " + end_label + " " + end_chain + end_seqid + endICode + sense + " " + curAtom + curResName + " " + curChainId + curResSeq + curICode + " " + preAtom + preResName + " " + preChainId + preResSeq + preICode, r = r + line + "\n"
    }
    var l = t.struct_conn;
    if (void 0 !== l) for (i = 0; i < l.id.length; i++) "disulf" === l.conn_type_id[i] && (serNum = "%3d".$(i + 1), resName1 = "%3s".$(l.ptnr1_auth_comp_id[i]), chainID1 = "%s".$(l.ptnr1_auth_asym_id[i]), seqNum1 = "%4d".$(l.ptnr1_auth_seq_id[i]), iCode1 = " ", resName2 = "%3s".$(l.ptnr2_auth_comp_id[i]), chainID2 = "%s".$(l.ptnr2_auth_asym_id[i]), seqNum2 = "%4d".$(l.ptnr2_auth_seq_id[i]), iCode2 = " ", space = "%23s".$(" "), sym1 = "%6s".$(l.ptnr1_symmetry[i]), sym2 = "%6s".$(l.ptnr2_symmetry[i]), length = "%5.2f".$(l.pdbx_dist_value[i]), line = "%-6s".$("SSBOND") + " " + serNum + " " + resName1 + " " + chainID1 + " " + seqNum1 + iCode1 + "   " + resName2 + " " + chainID2 + " " + seqNum2 + iCode2 + space + sym1 + " " + sym2 + " " + length), "covale" === l.conn_type_id[i] && (name1 = "%-3s".$(l.ptnr1_label_atom_id[i]), altLoc1 = "%s".$(" "), resName1 = "%-3s".$(l.ptnr1_auth_comp_id[i]), chainID1 = "%s".$(l.ptnr1_auth_asym_id[i]), resSeq1 = "%4d".$(l.ptnr1_auth_seq_id[i]), iCode1 = "%s".$(" "), space = "%15s".$(" "), name2 = "%-4s".$(l.ptnr2_label_atom_id[i]), altLoc2 = "%s".$(" "), resName2 = "%-3s".$(l.ptnr2_auth_comp_id[i]), chainID2 = "%s".$(l.ptnr2_auth_asym_id[i]), resSeq2 = "%4d".$(l.ptnr2_auth_seq_id[i]), iCode2 = "%s".$(" "), sym1 = "%6s".$(l.ptnr1_symmetry[i]), sym2 = "%6s".$(l.ptnr2_symmetry[i]), length = "%5.2f".$(l.pdbx_dist_value[i]), line = "%-6s".$("LINK") + "      " + name1 + altLoc1 + resName1 + " " + chainID1 + resSeq1 + iCode1 + space + name2 + altLoc2 + resName2 + " " + chainID2 + resSeq2 + iCode2 + "   " + sym1 + " " + sym2 + " " + length), r = r + line + "\n";
    var c = t.struct_site_gen;
    if (void 0 !== c) for (i = 0; i < c.id.length; i++) seqNum = "%3d".$(c.id[i]), siteID = "%3s".$(c.site_id[i]), numRes = "%2d".$(c.pdbx_num_res[i]), resName1 = "%3s".$(c.auth_comp_id[i]), chainID1 = "%s".$(c.auth_asym_id[i]), seq1 = "%4d".$(c.auth_seq_id[i]), iCode1 = " ", line = "%-6s".$("SITE") + " " + seqNum + " " + siteID + " " + numRes + " " + resName1 + " " + chainID1 + seq1 + iCode1, r = r + line + "\n";
    var d = t.atom_site;
    if (d.id.length > 0) for (i = 0; i < d.id.length; i++) group = "%-6s".$(d.group_PDB[i]), serial = "%5d".$(d.id[i]), name = "%-4s".$(d.label_atom_id[i]), altLoc = "%s".$(" "), resName = "%-3s".$(d.label_comp_id[i]), chainID = "%s".$(d.label_asym_id[i]), resSeq = "%4d".$(d.auth_seq_id[i]), iCode = "%s".$(" "), x = "%8.3f".$(d.Cartn_x[i]), y = "%8.3f".$(d.Cartn_y[i]), z = "%8.3f".$(d.Cartn_z[i]), occupancy = "%6.2f".$(d.occupancy[i]), tempFactor = "%6.2f".$(d.B_iso_or_equiv[i]), element = "%s".$(d.type_symbol[i]), space = "%12s".$(" "), charge = "%2s".$(" "), line = group + serial + " " + name + altLoc + resName + " " + chainID + resSeq + iCode + "   " + x + y + z + occupancy + tempFactor + space + element, r = r + line + "\n";
    return r = r + line + "\nEND"
}

function dumpCIF(e) {
    for (var r = new RegExp("[\\s()]"), t = new RegExp("[\n]"), a = "", o = 0; o < 1024; o++) a += " ";
    var n = function (e, r) {
        "use strict";
        return e + a.slice(e.length, r)
    }, i = function (e) {
        return null == e ? "?" : "string" != typeof e ? e + "" : t.test(e) ? "\n;" + e + "\n;" : r.test(e) ? "'" + e + "'" : e
    }, s = function (e, r) {
        var e, t, a, o, s, l, c, d = "#\n";
        if (1 == (a = r[Object.keys(r)[0]].length)) {
            o = 0;
            for (k2 in r) k2.length > o && (o = k2.length);
            o += 3;
            for (k2 in r) d += "_" + e + "." + n(k2, o) + i(r[k2][0]) + "\n"
        } else {
            d += "loop_\n", o = [];
            for (k2 in r) d += "_" + e + "." + k2 + "\n", o.push(0);
            for (s = [], t = 0; t < a; t++) {
                s.push(l = []);
                for (k2 in r) l.push(i(r[k2][t]))
            }
            for (c = 0; c < s[0].length; c++) {
                for (o = 0, t = 0; t < s.length; t++) "\n;" != s[t][c].substr(0, 2) && s[t][c].length > o && (o = s[t][c].length);
                for (o += 1, t = 0; t < s.length; t++) "\n;" != s[t][c].substr(0, 2) && (s[t][c] = n(s[t][c], o))
            }
            for (t = 0; t < a; t++) d += s[t].join("") + "\n"
        }
        return d.trim() + "\n"
    }, l = !0, c = function (e, r) {
        var t, a = "";
        for (t in e) "object" != typeof e[t] || Array.isArray(e[t]) || ("data_" != t.substr(0, 5) && "save_" != t.substr(0, 5) && "global_" != t.substr(0, 7) ? a += s(t, e[t]) : (a += t + "\n" + c(e[t]), l = !1));
        return r || !l ? a : a + "#\n"
    };
    return c(e)
}

var w3m_require = function (e) {
    for (var r, t = e.split(".").pop(), a = 0, o = document.scripts.length; a < o; a++) {
        var n = document.scripts[a];
        if ("text/javascript" == n.type && n.src.indexOf("web3dmol.js") > -1) {
            r = n.src.replace("web3dmol.js", e);
            break
        }
    }
    if ("js" == t) {
        var i = document.createElement("script");
        i.type = "text/javascript", i.src = r, document.getElementsByTagName("body")[0].appendChild(i)
    } else if ("css" == t) {
        var i = document.createElement("link");
        i.rel = "stylesheet", i.type = "text/css", i.href = r, document.getElementsByTagName("head")[0].appendChild(i)
    }
}, w3m, canvas, gl;
w3m = {
    mol: {},
    fillqueue_main: [],
    vertex_main_point: [],
    vertex_main_line: [],
    vertex_main_triangle: [],
    vertex_main_line_strip: [],
    vertex_main_triangle_strip: [],
    vertex_index: [],
    index: [],
    drawqueue_main: [],
    drawqueue_index: [],
    breakpoint_line_strip: [],
    breakpoint_triangle_strip: [],
    fillqueue_het: [],
    vertex_het_point: [],
    vertex_het_line: [],
    vertex_het_triangle: [],
    drawqueue_het: [],
    vertex_ext_line: [],
    vertex_ext_triangle: [],
    drawqueue_extra: [],
    fillqueue_label: [],
    vertex_label: [],
    drawqueue_label: [],
    CLENGTH: 0,
    OFF: 0,
    ON: 1,
    PASS: 2,
    ADD: 11,
    REMOVE: 12,
    TOGGLE: 13,
    HIDE: 100,
    DOT: 101,
    LINE: 102,
    BACKBONE: 103,
    TUBE: 104,
    CARTOON: 105,
    PUTTY: 106,
    CUBE: 107,
    STRIP: 108,
    RIBBON: 109,
    RAILWAY: 110,
    ARROW: 111,
    CYLINDER: 112,
    STICK: 113,
    SPHERE: 114,
    BALL_AND_ROD: 115,
    HELIX: 150,
    HELIX_HEAD: 1500,
    HELIX_BODY: 1501,
    HELIX_FOOT: 1502,
    SHEET: 151,
    SHEET_HEAD: 1510,
    SHEET_BODY: 1511,
    SHEET_FOOT: 1512,
    LOOP: 152,
    LOOP_HEAD: 1520,
    LOOP_BODY: 1521,
    LOOP_FOOT: 1522,
    CHAIN_AA: 301,
    CHAIN_NA: 302,
    CHAIN_UNK: 303,
    CHAIN_HET: 304,
    ATOM_MAIN: 1,
    ATOM_HET: 2,
    ATOM_UNK: 3,
    ATOM_INFO_ATOM_TYPE: 0,
    ATOM_INFO_ATOM_ID: 1,
    ATOM_INFO_ATOM_NAME: 2,
    ATOM_INFO_RESIDUE_NAME: 3,
    ATOM_INFO_CHAIN_ID: 4,
    ATOM_INFO_RESIDUE_ID: 5,
    ATOM_INFO_XYZ: 6,
    ATOM_INFO_OCCUPANCY: 7,
    ATOM_INFO_B_FACTOR: 8,
    ATOM_INFO_ELEMENT: 9,
    END_XX: 500,
    END_OO: 501,
    END_SS: 502,
    END_XO: 503,
    END_OX: 504,
    END_SX: 505,
    END_XS: 506,
    END_OS: 507,
    END_SO: 508,
    COLOR_BY_ELEMENT: 601,
    COLOR_BY_RESIDUE: 602,
    COLOR_BY_SS: 603,
    COLOR_BY_CHAIN: 604,
    COLOR_BY_REP: 605,
    COLOR_BY_B_FACTOR: 606,
    COLOR_BY_SPECTRUM: 607,
    COLOR_BY_CHAIN_SPECTRUM: 608,
    COLOR_BY_HYDROPHOBICITY: 609,
    COLOR_BY_USER: 610,
    FOG_LINEAR: 1,
    FOG_EXPONENTIAL: 2,
    LIGHT_PARALLEL: 1,
    LIGHT_POINT: 2,
    LINKAGE_MAIN: 1,
    LINKAGE_TEE: 2,
    LINKAGE_CROSS: 3,
    CARTOON_DEFAULT: 1,
    CARTOON_CUBE: 2,
    CARTOON_RIBBON: 3,
    CARTOON_RAILWAY: 4,
    LABEL_AREA_NONE: 700,
    LABEL_AREA_ATOM: 701,
    LABEL_AREA_BACKBONE: 702,
    LABEL_AREA_RESIDUE: 703,
    LABEL_AREA_CHAIN: 704,
    LABEL_AREA_MOL: 705,
    LABEL_ATOM_NAME: 711,
    LABEL_ATOM_ID: 712,
    LABEL_ATOM_NAME_AND_ID: 713,
    LABEL_ELEMENT: 721,
    LABEL_ELEMENT_AND_ID: 722,
    LABEL_RESIDUE_NAME: 731,
    LABEL_RESIDUE_ID: 732,
    LABEL_RESIDUE_NAME_AND_ID: 733,
    LABEL_CHAIN_ID: 741,
    LABEL_CHAIN_AND_RESIDUE: 742,
    LABEL_CHAIN_AND_RESIDUE_ID: 743,
    LABEL_MIX: 744,
    LABEL_OCCUPANCY: 751,
    LABEL_B_FACTOR: 752,
    LABEL_VDW_RADIUS: 753,
    UI_RADIO: 1,
    UI_CHECKBOX: 2,
    UI_FLOAT: 3,
    UI_INT: 4,
    UI_VECTOR: 5,
    UI_COLOR: 6,
    UI_COLOR_INDEX: 7,
    UI_SELECT: 8,
    UI_BANNER_START: 11,
    UI_BANNER_STOP: 12,
    UI_BUTTON: 13,
    UI_BUTTON_BLUE: 14,
    UI_BUTTON_GREEN: 15,
    UI_BUTTON_RED: 16,
    UI_REP_MODE_MAIN: 21,
    UI_REP_MODE_HET: 22,
    UI_COLOR_MODE_MAIN: 23,
    UI_COLOR_MODE_HET: 24,
    UI_LABEL_AREA_MAIN: 25,
    UI_LABEL_AREA_HET: 26,
    UI_LABEL_CONTENT_MAIN: 27,
    UI_LABEL_CONTENT_HET: 28,
    INNERFACE_VARY: 1e3,
    INNERFACE_TURNOVER: 1001,
    INNERFACE_NON_TURNOVER: 1002,
    MEASURE_DISTANCE: 1101,
    MEASURE_VECTOR_ANGLE: 1102,
    MEASURE_DIHEDRAL_ANGLE: 1103,
    MEASURE_TRIANGLE_AREA: 1104
}, w3m.config = {
    rep_mode_main: w3m.TUBE,
    rep_mode_het: w3m.TUBE,
    color_mode_main: w3m.COLOR_BY_ELEMENT,
    color_mode_het: w3m.COLOR_BY_ELEMENT,
    label_area_main: w3m.LABEL_AREA_NONE,
    label_area_het: w3m.LABEL_AREA_NONE,
    label_content_main: w3m.LABEL_ATOM_NAME,
    label_content_het: w3m.LABEL_ATOM_NAME,
    label_color: [1, 1, 1],
    label_size: 14,
    label_font: "'Source Code Pro',Consolas,monospace",
    light_enable: w3m.ON,
    light_mode: w3m.LIGHT_PARALLEL,
    light_direction: [0, 0, -1],
    light_position: [10, 10, 10],
    light_ambient: [1, 1, 1],
    light_color: [1, 1, 1],
    fog_enable: w3m.ON,
    fog_mode: w3m.FOG_LINEAR,
    fog_color: [0, 0, 0],
    fog_start: 5,
    fog_stop: 15,
    fog_density: .2,
    material_ambient: .4,
    material_diffuse: .8,
    material_specular: 1,
    material_shininess: 60,
    geom_mol_size: 5.6,
    geom_dot_size: 3,
    geom_dot_as_cross: 0,
    geom_cross_radius: .15,
    geom_dash_gap: .2,
    geom_backbone_as_tube: 1,
    geom_tube_smooth: 1,
    geom_tube_radius: .2,
    geom_tube_round_end: 1,
    geom_putty_radius_min: .38,
    geom_putty_radius_max: 1.2,
    geom_stick_radius: .25,
    geom_stick_round_end: 1,
    geom_helix_mode: w3m.CUBE,
    geom_helix_side_differ: 0,
    geom_helix_side_color: 11,
    geom_helix_inner_differ: 0,
    geom_helix_inner_color: 12,
    geom_sheet_mode: w3m.ARROW,
    geom_sheet_flat: 1,
    geom_sheet_side_differ: 0,
    geom_sheet_side_color: 13,
    geom_loop_mode: w3m.TUBE,
    geom_cube_width: 2,
    geom_cube_height: .4,
    geom_cube_side_differ: 0,
    geom_cube_side_color: 14,
    geom_strip_width: 2,
    geom_strip_height: .3,
    geom_strip_side_differ: 0,
    geom_strip_side_color: 15,
    geom_ribbon_width: 2.5,
    geom_ribbon_height: .42,
    geom_ribbon_side_height: .1,
    geom_ribbon_side_differ: 0,
    geom_ribbon_side_color: 16,
    geom_railway_width: 2,
    geom_railway_height: .24,
    geom_railway_radius: .16,
    geom_railway_end_close: 1,
    geom_railway_side_differ: 0,
    geom_railway_side_color: 17,
    geom_arrow_width: 2,
    geom_arrow_height: .4,
    geom_arrowhead_lower: 3.6,
    geom_arrowhead_upper: .4,
    geom_arrow_side_differ: 0,
    geom_arrow_side_color: 18,
    geom_cylinder_radius: 1.6,
    geom_cylinder_round_end: 0,
    geom_cylinder_end_differ: 0,
    geom_cylinder_end_color: 19,
    geom_sphere_radius: .25,
    geom_ball_radius: .25,
    geom_rod_radius: .08,
    smooth_segment: 19,
    smooth_curvature: .8,
    geom_tube_segment: 12,
    geom_stick_theta: Math.PI / 12,
    geom_strip_segment: 4,
    geom_ribbon_segment: 4,
    geom_railway_segment: 4,
    geom_cylinder_segment: 20,
    rotate_speed: .01,
    pan_speed: .01,
    zoom_speed: 1.05,
    animation_speed: .15,
    color_hide: 0,
    color_default: 1,
    color_measure: 2,
    unit_vertex_geometry: 10,
    unit_vertex_label: 7,
    bg: [0, 0, 0, 1],
    show_measurement: 1,
    measure_line_color: 2,
    measure_angle_in_radian: 0,
    label_ball_and_rod: 1,
    show_ssbond: 0,
    show_cell_unit: 0,
    remove_water_mol: 0,
    init: function (e, r, t) {
        for (var a in w3m.color) for (var o in w3m.color[a]) this["color_" + a + "_" + o] = w3m.color[a][o];
        w3m.tool.saveConfigToDefault(), localStorage.config && w3m.tool.recoverConfigFromLocalStorage(), w3m.tool.recoverConfigFromUser(e, r, t), w3m.tool.recoverConfigFromURL()
    }
}, w3m.ajax = function () {
    var e = new XMLHttpRequest, r = "", t = "", a = 0, o = null;
    return drug = !1, e.onprogress = function () {
    }, e.onload = function () {
        200 == this.status ? o(e.responseText) : w3m_isset(PDB.remoteUrl[++a]) ? this.get(r, o) : (a = 0, PDB.tool.printProgress("pdb file not found!"))
    }, e.onabort = function () {
        a = 0
    }, e.ontimeout = function () {
        w3m_isset(PDB.remoteUrl[++a]) ? drug ? this.getDrug(r, o) : this.get(r, o) : a = 0
    }, e.onerror = function () {
        a = 0
    }, e.get = function (e, n) {
        t = -1 != e.indexOf("http://") ? e : -1 != e.indexOf("https://") ? e : PDB.remoteUrl[a] + e + ".pdb", r = e, o = n, this.open("GET", t, !0), this.send()
    }, e.getResidue = function (e, r) {
        e = e.toUpperCase(), t = SERVERURL + "/data/amino_acid/" + e + ".pdb", o = r, drug = !1, this.open("GET", t, !0), this.send()
    }, e.getDrug = function (e, a, n) {
        r = e, t = PDB.DRUBDB_URL[a] + e + ".pdb", o = n, drug = !0, this.open("GET", t, !0), this.send()
    }, e.getDocking = function (e, a, n) {
        r = a, t = e + "/" + a, o = n, drug = !0, this.open("GET", t, !0), this.send()
    }, e
}(), w3m.global = {
    container: null,
    mol: null,
    rotate_x: 0,
    rotate_y: 0,
    rotate_z: 0,
    cycle: null,
    limit: {x: [], y: [], z: [], b_factor: [0, 0], b_factor_backbone: [0, 0]},
    average: {b_factor: [0, 0], b_factor_backbone: [0, 0]},
    default: {config: {}, rgb: {}},
    label_letter_width: 10,
    label_letter_height: 20,
    label_letter_size_x: .01464,
    label_letter_size_y: .06289,
    fragment: [],
    measure: [],
    measuring: 0,
    measuring_handle: null,
    picking: 0,
    picking_handle: null,
    picked_atom: null,
    drop_counter: 0,
    widget: 1
}, w3m.tool = {
    pipeline: function () {
        this.clear(), this.plugin(), this.fill(), this.buffer(), this.recycle()
    }, pipelineInit: function () {
        this.clear(), this.plugin(), this.fill(), this.buffer(), this.recycle()
    }, pipelineGeometry: function () {
        this.clearMain(), this.clearHet(), this.clearExt(), this.plugin(), this.fillMain(), this.fillHet(), this.fillExt(), this.bufferMain(), this.bufferHet(), this.bufferExt(), this.recycle()
    }, pipelineMain: function () {
        this.clearMain(), this.clearExt(), this.plugin(), this.fillMain(), this.fillExt(), this.bufferMain(), this.bufferExt(), this.recycle()
    }, pipelineHet: function () {
        this.clearHet(), this.clearExt(), this.plugin(), this.fillHet(), this.fillExt(), this.bufferHet(), this.bufferExt(), this.recycle()
    }, pipelineLabel: function () {
        this.clearExt(), this.clearLabel(), this.plugin(), this.fillExt(), this.fillLabel(), this.bufferExt(), this.bufferLabel(), this.draw()
    }, pipelineExt: function () {
        this.clearExt(), this.clearLabel(), this.plugin(), this.fillExt(), this.fillLabel(), this.bufferExt(), this.bufferLabel(), this.recycle()
    }, clear: function () {
        this.clearMain(), this.clearHet(), this.clearExt(), this.clearLabel()
    }, clearMain: function () {
        w3m.fillqueue_main = [], w3m.vertex_main_point = [], w3m.vertex_main_line = [], w3m.vertex_main_triangle = [], w3m.vertex_main_line_strip = [], w3m.vertex_main_triangle_strip = [], w3m.vertex_index = [], w3m.index = [], w3m.drawqueue_main = [], w3m.drawqueue_index = [], w3m.breakpoint_line_strip = [], w3m.breakpoint_triangle_strip = []
    }, clearHet: function () {
        w3m.fillqueue_het = [], w3m.vertex_het_point = [], w3m.vertex_het_line = [], w3m.vertex_het_triangle = [], w3m.drawqueue_het = []
    }, clearExt: function () {
        w3m.vertex_ext_line = [], w3m.vertex_ext_triangle = [], w3m.drawqueue_ext = []
    }, clearLabel: function () {
        w3m.fillqueue_label = [], w3m.vertex_label = [], w3m.drawqueue_label = []
    }, plugin: function () {
        for (var e in w3m.mol) {
            var r = w3m.mol[e], t = r.hide, a = !1;
            for (var e in t) if (t[e].length > 0) {
                a = !0;
                break
            }
            for (var e in r.residue) if (a) {
                var o = r.rep_real[e] = [];
                label_area_real = r.label_area_real[e] = [], rep = r.rep[e], label_area = r.label_area[e], r.residue[e].forEach(function (r, a) {
                    t[e].indexOf(a) >= 0 ? (o[a] = w3m.HIDE, label_area_real[a] = w3m.LABEL_AREA_NONE) : (o[a] = rep[a], label_area_real[a] = label_area[a])
                })
            } else r.rep_real[e] = r.rep[e], r.label_area_real[e] = r.label_area[e]
        }
        for (var e in w3m.mol) {
            var r = w3m.mol[e], n = r.highlight, i = !1;
            for (var e in n) if (n[e].length > 0) {
                i = !0;
                break
            }
            r.atom.main.forEach(function (e, t) {
                var a = e[4], o = e[5];
                r.color_real[t] = i && n[a].indexOf(o) < 0 ? 1 : r.color.main[t]
            }), r.color.het.forEach(function (e, t) {
                r.color_real[t] = i ? 1 : e
            })
        }
    }, fill: function () {
        this.fillMain(), this.fillHet(), this.fillExt(), this.fillLabel()
    }, fillMain: function () {
        var e = this;
        if (PDB.residue && "" != PDB.residue) this.mol2fillqueueMain(PDB.residue); else for (var r in w3m.mol) this.mol2fillqueueMain(r);
        w3m.fillqueue_main.forEach(function (r) {
            switch (r[1]) {
                case w3m.DOT:
                    e.fillMainAsDot(r[2], r[3], r[4], r[5]);
                    break;
                case w3m.LINE:
                    e.fillMainAsLine(r[2], r[3], r[4], r[5]);
                    break;
                case w3m.BACKBONE:
                    e.fillMainAsBackbone(r[2], r[3], r[4], r[5]);
                    break;
                case w3m.TUBE:
                    e.fillMainAsTube(r[2], r[3], r[4], r[5]);
                    break;
                case w3m.CARTOON:
                    e.fillMainAsCartoon(r[2], r[3], r[4], r[5]);
                    break;
                case w3m.PUTTY:
                    e.fillMainAsPutty(r[2], r[3], r[4], r[5]);
                    break;
                case w3m.CUBE:
                    e.fillMainAsCube(r[2], r[3], r[4], r[5]);
                    break;
                case w3m.STRIP:
                    e.fillMainAsStrip(r[2], r[3], r[4], r[5]);
                    break;
                case w3m.RIBBON:
                    e.fillMainAsRibbon(r[2], r[3], r[4], r[5]);
                    break;
                case w3m.RAILWAY:
                    e.fillMainAsRailway(r[2], r[3], r[4], r[5]);
                    break;
                case w3m.ARROW:
                    e.fillMainAsArrow(r[2], r[3], r[4], r[5]);
                    break;
                case w3m.STICK:
                    e.fillMainAsStick(r[2], r[3], r[4], r[5]);
                    break;
                case w3m.SPHERE:
                    e.fillMainAsSphere(r[2], r[3], r[4], r[5]);
                    break;
                case w3m.BALL_AND_ROD:
                    e.fillResidueAsBallAndRod(r[2], r[3], r[4])
            }
        })
    }, fillHet: function () {
        var e = this;
        for (var r in w3m.mol) this.mol2fillqueueHet(r);
        w3m.fillqueue_het.forEach(function (r) {
            switch (r[1]) {
                case w3m.DOT:
                    e.fillHetAsDot(r[2]);
                    break;
                case w3m.STICK:
                    e.fillHetAsStick(r[2]);
                    break;
                case w3m.BALL_AND_ROD:
                    e.fillHetAsBallAndRod(r[2]);
                    break;
                case w3m.SPHERE:
                    e.fillHetAsSphere(r[2])
            }
        })
    }, fillExt: function () {
        if (w3m.config.show_ssbond) for (var e in w3m.mol) this.fillSSBond(e);
        w3m.config.show_measurement && this.fillMeasurement(), w3m.config.show_cell_unit && this.fillCellUnit(), this.vertexExt2drawqueue()
    }, fillLabel: function () {
        var e = this;
        for (var r in w3m.mol) this.mol2fillqueueLabel(r);
        w3m.fillqueue_label.forEach(function (r) {
            if (r[0] == w3m.ATOM_MAIN) switch (r[1]) {
                case w3m.LABEL_AREA_ATOM:
                    e.labelMainAtom(r[3], r[4], r[5], r[6], r[2]);
                    break;
                case w3m.LABEL_AREA_BACKBONE:
                    e.labelMainBackbone(r[3], r[4], r[5], r[6], r[2]);
                    break;
                case w3m.LABEL_AREA_RESIDUE:
                    e.labelMainResidue(r[3], r[4], r[5], r[6], r[2]);
                    break;
                case w3m.LABEL_AREA_RESIDUE_CENTER:
                    e.labelMainResidueCenter(r[3], r[4], r[5], r[6], r[2]);
                    break;
                case w3m.LABEL_AREA_CHAIN:
                    e.labelMainChain(r[3], r[4], r[5], r[6], r[2]);
                    break;
                case w3m.LABEL_AREA_MOL:
                    e.labelMainMol(r[3])
            } else switch (r[1]) {
                case w3m.LABEL_AREA_ATOM:
                    e.labelHetAtom(r[3], r[4], r[2]);
                    break;
                case w3m.LABEL_AREA_MOL:
                    e.labelHetMol(r[3])
            }
        }), this.vertexLabel2drawqueue()
    }, mol2fillqueueMain: function (e) {
        var r = w3m.mol[e], t = w3m.config.rep_mode_main;
        for (var a in r.rep_real) for (var o = a, n = w3m_split_by_difference(r.rep_real[o]), i = 0, s = n.length; i < s; i++) {
            var l = n[i][0], c = n[i][1], d = n[i][2];
            d == t && [w3m.TUBE, w3m.PUTTY, w3m.CARTOON].indexOf(d) >= 0 && (0 != i && w3m.HIDE != n[i - 1][2] && d != n[i - 1][2] && l--, i != s - 1 && w3m.HIDE != n[i + 1][2] && d != n[i + 1][2] && c++), w3m.fillqueue_main.push([w3m.ATOM_MAIN, d, e, o, l, c])
        }
        for (var o in r.residue_detail) {
            r.residue_detail[o].forEach(function (r) {
                w3m.fillqueue_main.push([w3m.ATOM_MAIN, w3m.BALL_AND_ROD, e, o, r])
            })
        }
    }, mol2fillqueueHet: function (e) {
        w3m.mol[e];
        w3m.fillqueue_het.push([w3m.ATOM_HET, w3m.config.rep_mode_het, e])
    }, mol2fillqueueLabel: function (e) {
        var r = w3m.mol[e];
        for (var t in r.label_area_real) {
            var a = t, o = w3m_split_by_difference(r.label_area_real[a]);
            for (var n in o) {
                var i = o[n][0], s = o[n][1], l = o[n][2], c = r.label_content[a][i];
                w3m.fillqueue_label.push([w3m.ATOM_MAIN, l, c, e, a, i, s])
            }
        }
        if (w3m.config.label_ball_and_rod) for (var a in r.residue_detail) {
            var d = r.residue_detail[a];
            d.forEach(function (r) {
                w3m.fillqueue_label.push([w3m.ATOM_MAIN, w3m.LABEL_AREA_ATOM, w3m.LABEL_ATOM_NAME, e, a, r, r]), w3m.fillqueue_label.push([w3m.ATOM_MAIN, w3m.LABEL_AREA_RESIDUE_CENTER, w3m.LABEL_CHAIN_AND_RESIDUE, e, a, r, r])
            })
        }
        for (var t in r.tree.het) {
            var a = t;
            w3m.fillqueue_label.push([w3m.ATOM_HET, w3m.config.label_area_het, w3m.config.label_content_het, e, a])
        }
    }, point2vertexIndex: function (e) {
        e[2] && Array.prototype.push.apply(w3m.vertex_index, [].concat(e[0], e[1], w3m.rgb[e[2]], e[3] || [null, null, null]))
    }, point2vertexMainPoint: function (e) {
        e[2] && Array.prototype.push.apply(w3m.vertex_main_point, [].concat(e[0], e[1], w3m.rgb[e[2]], [null, null, null]))
    }, point2vertexMainLine: function (e) {
        e[2] && Array.prototype.push.apply(w3m.vertex_main_line, [].concat(e[0], e[1], w3m.rgb[e[2]], [null, null, null]))
    }, point2vertexMainTriangle: function (e) {
        e[2] && Array.prototype.push.apply(w3m.vertex_main_triangle, [].concat(e[0], e[1], w3m.rgb[e[2]], e[3] || [null, null, null]))
    }, point2vertexMainLineStrip: function (e) {
        e[2] && Array.prototype.push.apply(w3m.vertex_main_line_strip, [].concat(e[0], e[1], w3m.rgb[e[2]], [null, null, null]))
    }, point2vertexMainTriangleStrip: function (e) {
        e[2] && Array.prototype.push.apply(w3m.vertex_main_triangle_strip, [].concat(e[0], e[1], w3m.rgb[e[2]], e[3] || [null, null, null]))
    }, point2vertexHetPoint: function (e) {
        e[2] && Array.prototype.push.apply(w3m.vertex_het_point, [].concat(e[0], e[1], w3m.rgb[e[2]], [null, null, null]))
    }, point2vertexHetLine: function (e) {
        e[2] && Array.prototype.push.apply(w3m.vertex_het_line, [].concat(e[0], e[1], w3m.rgb[e[2]], [null, null, null]))
    }, point2vertexHetTriangle: function (e) {
        e[2] && Array.prototype.push.apply(w3m.vertex_het_triangle, [].concat(e[0], e[1], w3m.rgb[e[2]], e[3] || [null, null, null]))
    }, point2vertexExtLine: function (e) {
        e[2] && Array.prototype.push.apply(w3m.vertex_ext_line, [].concat(e[0], e[1], w3m.rgb[e[2]], [null, null, null]))
    }, point2vertexExtTriangle: function (e) {
        e[2] && Array.prototype.push.apply(w3m.vertex_ext_triangle, [].concat(e[0], e[1], w3m.rgb[e[2]], e[3] || [null, null, null]))
    }, tripoint2ertexMainTriangle: function (e, r, t) {
        w3m.tool.point2vertexMainTriangle(e), w3m.tool.point2vertexMainTriangle(r), w3m.tool.point2vertexMainTriangle(t)
    }, point2vertexLabel: function (e) {
        for (var r = e[0], t = e[1].toString(), a = t.length, o = w3m.global.label_letter_size_x, n = w3m.global.label_letter_size_y / 2, i = 0; i < a; i++) {
            var s = t.charAt(i);
            if (" " != s) {
                var l = w3m.dict.label_st[s], c = (i - a / 2) * o;
                w3m.vertex_label.push(r[0], r[1], r[2], c, -n, l[2][0], l[2][1]), w3m.vertex_label.push(r[0], r[1], r[2], c + o, -n, l[3][0], l[3][1]), w3m.vertex_label.push(r[0], r[1], r[2], c + o, n, l[1][0], l[1][1]), w3m.vertex_label.push(r[0], r[1], r[2], c, -n, l[2][0], l[2][1]), w3m.vertex_label.push(r[0], r[1], r[2], c + o, n, l[1][0], l[1][1]), w3m.vertex_label.push(r[0], r[1], r[2], c, n, l[0][0], l[0][1])
            }
        }
    }, index2drawqueue: function () {
        w3m.index.length && w3m.drawqueue_index.push([gl.TRIANGLES, 0, w3m.index.length])
    }, vertexMain2drawqueue: function () {
        var e = 0, r = 0, t = w3m.config.unit_vertex_geometry;
        if (r = parseInt(w3m.vertex_main_point.length / t), r && (w3m.drawqueue_main.push([gl.POINTS, e, r]), e += r), r = parseInt(w3m.vertex_main_line.length / t), r && (w3m.drawqueue_main.push([gl.LINES, e, r]), e += r), r = parseInt(w3m.vertex_main_triangle.length / t), r && (w3m.drawqueue_main.push([gl.TRIANGLES, e, r]), e += r), w3m.breakpoint_line_strip.length && w3m.vertex_main_line_strip.length) {
            var a = w3m_array_sort(w3m.breakpoint_line_strip), o = 0, n = 0;
            a.forEach(function (r) {
                (n = parseInt(r / t)) > o && (w3m.drawqueue_main.push([gl.LINE_STRIP, e + o, n - o]), o = n)
            })
        }
        if (w3m.breakpoint_triangle_strip.length && w3m.vertex_main_triangle_strip.length) {
            var a = w3m_array_sort(w3m.breakpoint_triangle_strip), o = 0, n = 0;
            a.forEach(function (r) {
                (n = parseInt(r / t)) > o && (w3m.drawqueue_main.push([gl.TRIANGLE_STRIP, e + o, n - o]), o = n)
            })
        }
    }, vertexHet2drawqueue: function () {
        var e = 0, r = 0, t = w3m.config.unit_vertex_geometry;
        r = parseInt(w3m.vertex_het_point.length / t), r && (w3m.drawqueue_het.push([gl.POINTS, e, r]), e += r), r = parseInt(w3m.vertex_het_line.length / t), r && (w3m.drawqueue_het.push([gl.LINES, e, r]), e += r), (r = parseInt(w3m.vertex_het_triangle.length / t)) && (w3m.drawqueue_het.push([gl.TRIANGLES, e, r]), e += r)
    }, vertexExt2drawqueue: function () {
        var e = 0, r = 0, t = w3m.config.unit_vertex_geometry;
        r = parseInt(w3m.vertex_ext_line.length / t), r && (w3m.drawqueue_ext.push([gl.LINES, e, r]), e += r), (r = parseInt(w3m.vertex_ext_triangle.length / t)) && (w3m.drawqueue_ext.push([gl.TRIANGLES, e, r]), e += r)
    }, vertexLabel2drawqueue: function () {
        var e = parseInt(w3m.vertex_label.length / w3m.config.unit_vertex_label);
        e && w3m.drawqueue_label.push([gl.TRIANGLES, 0, e])
    }, buffer: function () {
        this.bufferMain(), this.bufferHet(), this.bufferExt(), this.bufferLabel()
    }, bufferMain: function () {
        w3m.vertex_main_point = [], w3m.vertex_main_line = [], w3m.vertex_main_triangle = [], w3m.vertex_main_line_strip = [], w3m.vertex_main_triangle_strip = []
    }, bufferHet: function () {
        w3m.vertex_het_point = [], w3m.vertex_het_line = [], w3m.vertex_het_triangle = []
    }, bufferExt: function () {
        w3m.vertex_ext_line = [], w3m.vertex_ext_triangle = []
    }, bufferLabel: function () {
        w3m.vertex_label = []
    }, breakLineStrip: function () {
        w3m.breakpoint_line_strip.push(w3m.vertex_main_line_strip.length)
    }, breakTriangleStrip: function () {
        w3m.breakpoint_triangle_strip.push(w3m.vertex_main_triangle_strip.length)
    }, getHLHD: function (e, r, t, a) {
        for (var o = w3m.mol[e], n = !0, i = !0, s = o.highlight[r], l = o.hide[r], t = t || w3m_find_first(o.residue[r]), a = a || w3m_find_last(o.residue[r]), c = t; c <= a; c++) if (!w3m_array_has(s, c)) {
            n = !1;
            break
        }
        for (var c = t; c <= a; c++) if (!w3m_array_has(l, c)) {
            i = !1;
            break
        }
        return [n, i]
    }, savePicture: function (e) {
        var r = "PDB-" + w3m.global.mol.toUpperCase() + "." + e;
        if (w3m_array_has(["png", "jpeg", "bmp", "webp"], e)) {
            if (canvas.toBlob) canvas.toBlob(function (e) {
                var t = URL.createObjectURL(e), a = document.createElement("a");
                a.href = t, a.download = r, a.click()
            }, "image/" + e, 1); else if (canvas.msToBlob) navigator.msSaveBlob(canvas.msToBlob(), r); else if (canvas.toDataURL) {
                var t = canvas.toDataURL("image/" + e, 1), a = document.createElement("a");
                a.href = t, a.download = r, a.target = "_blank", a.click()
            }
        } else alert("Wrong Type.")
    }, toast: function (e) {
        var r = w3m_$("w3m-toast");
        w3m_html(r, e), w3m_show(r), window.setTimeout(function () {
            w3m_hide(r)
        }, 2500)
    }, recycle: function () {
        var e = w3m.global.rotate_x || w3m.global.rotate_y || w3m.global.rotate_z, r = Date.now() - 16,
            t = function () {
                var e = Date.now(), a = (e - r) / 1e3;
                r = e;
                var o = w3m.config.animation_speed;
                mat4.rotate((w3m.global.rotate_x ? o : 0) * a, (w3m.global.rotate_y ? o : 0) * a, (w3m.global.rotate_z ? o : 0) * a);
                w3m.global.cycle = w3m_cycle_start(t)
            };
        e ? w3m.global.cycle || (w3m.global.cycle = w3m_cycle_start(t)) : (w3m_cycle_stop(w3m.global.cycle), w3m.global.cycle = null)
    }, background: function () {
        gl.clearColor(w3m.config.bg[0], w3m.config.bg[1], w3m.config.bg[2], w3m.config.bg[3])
    }, saveConfigToDefault: function () {
        w3m.global.default.config = w3m_copy_object(w3m.config), w3m.global.default.rgb = w3m_copy_object(w3m.rgb)
    }, recoverConfigFromDefault: function () {
        w3m.config = w3m_copy_object(w3m.global.default.config), w3m.rgb = w3m_copy_object(w3m.global.default.rgb)
    }, saveConfigToLocalStorage: function () {
        localStorage.config = JSON.stringify(w3m.config), localStorage.rgb = JSON.stringify(w3m.rgb)
    }, recoverConfigFromLocalStorage: function () {
        localStorage.config && (w3m.config = JSON.parse(localStorage.config)), localStorage.rgb && (w3m.rgb = JSON.parse(localStorage.rgb))
    }, clearLocalStorage: function () {
        localStorage.clear()
    }, recoverConfigFromURL: function () {
        var e = {};
        if (location.search) {
            if (location.search.slice(1).split("&").forEach(function (r) {
                var t = r.split("=");
                e[t[0]] = decodeURIComponent(t[1])
            }), w3m_isset(e.id) && (w3m.global.mol = e.id), w3m_isset(e.widget) && (w3m.global.widget = parseInt(e.widget)), w3m_isset(e.config)) {
                var r = JSON.parse(e.config);
                for (var t in r) w3m.config[t] = r[t]
            }
            if (w3m_isset(e.color)) {
                var a = JSON.parse(e.color);
                for (var t in a) w3m.rgb[t] = a[t]
            }
        }
    }, recoverConfigFromUser: function (e, r, t) {
        var r = r || {}, t = t || {};
        if (w3m_isset(e) && (w3m.global.widget = e), !w3m_isempty(r)) for (var a in r) w3m.config[a] = r[a];
        if (!w3m_isempty(t)) for (var a in t) w3m.rgb[a] = t[a]
    }, highlightSegment: function (e, r, t, a, o) {
        for (var n = w3m.mol[e], i = n.residue[r], s = n.highlight[r], l = n.hide[r], c = t; c <= a; c++) if (i[c]) {
            switch (o || w3m.TOGGLE) {
                case w3m.ADD:
                    w3m_array_add(s, c);
                    break;
                case w3m.REMOVE:
                    w3m_array_remove(s, c);
                    break;
                case w3m.TOGGLE:
                    w3m_array_toggle(s, c)
            }
            w3m_array_remove(l, c)
        }
    }, hideSegment: function (e, r, t, a, o) {
        for (var n = w3m.mol[e], i = n.residue[r], s = n.highlight[r], l = n.hide[r], c = t; c <= a; c++) if (i[c]) {
            switch (o || w3m.TOGGLE) {
                case w3m.ADD:
                    w3m_array_add(l, c);
                    break;
                case w3m.REMOVE:
                    w3m_array_remove(l, c);
                    break;
                case w3m.TOGGLE:
                    w3m_array_toggle(l, c)
            }
            w3m_array_remove(s, c)
        }
    }, getChainType: function (e) {
        return w3m.dict.amino_acid.indexOf(e) >= 0 ? w3m.CHAIN_AA : w3m.dict.nucleic_acid.indexOf(e) >= 0 ? w3m.CHAIN_NA : w3m.CHAIN_UNK
    }, updateMolRepColorLabelMap: function (e) {
        w3m_isset(e) ? (this.updateMolRepMap(e), this.updateMolColorMap(e), this.updateMolLabelMap(e)) : w3m.mol.forEach(function (e) {
            var r = e.id;
            this.updateMolRepMap(r), this.updateMolColorMap(r), this.updateMolLabelMap(r)
        })
    }, updateFragmentRepColorLabelMap: function (e) {
        if (w3m_isset(e)) {
            var r = w3m.global.fragment[e];
            this.updateFragmentRepMap(r.rep, r.mol, r.chain, r.start, r.stop), this.updateFragmentColorMap(r.color, r.mol, r.chain, r.start, r.stop, r.defined_color), this.updateFragmentLabelMap(r.label_area, r.label_content, r.mol, r.chain, r.start, r.stop)
        } else w3m.global.fragment.forEach(function (e) {
            w3m.tool.updateFragmentRepMap(e.rep, e.mol, e.chain, e.start, e.stop), w3m.tool.updateFragmentColorMap(e.color, e.mol, e.chain, e.start, e.stop, e.defined_color), w3m.tool.updateFragmentLabelMap(e.label_area, e.label_content, e.mol, e.chain, e.start, e.stop)
        })
    }, updateMolRepMap: function (e) {
        var r = w3m.mol[e].rep, t = w3m.config.rep_mode_main;
        for (var a in r) for (var o in r[a]) r[a][o] = t
    }, updateFragmentRepMap: function (e, r, t, a, o) {
        for (var n = w3m.mol[r].rep[t], i = a; i <= o; i++) n[i] && (n[i] = e)
    }, updateMolColorMap: function (e) {
        this.updateMolColorMapMain(e), this.updateMolColorMapHet(e)
    }, updateMolColorMapMain: function (e) {
        var r = w3m.mol[e];
        switch (w3m.config.color_mode_main) {
            case w3m.COLOR_BY_ELEMENT:
                var t = w3m.color.element;
                r.color.main = r.atom.main.map(function (e) {
                    return t[e[9]]
                });
                break;
            case w3m.COLOR_BY_RESIDUE:
                var t = w3m.color.residue;
                r.color.main = r.atom.main.map(function (e) {
                    return t[e[3]]
                });
                break;
            case w3m.COLOR_BY_SS:
                var t = {};
                t[w3m.HELIX] = t[w3m.HELIX_HEAD] = t[w3m.HELIX_BODY] = t[w3m.HELIX_FOOT] = w3m.color.ss.helix, t[w3m.SHEET] = t[w3m.SHEET_HEAD] = t[w3m.SHEET_BODY] = t[w3m.SHEET_FOOT] = w3m.color.ss.sheet, t[w3m.LOOP] = t[w3m.LOOP_HEAD] = t[w3m.LOOP_BODY] = t[w3m.LOOP_FOOT] = w3m.color.ss.loop, r.color.main = r.atom.main.map(function (e) {
                    return t[r.ss[e[4]][e[5]][0]]
                });
                break;
            case w3m.COLOR_BY_CHAIN:
                var t = w3m.color.chain;
                r.color.main = r.atom.main.map(function (e) {
                    return t[e[4]]
                });
                break;
            case w3m.COLOR_BY_REP:
                var a = w3m.color.rep, t = [];
                t[w3m.HIDE] = a.hide, t[w3m.DOT] = a.dot, t[w3m.LINE] = a.line, t[w3m.BACKBONE] = a.backbone, t[w3m.STICK] = a.stick, t[w3m.TUBE] = a.tube, t[w3m.CARTOON] = a.cartoon, t[w3m.CUBE] = a.cube, t[w3m.STRIP] = a.strip, t[w3m.RAILWAY] = a.railway, t[w3m.RIBBON] = a.ribbon, t[w3m.ARROW] = a.arrow, t[w3m.SPHERE] = a.sphere, r.color.main = r.atom.main.map(function (e) {
                    return t[r.rep[e[4]][e[5]]]
                });
                break;
            case w3m.COLOR_BY_B_FACTOR:
                var o = w3m.global.limit.b_factor[1] - w3m.global.limit.b_factor[0], n = w3m.global.limit.b_factor[0];
                r.color.main = o ? r.atom.main.map(function (e) {
                    return 1e3 + Math.round((e[8] - n) / o * 100)
                }) : r.atom.main.map(function (e) {
                    return 1050
                });
                break;
            case w3m.COLOR_BY_SPECTRUM:
                var i = w3m_find_last(r.atom.main), s = 100 / i;
                r.color.main = r.atom.main.map(function (e, r) {
                    return 1100 - Math.round(r * s)
                });
                break;
            case w3m.COLOR_BY_CHAIN_SPECTRUM:
                var l = {id: null};
                r.color.main = r.atom.main.map(function (e, t) {
                    if (l.id == e[4]) var a = l.start, o = l.stop, n = o - a; else {
                        var i = r.tree.main[e[4]], a = w3m_find_object_first(w3m_find_first(i, !0), !0),
                            o = w3m_find_object_last(w3m_find_last(i, !0), !0), n = o - a;
                        l = {id: e[4], start: a, stop: o}
                    }
                    return 1100 - Math.round(100 * (t - a) / n)
                });
                break;
            case w3m.COLOR_BY_HYDROPHOBICITY:
                var t = w3m.color.hydrophobicity;
                r.color.main = r.atom.main.map(function (e) {
                    return t[e[3]]
                });
                break;
            default:
                var t = w3m.color.element;
                r.color.main = r.atom.main.map(function (e) {
                    return t[e[9]]
                })
        }
    }, updateMolColorMapHet: function (e) {
        var r = w3m.mol[e];
        switch (w3m.config.color_mode_het) {
            case w3m.COLOR_BY_ELEMENT:
                var t = w3m.color.element;
                r.color.het = r.atom.het.map(function (e) {
                    return t[e[9]]
                });
                break;
            case w3m.COLOR_BY_CHAIN:
                var t = w3m.color.chain;
                r.color.het = r.atom.het.map(function (e) {
                    return t[e[4]]
                });
                break;
            case w3m.COLOR_BY_REP:
                switch (w3m.config.rep_mode_het) {
                    case w3m.HIDE:
                        var a = w3m.color.rep.hide;
                        break;
                    case w3m.DOT:
                        var a = w3m.color.rep.dot;
                        break;
                    case w3m.LINE:
                        var a = w3m.color.rep.line;
                        break;
                    case w3m.STICK:
                        var a = w3m.color.rep.stick;
                        break;
                    case w3m.BALL_AND_ROD:
                        var a = w3m.color.rep.ball_and_rod;
                        break;
                    case w3m.SPHERE:
                        var a = w3m.color.rep.sphere
                }
                r.color.het = r.atom.het.map(function (e) {
                    return a
                });
                break;
            case w3m.COLOR_BY_B_FACTOR:
                var o = w3m.global.limit.b_factor[1] - w3m.global.limit.b_factor[0], n = w3m.global.limit.b_factor[0];
                r.color.het = o ? r.atom.het.map(function (e) {
                    return 1e3 + Math.round((e[8] - n) / o * 100)
                }) : r.atom.het.map(function (e) {
                    return 1050
                });
                break;
            default:
                var t = w3m.color.element;
                r.color.het = r.atom.het.map(function (e) {
                    return t[e[9]]
                })
        }
    }, updateFragmentColorMap: function (e, r, t, a, o, n) {
        var i = w3m.mol[r], s = i.tree.main[t], l = i.atom.main, c = i.color.main;
        switch (e) {
            case w3m.COLOR_BY_ELEMENT:
                for (var d = w3m.color.element, m = a; m <= o; m++) {
                    var P = s[m];
                    for (var u in P) {
                        var D = P[u];
                        c[D] = d[l[D][9]]
                    }
                }
                break;
            case w3m.COLOR_BY_RESIDUE:
                for (var d = w3m.color.residue, m = a; m <= o; m++) {
                    var P = s[m];
                    for (var u in P) {
                        var D = P[u];
                        c[D] = d[l[D][3]]
                    }
                }
                break;
            case w3m.COLOR_BY_SS:
                var d = {};
                d[w3m.HELIX] = d[w3m.HELIX_HEAD] = d[w3m.HELIX_BODY] = d[w3m.HELIX_FOOT] = w3m.color.ss.helix, d[w3m.SHEET] = d[w3m.SHEET_HEAD] = d[w3m.SHEET_BODY] = d[w3m.SHEET_FOOT] = w3m.color.ss.sheet, d[w3m.LOOP] = d[w3m.LOOP_HEAD] = d[w3m.LOOP_BODY] = d[w3m.LOOP_FOOT] = w3m.color.ss.loop;
                for (var m = a; m <= o; m++) {
                    var P = s[m];
                    for (var u in P) {
                        var D = P[u], _ = l[D];
                        c[D] = d[i.ss[_[4]][_[5]][0]]
                    }
                }
                break;
            case w3m.COLOR_BY_CHAIN:
                for (var h = w3m.color.chain[t], m = a; m <= o; m++) {
                    var P = s[m];
                    for (var u in P) {
                        var D = P[u];
                        c[D] = h
                    }
                }
                break;
            case w3m.COLOR_BY_REP:
                var B = w3m.color.rep, d = [];
                d[w3m.HIDE] = B.hide, d[w3m.DOT] = B.dot, d[w3m.LINE] = B.line, d[w3m.BACKBONE] = B.backbone, d[w3m.STICK] = B.stick, d[w3m.TUBE] = B.tube, d[w3m.CARTOON] = B.cartoon, d[w3m.CUBE] = B.cube, d[w3m.STRIP] = B.strip, d[w3m.RAILWAY] = B.railway, d[w3m.RIBBON] = B.ribbon, d[w3m.ARROW] = B.arrow, d[w3m.SPHERE] = B.sphere;
                for (var m = a; m <= o; m++) {
                    var P = s[m];
                    for (var u in P) {
                        var D = P[u], _ = l[D];
                        c[D] = d[i.rep[_[4]][_[5]]]
                    }
                }
                break;
            case w3m.COLOR_BY_B_FACTOR:
                var p = w3m.global.limit.b_factor[1] - w3m.global.limit.b_factor[0], E = w3m.global.limit.b_factor[0];
                if (p) for (var m = a; m <= o; m++) {
                    var P = s[m];
                    for (var u in P) {
                        var D = P[u];
                        c[D] = 1e3 + Math.round((l[D][8] - E) / p * 100)
                    }
                } else for (var m = a; m <= o; m++) {
                    var P = s[m];
                    for (var u in P) {
                        var D = P[u];
                        c[D] = 1050
                    }
                }
                break;
            case w3m.COLOR_BY_SPECTRUM:
                for (var f = w3m_find_last(i.atom.main), w = 100 / f, m = a; m <= o; m++) {
                    var P = s[m];
                    for (var u in P) {
                        var D = P[u];
                        c[D] = 1100 - Math.round(D * w)
                    }
                }
                break;
            case w3m.COLOR_BY_CHAIN_SPECTRUM:
                for (var g = w3m_find_object_first(w3m_find_first(s, !0), !0), v = w3m_find_object_last(w3m_find_last(s, !0), !0), f = v - g, w = 100 / f, m = a; m <= o; m++) {
                    var P = s[m];
                    for (var u in P) {
                        var D = P[u];
                        c[D] = 1100 - Math.round((D - g) * w)
                    }
                }
                break;
            case w3m.COLOR_BY_HYDROPHOBICITY:
                for (var d = w3m.color.hydrophobicity, m = a; m <= o; m++) {
                    var P = s[m];
                    for (var u in P) {
                        var D = P[u];
                        c[D] = d[l[D][3]]
                    }
                }
                break;
            case w3m.COLOR_BY_USER:
                for (var h = n, m = a; m <= o; m++) {
                    var P = s[m];
                    for (var u in P) {
                        var D = P[u];
                        c[D] = h
                    }
                }
                break;
            default:
                for (var d = w3m.color.element, m = a; m <= o; m++) {
                    var P = s[m];
                    for (var u in P) {
                        var D = P[u];
                        c[D] = d[l[D][9]]
                    }
                }
        }
    }, updateMolLabelMap: function (e) {
        this.updateMolLabelAreaMap(e), this.updateMolLabelContentMap(e)
    }, updateMolLabelAreaMap: function (e) {
        var r = w3m.mol[e].label_area, t = w3m.config.label_area_main;
        for (var a in r) for (var o in r[a]) r[a][o] = t
    }, updateMolLabelContentMap: function (e) {
        var r = w3m.mol[e].label_content, t = w3m.config.label_content_main;
        for (var a in r) for (var o in r[a]) r[a][o] = t
    }, updateFragmentLabelMap: function (e, r, t, a, o, n) {
        for (var i = w3m.mol[t].label_area[a], s = w3m.mol[t].label_content[a], l = o; l <= n; l++) i[l] = e, s[l] = r
    }, addFragment: function (e, r, t, a) {
        var e = e || w3m.global.mol, o = w3m.mol[e], n = w3m.global.fragment.length;
        return r = r || w3m_find_object_first(o.residue), residue_start = t || w3m_find_first(o.residue[r]), residue_stop = a || w3m_find_last(o.residue[r]), rep_mode = o.rep[r][residue_start] || w3m.config.rep_mode_main, color_mode = w3m.config.color_mode_main, label_area = o.label_area[r][residue_start] || w3m.config.label_area_main, label_content = o.label_content[r][residue_start] || w3m.config.label_content_main, defined_color = 1300 + n, HLHD = this.getHLHD(e, r, residue_start, residue_stop), w3m.global.fragment[n] = {
            id: n,
            mol: e,
            chain: r,
            start: residue_start,
            stop: residue_stop,
            rep: rep_mode,
            color: color_mode,
            label_area: label_area,
            label_content: label_content,
            defined_color: defined_color,
            highlight: HLHD[0],
            hide: HLHD[1]
        }, w3m.rgb[defined_color] = w3m_copy(w3m.rgb[1]), n
    }, updateFragment: function (e) {
        w3m.global.fragment[e];
        this.updateFragmentRepColorLabelMap(e)
    }, resetFragment: function (e) {
        var r = w3m.global.fragment[e];
        r.rep = w3m.config.rep_mode_main, r.color = w3m.config.color_mode_main, r.label_area = w3m.config.label_area_main, r.label_content = w3m.config.label_content_main, r.highlight && this.highlightSegment(r.mol, r.chain, r.start, r.stop, w3m.REMOVE), r.hide && this.hideSegment(r.mol, r.chain, r.start, r.stop, w3m.REMOVE), w3m.rgb[defined_color] = w3m_copy(w3m.rgb[1]), this.updateFragment(e)
    }, deleteFragment: function (e) {
        this.resetFragment(e), w3m.global.fragment[e] = void 0
    }, compute_NB_by_rotation: function (e) {
        var r, t = e[0][3], a = Math.abs(t[0]), o = Math.abs(t[1]), n = Math.abs(t[2]);
        r = a < o ? n < a ? [0, 0, 1] : [1, 0, 0] : n < o ? [0, 0, 1] : [0, 1, 0], r = vec3.cross(e[0][3], r), e[0][4] = vec3.unit(vec3.cross(e[0][3], r)), e[0][5] = vec3.cross(e[0][3], e[0][4]);
        for (var i = 1, s = e.length; i < s; i++) {
            var l = vec3.cross(e[i - 1][3], e[i][3]);
            if (vec3.len(l) > Number.EPSILON) {
                var c = vec3.rad(e[i - 1][3], e[i][3], !0);
                e[i][4] = vec3.unit(mat4.xvec3(mat4.orbit(vec3.unit(l), c), e[i - 1][4]))
            } else e[i][4] = w3m_copy(e[i - 1][4]);
            e[i][5] = vec3.cross(e[i][3], e[i][4])
        }
    }, compute_NB_for_stick: function (e, r, t) {
        if (t) {
            var a = [e[0][0], e[0][1], e[0][2]].concat(t);
            e.unshift(a)
        } else {
            var o, n = e[0][3], i = Math.abs(n[0]), s = Math.abs(n[1]), l = Math.abs(n[2]);
            o = i < s ? l < i ? [0, 0, 1] : [1, 0, 0] : l < s ? [0, 0, 1] : [0, 1, 0],
                o = vec3.cross(e[0][3], o), e[0][4] = vec3.unit(vec3.cross(e[0][3], o)), e[0][5] = vec3.cross(e[0][3], e[0][4])
        }
        for (var c = 1, d = e.length; c < d; c++) {
            var m = e[c][6] || {cross_link: !1, residue_id: null, atom_name: null},
                P = vec3.cross(e[c - 1][3], e[c][3]);
            if (vec3.len(P) > Number.EPSILON) {
                var u = vec3.rad(e[c - 1][3], e[c][3], !0);
                e[c][4] = vec3.unit(mat4.xvec3(mat4.orbit(vec3.unit(P), u), e[c - 1][4]))
            } else e[c][4] = w3m_copy(e[c - 1][4]);
            e[c][5] = vec3.cross(e[c][3], e[c][4]), m.cross_link && (w3m_isset(r[m.residue_id]) || (r[m.residue_id] = {}), r[m.residue_id][m.atom_name] = [vec3.negate(e[c][3]), e[c][4], e[c][5]]), e[c].splice(6, 1)
        }
        t && e.shift()
    }, simpleFrame: function (e, r, t) {
        console.log("simpleFrame:" + r);
        for (var t = !w3m_isset(t) || t, a = 0, o = e.length; a < o; a++) {
            if (a) {
                var n = vec3.mid(e[a - 1][1], e[a][1]), i = vec3.unit(vec3.point(e[a - 1][1], e[a][1]));
                r.push([e[a - 1][0], n, e[a - 1][2], i]), r.push([e[a][0], n, e[a][2], i])
            }
            var s = vec3.unit(vec3.point((e[a - 1] || e[a])[1], (e[a + 1] || e[a])[1]));
            r.push([e[a][0], e[a][1], e[a][2], s])
        }
        t && this.compute_NB_by_rotation(r)
    }, smoothFrame: function (e, r, t) {
        var a = PDB.GeoCenterOffset, t = !w3m_isset(t) || t,
            o = w3m.config.smooth_segment % 2 ? w3m.config.smooth_segment + 1 : w3m.config.smooth_segment,
            n = w3m.config.smooth_curvature, i = e.length;
        if (0 != i) {
            e[0][3] = math.polysum([n, -n / 4], [vec3.point(e[0][1], e[1][1]), vec3.point(e[0][1], e[2][1])]), r[0] = [e[0][0], e[0][1], e[0][2], vec3.unit(e[0][3])];
            for (var s = 1; s < i; s++) {
                e[s][3] = s == i - 1 ? math.polysum([n, -n / 4], [vec3.point(e[s - 1][1], e[s][1]), vec3.point(e[s - 2][1], e[s][1])]) : vec3.scalar(n, vec3.point(e[s - 1][1], e[s + 1][1]));
                for (var l = math.hermiteFit(o, e[s - 1][1], e[s][1], e[s - 1][3], e[s][3]), c = e[s - 1][0], d = e[s - 1][2], m = 1; m <= o; m++) {
                    var P = l[m][0], u = vec3.unit(l[m][1]);
                    if (r.push([c, P, d, u]), m == o / 2 && (c = e[s][0], d = e[s][2], r.push([c, P, d, u])), 2 == w3m.CLENGTH) {
                        var D = w3m.tool.getMainAtomById(w3m.global.mol, c);
                        PDB.residue && "" != PDB.residue && (D = w3m.tool.getMainAtomById(PDB.residue, c)), D && w3m.mol[w3m.global.mol].residueData[D.chainname][D.resid].path.push(new THREE.Vector3(P[0] + a.x, P[1] + a.y, P[2] + a.z))
                    }
                }
            }
            t && this.compute_NB_by_rotation(r)
        }
    }, naturalFrame: function (e, r) {
        var t = PDB.GeoCenterOffset,
            a = w3m.config.smooth_segment % 2 ? w3m.config.smooth_segment + 1 : w3m.config.smooth_segment,
            o = w3m.config.smooth_curvature, n = e.length;
        e[0][3] = math.polysum([o, -o / 4], [vec3.point(e[0][1], e[1][1]), vec3.point(e[0][1], e[2][1])]);
        var i = vec3.unit(e[0][3]), s = vec3.unit(vec3.cross(i, e[0][4]));
        p = vec3.cross(s, i), e[0][4] = vec3.cross(s, i);
        var l = w3m.tool.getMainAtomById(w3m.global.mol, e[0][0]);
        PDB.residue && "" != PDB.residue && (l = w3m.tool.getMainAtomById(PDB.residue, e[0][0])), r[0] = [e[0][0], e[0][1], e[0][2], i, e[0][4], s, e[0][6]];
        for (var c = 1; c < n; c++) {
            e[c][3] = c == n - 1 ? math.polysum([o, -o / 4], [vec3.point(e[c - 1][1], e[c][1]), vec3.point(e[c - 2][1], e[c][1])]) : vec3.scalar(o, vec3.point(e[c - 1][1], e[c + 1][1]));
            var d = math.hermiteFit(a, e[c - 1][1], e[c][1], e[c - 1][3], e[c][3]), m = e[c - 1][0], P = e[c - 1][2],
                u = e[c - 1][6], i = vec3.unit(e[c][3]), s = vec3.unit(vec3.cross(i, e[c][4]));
            e[c][4] = vec3.cross(s, i);
            for (var D = 1; D <= a; D++) {
                var _ = D / a, h = d[D][0], i = vec3.unit(d[D][1]), B = vec3.step(_, e[c - 1][4], e[c][4]),
                    s = vec3.unit(vec3.cross(i, B)), p = vec3.cross(s, i);
                if (r.push([m, h, P, i, p, s, u]), D == a / 2 && (m = e[c][0], P = e[c][2], u = e[c][6], r.push([m, h, P, i, p, s, u])), 1 == w3m.CLENGTH) {
                    var l = w3m.tool.getMainAtomById(w3m.global.mol, m);
                    PDB.residue && "" != PDB.residue && (l = w3m.tool.getMainAtomById(PDB.residue, m)), l && (w3m.mol[w3m.global.mol].residueData[l.chainname][l.resid].path.push(new THREE.Vector3(h[0] + t.x, h[1] + t.y, h[2] + t.z)), w3m.mol[w3m.global.mol].residueData[l.chainname][l.resid].binormals.push(new THREE.Vector3(s[0], s[1], s[2])), w3m.mol[w3m.global.mol].residueData[l.chainname][l.resid].normals.push(new THREE.Vector3(p[0], p[1], p[2])), w3m.mol[w3m.global.mol].residueData[l.chainname][l.resid].tangents.push(new THREE.Vector3(i[0], i[1], i[2])))
                }
            }
        }
        w3m.CLENGTH = 0
    }, puttyFrame: function (e, r, t) {
        console.log("puttyFrame:" + r);
        var t = !w3m_isset(t) || t,
            a = w3m.config.smooth_segment % 2 ? w3m.config.smooth_segment + 1 : w3m.config.smooth_segment,
            o = w3m.config.smooth_curvature, n = e.length, i = w3m.global.limit.b_factor_backbone[0],
            s = w3m.config.geom_putty_radius_min, l = w3m.global.average.b_factor_backbone[0],
            c = w3m.config.geom_tube_radius, d = w3m.global.limit.b_factor_backbone[1],
            m = w3m.config.geom_putty_radius_max,
            P = math.linear_equation_3([i * i, l * l, d * d], [i, l, d], [1, 1, 1], [s, c, m]), u = function (e) {
                return P[0] * e * e + P[1] * e + P[2]
            };
        e[0][3] = math.polysum([o, -o / 4], [vec3.point(e[0][1], e[1][1]), vec3.point(e[0][1], e[2][1])]), r[0] = [e[0][0], e[0][1], e[0][2], vec3.unit(e[0][3]), , , u(e[0][6])];
        for (var D = 1; D < n; D++) {
            e[D][3] = D == n - 1 ? math.polysum([o, -o / 4], [vec3.point(e[D - 1][1], e[D][1]), vec3.point(e[D - 2][1], e[D][1])]) : vec3.scalar(o, vec3.point(e[D - 1][1], e[D + 1][1]));
            for (var _ = math.hermiteFit(a, e[D - 1][1], e[D][1], e[D - 1][3], e[D][3]), h = e[D - 1][0], B = e[D - 1][2], p = 1; p <= a; p++) {
                var E = p / a, f = _[p][0], w = vec3.unit(_[p][1]), g = math.step(E, e[D - 1][6], e[D][6]);
                r.push([h, f, B, w, , , u(g)]), p == a / 2 && (h = e[D][0], B = e[D][2], r.push([h, f, B, w, , , u(g)]))
            }
        }
        t && this.compute_NB_by_rotation(r)
    }, stickFrame: function (e, r, t, a) {
        var o = e.length;
        if (0 != o) {
            var n = vec3.unit(vec3.point(e[0][1], e[1][1]));
            r.push([e[0][0], e[0][1], e[0][2], n]);
            for (var i = 1; i < o - 1; i++) {
                var s = e[i][3] || {cross_link: !1, residue_name: null, atom_name: null},
                    l = vec3.mid(e[i - 1][1], e[i][1]), c = vec3.unit(vec3.point(e[i - 1][1], e[i][1]));
                r.push([e[i - 1][0], l, e[i - 1][2], c]), r.push([e[i][0], l, e[i][2], c]);
                var d = vec3.unit(vec3.point(e[i - 1][1], e[i][1])), m = vec3.unit(vec3.point(e[i][1], e[i + 1][1]));
                if (s.cross_link) r.push([e[i][0], e[i][1], e[i][2], d]), r.push([e[i][0], e[i][1], e[i][2], m, , , s]); else for (var P = vec3.rad(d, m, !0), u = Math.round(P / w3m.config.geom_stick_theta), D = 0; D <= u; D++) {
                    var n = vec3.unit(vec3.step(D / u, d, m));
                    r.push([e[i][0], e[i][1], e[i][2], n])
                }
            }
            var n = vec3.unit(vec3.point(e[o - 2][1], e[o - 1][1])), l = vec3.mid(e[o - 2][1], e[o - 1][1]);
            r.push([e[o - 2][0], l, e[o - 2][2], n]), r.push([e[o - 1][0], l, e[o - 1][2], n]), r.push([e[o - 1][0], e[o - 1][1], e[o - 1][2], n]), w3m_isset(a) ? this.compute_NB_for_stick(r, t, a) : this.compute_NB_for_stick(r, t)
        }
    }, beelineFix: function (e) {
        for (var r = e.length, t = w3m.config.smooth_segment % 2 ? w3m.config.smooth_segment + 1 : w3m.config.smooth_segment, a = [], o = (r - 1) / (t + 1) + 1, n = 0; n < o; n++) w3m_isset(e[n * (t + 1)]) && (a[n] = w3m_copy(e[n * (t + 1)]));
        var i = (o - 1) * t + 1;
        curve_xyz = math.lineFit(i - 1, a[0][1], a[o - 1][1]), curve_normal = math.lineFit(i - 1, a[0][4], a[o - 1][4]);
        for (var s = [], n = 0; n < i; n++) {
            var l = s.length, c = e[l][0];
            xyz = curve_xyz[n][0], color = e[l][2], tan = vec3.unit(curve_xyz[n][1]), normal = vec3.unit(curve_normal[n][0]), binormal = vec3.cross(tan, normal), s.push([c, xyz, color, tan, normal, binormal]), (n - t / 2) % t == 0 && (c = e[l + 1][0], color = e[l + 1][2], s.push([c, xyz, color, tan, normal, binormal]))
        }
        return s
    }, twistFix: function (e) {
        var r, t = e[0][3], a = Math.abs(t[0]), o = Math.abs(t[1]), n = Math.abs(t[2]);
        r = a < o ? n < a ? [0, 0, 1] : [1, 0, 0] : n < o ? [0, 0, 1] : [0, 1, 0], r = vec3.cross(e[0][3], r);
        var i = e.length;
        w3m_copy(e[0]), w3m_copy(e[i - 1]);
        e[0][4] = vec3.unit(vec3.cross(e[0][3], r)), e[0][5] = vec3.cross(e[0][3], e[0][4]);
        for (var s = 1; s < i; s++) {
            var l = vec3.cross(e[s - 1][3], e[s][3]);
            if (vec3.len(l) > Number.EPSILON) {
                var c = vec3.rad(e[s - 1][3], e[s][3], !0);
                e[s][4] = vec3.unit(mat4.xvec3(mat4.orbit(vec3.unit(l), c), e[s - 1][4]))
            } else e[s][4] = w3m_copy(e[s - 1][4]);
            e[s][5] = vec3.cross(e[s][3], e[s][4])
        }
    }, zigzagFix: function (e) {
        for (var r = e.length, t = w3m.config.smooth_segment % 2 ? w3m.config.smooth_segment + 1 : w3m.config.smooth_segment, a = [], o = (r - 1) / (t + 1) + 1, n = 0; n < o; n++) w3m_isset(e[n * (t + 1)]) && (a[n] = w3m_copy(e[n * (t + 1)]));
        var i = [], s = (o - 1) * t + 1;
        if (o < 5) i = math.lineFit(s - 1, a[0][1], a[o - 1][1]), curve_normal = math.lineFit(s - 1, a[0][4], a[o - 1][4]); else if (o < 8) {
            var l = o % 2 ? a[(o - 1) / 2][1] : vec3.mid(a[o / 2 - 1][1], a[o / 2][1]);
            c = o % 2 ? a[(o - 1) / 2][4] : vec3.mid(a[o / 2 - 1][4], a[o / 2][4]), i = math.quadFit(s - 1, a[0][1], l, a[o - 1][1]), curve_normal = math.quadFit(s - 1, a[0][4], c, a[o - 1][4])
        } else {
            var l = [a[Math.floor(.25 * o)][1], a[Math.floor(.75 * o)][1]],
                c = [a[Math.floor(.25 * o)][4], a[Math.floor(.75 * o)][4]];
            i = math.cubeFit4parts(s - 1, a[0][1], l[0], l[1], a[o - 1][1]), curve_normal = math.cubeFit4parts(s - 1, a[0][4], c[0], c[1], a[o - 1][4])
        }
        for (var d = [], n = 0; n < s; n++) {
            var m = d.length, P = e[m][0];
            xyz = i[n][0], color = e[m][2], tan = vec3.unit(i[n][1]), normal = vec3.unit(curve_normal[n][0]), binormal = vec3.cross(tan, normal), d.push([P, xyz, color, tan, normal, binormal]), (n - t / 2) % t == 0 && (P = e[m + 1][0], color = e[m + 1][2], d.push([P, xyz, color, tan, normal, binormal]))
        }
        return d
    }, tubeShell: function (e, r, t) {
        var t = t || {}, a = w3m_isset(t.segment) ? t.segment : w3m.config.geom_tube_segment,
            o = w3m_isset(t.radius) ? t.radius : w3m.config.geom_tube_radius, n = a;
        if (n != w3m.geometry.circle.n) {
            w3m.geometry.circle.n = n, w3m.geometry.circle.sin = [], w3m.geometry.circle.cos = [];
            for (var i = 2 * Math.PI / n, s = 0; s <= n; s++) w3m.geometry.circle.sin[s] = Math.sin(s * i), w3m.geometry.circle.cos[s] = Math.cos(s * i)
        }
        for (var l = w3m.geometry.circle.sin, c = w3m.geometry.circle.cos, s = 0, d = e.length; s < d; s++) {
            r[s] = [];
            for (var m = e[s][0], P = e[s][1], u = e[s][2], D = e[s][4], _ = e[s][5], h = 0; h < n; h++) {
                var B = vec3.plus(vec3.scalar(o * c[h], D), vec3.scalar(o * l[h], _));
                r[s][h] = [m, vec3.plus(P, B), u, vec3.unit(B)]
            }
        }
    }, puttyShell: function (e, r) {
        var t = w3m.config.geom_tube_segment;
        if (t != w3m.geometry.circle.n) {
            w3m.geometry.circle.n = t, w3m.geometry.circle.sin = [], w3m.geometry.circle.cos = [];
            for (var a = 2 * Math.PI / t, o = 0; o <= t; o++) w3m.geometry.circle.sin[o] = Math.sin(o * a), w3m.geometry.circle.cos[o] = Math.cos(o * a)
        }
        for (var n = w3m.geometry.circle.sin, i = w3m.geometry.circle.cos, o = 0, s = e.length; o < s; o++) {
            r[o] = [];
            for (var l = e[o][0], c = e[o][1], d = e[o][2], m = e[o][4], P = e[o][5], u = e[o][6], D = 0; D < t; D++) {
                var _ = vec3.plus(vec3.scalar(u * i[D], m), vec3.scalar(u * n[D], P));
                r[o][D] = [l, vec3.plus(c, _), d, vec3.unit(_)]
            }
        }
    }, cubeShell: function (e, r, t) {
        for (var t = t || {}, a = t.width || w3m.config.geom_cube_width, o = a / 2, n = t.height || w3m.config.geom_cube_height, i = n / 2, s = w3m_isset(t.side_differ) ? t.side_differ : w3m.config.geom_cube_side_differ, l = t.side_color || w3m.config.geom_cube_side_color, c = !!w3m_isset(t.inner_differ) && t.inner_differ, d = t.inner_color || w3m.config.geom_helix_inner_color, m = w3m_isset(t.inner_face) ? t.inner_face : w3m.INNERFACE_VARY, P = 0, u = e.length; P < u; P++) {
            var D = e[P][0], _ = e[P][1], h = e[P][2], B = e[P][4], p = vec3.negate(B), E = e[P][5], f = vec3.negate(E),
                w = math.polysum([o, i], [B, E]), g = math.polysum([o, i], [B, f]), v = s ? l : h;
            if (c) if (m == w3m.INNERFACE_VARY) var R = e[P][6] ? d : h,
                b = e[P][6] ? h : d; else var R = m == w3m.INNERFACE_TURNOVER ? d : h,
                b = m == w3m.INNERFACE_NON_TURNOVER ? d : h; else var R = b = h;
            r[P] = [[D, vec3.plus(_, w), v, B], [D, vec3.plus(_, w), R, E], [D, vec3.minus(_, g), R, E], [D, vec3.minus(_, g), v, p], [D, vec3.minus(_, w), v, p], [D, vec3.minus(_, w), b, f], [D, vec3.plus(_, g), b, f], [D, vec3.plus(_, g), v, B]]
        }
    }, stripShell: function (e, r, t) {
        for (var t = t || {}, a = t.width || w3m.config.geom_strip_width, o = t.height || w3m.config.geom_strip_height, n = w3m_isset(t.side_differ) ? t.side_differ : w3m.config.geom_strip_side_differ, i = t.side_color || w3m.config.geom_strip_side_color, s = !!w3m_isset(t.inner_differ) && t.inner_differ, l = t.inner_color || w3m.config.geom_helix_inner_color, c = w3m_isset(t.inner_face) ? t.inner_face : w3m.INNERFACE_VARY, d = o / 2, m = w3m.config.geom_strip_segment, P = Math.PI / 2 / m, u = [], D = a / 2, _ = 0; _ <= m; _++) {
            var h = d * Math.cos(_ * P), B = d * Math.sin(_ * P);
            u[_] = [[D + h, B], [h, B]]
        }
        for (var _ = 0, p = e.length; _ < p; _++) {
            var E = e[_][0], f = e[_][1], w = e[_][2], g = e[_][4], v = (vec3.negate(g), e[_][5]), R = vec3.negate(v),
                b = n ? i : w;
            if (s) if (c == w3m.INNERFACE_VARY) var O = e[_][6] ? l : w,
                T = e[_][6] ? w : l; else var O = c == w3m.INNERFACE_TURNOVER ? l : w,
                T = c == w3m.INNERFACE_NON_TURNOVER ? l : w; else var O = T = w;
            for (var M = [], I = 0; I <= m; I++) {
                var A = math.polysum(u[I][0], [g, v]), y = math.polysum(u[I][1], [g, v]),
                    U = math.polysum(u[I][0], [g, R]), N = math.polysum(u[I][1], [g, R]);
                M[I] = [A, y, U, N]
            }
            r[_] = [], r[_].push([E, vec3.minus(f, M[m][2]), O, v]);
            for (var I = m; I >= 0; I--) r[_].push([E, vec3.minus(f, M[I][2]), b, vec3.negate(M[I][3])]);
            for (var I = 1; I <= m; I++) r[_].push([E, vec3.minus(f, M[I][0]), b, vec3.negate(M[I][1])]);
            r[_].push([E, vec3.minus(f, M[m][0]), T, R]), r[_].push([E, vec3.plus(f, M[m][2]), T, R]);
            for (var I = m; I >= 0; I--) r[_].push([E, vec3.plus(f, M[I][2]), b, M[I][3]]);
            for (var I = 1; I <= m; I++) r[_].push([E, vec3.plus(f, M[I][0]), b, M[I][1]]);
            r[_].push([E, vec3.plus(f, M[m][0]), O, v])
        }
    }, railwayShell: function (e, r, t) {
        var t = t || {}, a = t.width || w3m.config.geom_railway_width, o = t.height || w3m.config.geom_railway_height,
            n = t.radius ? Math.max(t.radius, o / 2) : Math.max(w3m.config.geom_railway_radius, o / 2),
            i = t.end_mode || w3m.END_XX;
        side_differ = w3m_isset(t.side_differ) ? t.side_differ : w3m.config.geom_railway_side_differ, side_color = t.side_color || w3m.config.geom_railway_side_color, inner_differ = !!w3m_isset(t.inner_differ) && t.inner_differ, inner_color = t.inner_color || w3m.config.geom_helix_inner_color, inner_face = t.inner_face || w3m.INNERFACE_VARY;
        for (var s = w3m.config.geom_railway_segment, l = Math.sqrt(n * n - o * o / 4), c = Math.acos(-l / n), d = c / s, m = w3m.config.smooth_segment % 2 ? w3m.config.smooth_segment + 1 : w3m.config.smooth_segment, P = a / 2 / m, u = [], D = a / 2, _ = 0; _ <= s; _++) {
            var h = n * Math.cos(_ * d), B = n * Math.sin(_ * d), p = vec2.unit([h, B]);
            u[_] = [[D + h, B], p]
        }
        for (var _ = 0, E = e.length; _ < E; _++) {
            var f = e[_][0], w = e[_][1], g = e[_][2], v = e[_][4], R = (vec3.negate(v), e[_][5]), b = vec3.negate(R),
                O = side_differ ? side_color : g;
            if (inner_differ) if (inner_face == w3m.INNERFACE_VARY) var T = e[_][6] ? inner_color : g,
                M = e[_][6] ? g : inner_color; else var T = inner_face == w3m.INNERFACE_TURNOVER ? inner_color : g,
                M = inner_face == w3m.INNERFACE_NON_TURNOVER ? inner_color : g; else var T = M = g;
            var I = [], A = u[G];
            if (_ <= m + 1 && [w3m.END_XX, w3m.END_XO].indexOf(i) >= 0) var y = 2 * _ > m ? _ - 1 : _,
                U = P * (m - y); else if (E - 1 - _ <= m + 1 && [w3m.END_XX, w3m.END_OX].indexOf(i) >= 0) var N = E - 1 - _,
                y = 2 * N > m ? N - 1 : N, U = P * (m - y); else var U = 0;
            for (var G = 0; G <= s; G++) {
                var A = u[G], S = math.polysum([A[0][0] - U, A[0][1]], [v, R]), C = math.polysum(A[1], [v, R]),
                    x = math.polysum([A[0][0] - U, A[0][1]], [v, b]), L = math.polysum(A[1], [v, b]);
                I[G] = [S, C, x, L]
            }
            r[_] = [], r[_].push([f, vec3.minus(w, I[s][2]), T, R]);
            for (var G = s; G >= 0; G--) r[_].push([f, vec3.minus(w, I[G][2]), O, vec3.negate(I[G][3])]);
            for (var G = 1; G <= s; G++) r[_].push([f, vec3.minus(w, I[G][0]), O, vec3.negate(I[G][1])]);
            r[_].push([f, vec3.minus(w, I[s][0]), M, b]), r[_].push([f, vec3.plus(w, I[s][2]), M, b]);
            for (var G = s; G >= 0; G--) r[_].push([f, vec3.plus(w, I[G][2]), O, I[G][3]]);
            for (var G = 1; G <= s; G++) r[_].push([f, vec3.plus(w, I[G][0]), O, I[G][1]]);
            r[_].push([f, vec3.plus(w, I[s][0]), T, R])
        }
    }, ribbonShell: function (e, r, t) {
        var t = t || {}, a = w3m_isset(t.width) ? t.width : w3m.config.geom_ribbon_width,
            o = w3m_isset(t.height) ? t.height : w3m.config.geom_ribbon_height,
            n = w3m_isset(t.side_height) ? t.side_height : w3m.config.geom_ribbon_side_height,
            i = w3m_isset(t.side_differ) ? t.side_differ : w3m.config.geom_ribbon_side_differ,
            s = t.side_color || w3m.config.geom_ribbon_side_color, l = !!w3m_isset(t.inner_differ) && t.inner_differ,
            c = t.inner_color || w3m.config.geom_helix_inner_color, d = t.inner_face || w3m.INNERFACE_VARY;
        n > o && (n = o);
        for (var m = w3m.config.geom_ribbon_segment, P = (o - n) / 2 / m, u = a / 2, D = u * u, _ = o / 2, h = _ * _, B = [], p = 0; p <= m; p++) {
            var E = _ - (m - p) * P, f = u * Math.sqrt(1 - E * E / h), w = vec2.unit([h * f, D * E]);
            B[p] = [[f, E], w]
        }
        for (var p = 0, g = e.length; p < g; p++) {
            var v = e[p][0], R = e[p][1], b = e[p][2], O = e[p][4], T = vec3.negate(O), M = e[p][5], I = vec3.negate(M),
                A = i ? s : b;
            if (l) if (d == w3m.INNERFACE_VARY) var y = e[p][6] ? c : b,
                U = e[p][6] ? b : c; else var y = d == w3m.INNERFACE_TURNOVER ? c : b,
                U = d == w3m.INNERFACE_NON_TURNOVER ? c : b; else var y = U = b;
            for (var N = [], G = 0; G <= m; G++) {
                var S = math.polysum(B[G][0], [O, M]), C = math.polysum(B[G][1], [O, M]),
                    x = math.polysum(B[G][0], [O, I]), L = math.polysum(B[G][1], [O, I]);
                N[G] = [S, C, x, L]
            }
            r[p] = [], r[p].push([v, vec3.plus(R, N[0][0]), A, O]);
            for (var G = 0; G <= m; G++) r[p].push([v, vec3.plus(R, N[G][0]), y, N[G][1]]);
            for (var G = m - 1; G >= 0; G--) r[p].push([v, vec3.minus(R, N[G][2]), y, vec3.negate(N[G][3])]);
            r[p].push([v, vec3.minus(R, N[0][2]), A, T]), r[p].push([v, vec3.minus(R, N[0][0]), A, T]);
            for (var G = 0; G <= m; G++) r[p].push([v, vec3.minus(R, N[G][0]), U, vec3.negate(N[G][1])]);
            for (var G = m - 1; G >= 0; G--) r[p].push([v, vec3.plus(R, N[G][2]), U, N[G][3]]);
            r[p].push([v, vec3.plus(R, N[0][2]), A, O])
        }
    }, arrowheadShell: function (e, r, t) {
        for (var t = t || {}, a = w3m_isset(t.width_max) ? t.width_max : w3m.config.geom_arrowhead_lower, o = w3m_isset(t.width_min) ? t.width_min : w3m.config.geom_arrowhead_upper, n = w3m_isset(t.height) ? t.height : w3m.config.geom_arrow_height, i = n / 2, s = w3m_isset(t.side_differ) ? t.side_differ : w3m.config.geom_arrow_side_differ, l = t.side_color || w3m.config.geom_arrow_side_color, c = !!w3m_isset(t.inner_differ) && t.inner_differ, d = t.inner_color || w3m.config.geom_helix_inner_color, m = t.inner_face || w3m.INNERFACE_VARY, P = 0, u = e.length; P < u; P++) {
            var D = 2 * P > u - 1 ? (P - 1) / (u - 2) : P / (u - 2), _ = e[P][0], h = e[P][1], B = e[P][2], p = e[P][4],
                E = vec3.negate(p), f = e[P][5], w = vec3.negate(f), g = s ? l : B, v = [((1 - D) * a + o) / 2, i],
                R = math.polysum(v, [p, f]), b = math.polysum(v, [p, w]);
            if (c) if (m == w3m.INNERFACE_VARY) var O = e[P][6] ? d : B,
                T = e[P][6] ? B : d; else var O = m == w3m.INNERFACE_TURNOVER ? d : B,
                T = m == w3m.INNERFACE_NON_TURNOVER ? d : B; else var O = T = B;
            r[P] = [[_, vec3.plus(h, R), g, p], [_, vec3.plus(h, R), O, f], [_, vec3.minus(h, b), O, f], [_, vec3.minus(h, b), g, E], [_, vec3.minus(h, R), g, E], [_, vec3.minus(h, R), T, w], [_, vec3.plus(h, b), T, w], [_, vec3.plus(h, b), g, p]]
        }
    }, shell2face: function (e, r, t) {
        var t = t || {}, a = !w3m_isset(t.saving) || t.saving, o = !!w3m_isset(t.het) && t.het,
            n = !!w3m_isset(t.ext) && t.ext, i = e.length;
        if (!a || o || n) for (var s = o || n ? o ? w3m.tool.point2vertexHetTriangle : w3m.tool.point2vertexExtTriangle : w3m.tool.point2vertexMainTriangle, l = 0, c = r.length; l < c; l++) for (var d = r[l][0], m = r[l][1], P = 0; P < i - 1; P++) s(e[P][d]), s(e[P + 1][d]), s(e[P + 1][m]), s(e[P][d]), s(e[P + 1][m]), s(e[P][m]); else {
            for (var s = this.point2vertexMainTriangleStrip, l = 0, c = r.length; l < c; l++) {
                var d = r[l][0], m = r[l][1];
                if (l % 2) for (var P = i; P;) s(e[--P][d]), s(e[P][m]); else for (var P = 0; P < i;) s(e[P][d]), s(e[P++][m])
            }
            this.breakTriangleStrip()
        }
    }, dotFiller: function (e, r) {
        if (!e) return !1;
        var r = r || {}, t = !!w3m_isset(r.het) && r.het, a = !!w3m_isset(r.ext) && r.ext;
        (t || a ? t ? w3m.tool.point2vertexHetPoint : w3m.tool.point2vertexExtPoint : w3m.tool.point2vertexMainPoint)(e)
    }, crossFiller: function (e, r) {
        if (!e) return !1;
        var r = r || {}, t = !!w3m_isset(r.het) && r.het, a = !!w3m_isset(r.ext) && r.ext,
            o = t || a ? t ? w3m.tool.point2vertexHetLine : w3m.tool.point2vertexExtLine : w3m.tool.point2vertexMainLine,
            n = e[0], i = e[1][0], s = e[1][1], l = e[1][2], c = e[2], d = w3m.config.geom_cross_radius;
        o([n, [i + d, s, l], c]), o([n, [i - d, s, l], c]), o([n, [i, s + d, l], c]), o([n, [i, s - d, l], c]), o([n, [i, s, l + d], c]), o([n, [i, s, l - d], c])
    }, lineFiller: function (e, r, t) {
        if (!e || !r) return !1;
        var t = t || {}, a = !!w3m_isset(t.het) && t.het, o = !!w3m_isset(t.ext) && t.ext,
            n = a || o ? a ? w3m.tool.point2vertexHetLine : w3m.tool.point2vertexExtLine : w3m.tool.point2vertexMainLine,
            i = vec3.mid(e[1], r[1]);
        n(e), n([e[0], i, e[2]]), n([r[0], i, r[2]]), n(r)
    }, dashFiller: function (e, r, t) {
        if (!e || !r) return !1;
        var t = t || {}, a = !!w3m_isset(t.het) && t.het, o = !!w3m_isset(t.ext) && t.ext,
            n = a || o ? a ? w3m.tool.point2vertexHetLine : w3m.tool.point2vertexExtLine : w3m.tool.point2vertexMainLine,
            i = e[0], s = e[1], l = e[2], c = r[0], d = r[1], m = r[2],
            P = Math.ceil(vec3.dist(s, d) / w3m.config.geom_dash_gap);
        P % 2 && P--, n(e);
        for (var u = 0; u < P; u++) {
            var D = vec3.step(u / P, s, d);
            n(2 * u < P ? [i, D, l] : [c, D, m])
        }
        n(r)
    }, sphereFiller: function (e, r) {
        if (!e) return !1;
        var r = r || {}, t = w3m_isset(r.radius) ? r.radius : w3m.config.geom_sphere_radius,
            a = !!w3m_isset(r.het) && r.het, o = !!w3m_isset(r.ext) && r.ext, n = e[0], i = e[1], s = e[2],
            l = w3m.geometry.sphere_vector, c = w3m.geometry.sphere_link,
            d = parseInt(w3m.vertex_index.length / w3m.config.unit_vertex_geometry);
        if (!a && !o && d < 65444) l.forEach(function (e) {
            w3m.tool.point2vertexIndex([n, math.polysum([1, t], [i, e]), s, e])
        }), c.forEach(function (e) {
            w3m.index.push(d + e)
        }); else {
            var m = a || o ? a ? w3m.tool.point2vertexHetTriangle : w3m.tool.point2vertexExtTriangle : w3m.tool.point2vertexMainTriangle;
            c.forEach(function (e) {
                m([n, math.polysum([1, t], [i, l[e]]), s, l[e]])
            })
        }
    }, traceFiller: function (e) {
        for (var r = 0, t = e.length; r < t; r++) this.point2vertexMainLineStrip([e[r][0], e[r][1], e[r][2]]);
        this.breakLineStrip()
    }, stickFiller: function (e, r, t) {
        if (!e || !r) return !1;
        var t = t || {}, a = t.segment || w3m.config.geom_tube_segment, o = t.radius || w3m.config.geom_stick_radius,
            n = t.end_mode || w3m.END_XX, i = t.ref_tnb || null, s = !!w3m_isset(t.het) && t.het,
            l = !!w3m_isset(t.ext) && t.ext, c = [], d = [], m = vec3.mid(e[1], r[1]);
        if (d[0] = vec3.unit(vec3.point(e[1], r[1])), i) {
            var P = vec3.cross(i[0], d[0]);
            if (vec3.len(P) > Number.EPSILON) {
                var u = vec3.rad(i[0], d[0], !0);
                d[1] = vec3.unit(mat4.xvec3(mat4.orbit(vec3.unit(P), u), i[1]))
            } else d[1] = w3m_copy(i[1]);
            d[2] = vec3.cross(d[0], d[1])
        } else {
            var D, _ = Math.abs(d[0][0]), h = Math.abs(d[0][1]), B = Math.abs(d[0][2]);
            D = _ < h ? B < _ ? [0, 0, 1] : [1, 0, 0] : B < h ? [0, 0, 1] : [0, 1, 0], D = vec3.cross(d[0], D), d[1] = vec3.unit(vec3.cross(d[0], D)), d[2] = vec3.cross(d[0], d[1])
        }
        c[0] = [e[0], e[1], e[2]].concat(d), c[1] = [e[0], m, e[2]].concat(d), c[2] = [r[0], m, r[2]].concat(d), c[3] = [r[0], r[1], r[2]].concat(d);
        var p = [];
        this.tubeShell(c, p, {radius: o});
        for (var E = c.length, f = [], w = 0; w < a - 1; w++) f.push([w, w + 1]);
        f.push([a - 1, 0]);
        var g = s || l ? s ? w3m.tool.point2vertexHetTriangle : w3m.tool.point2vertexExtTriangle : w3m.tool.point2vertexMainTriangle;
        if ([w3m.END_XX, w3m.END_XO, w3m.END_XS].indexOf(n) >= 0) {
            var v = c[0], R = v[0], b = v[1], O = v[2], T = vec3.negate(v[3]), M = p[0];
            f.forEach(function (e) {
                g([R, b, O, T]), g([R, M[e[0]][1], O, T]), g([R, M[e[1]][1], O, T])
            })
        } else [w3m.END_SS, w3m.END_SO, w3m.END_SX].indexOf(n) >= 0 && this.sphereFiller(c[0].slice(0, 3), {
            radius: o,
            het: s,
            ext: l
        });
        if (this.shell2face(p, f, {saving: !1, het: s, ext: l}), [w3m.END_XX, w3m.END_OX, w3m.END_SX].indexOf(n) >= 0) {
            var v = c[E - 1], R = v[0], b = v[1], O = v[2], T = v[3], M = p[E - 1];
            f.forEach(function (e) {
                g([R, b, O, T]), g([R, M[e[0]][1], O, T]), g([R, M[e[1]][1], O, T])
            })
        } else [w3m.END_SS, w3m.END_OS, w3m.END_XS].indexOf(n) >= 0 && this.sphereFiller(c[E - 1].slice(0, 3), {
            radius: o,
            het: s,
            ext: l
        })
    }, tubeFiller: function (e, r) {
        var r = r || {}, t = r.segment || w3m.config.geom_tube_segment, a = r.radius || w3m.config.geom_tube_radius,
            o = r.end_mode || (w3m.config.geom_tube_round_end ? w3m.END_SS : w3m.END_XX),
            n = !!w3m_isset(r.end_differ) && r.end_differ, i = r.end_color || null, s = [];
        this.tubeShell(e, s, {radius: a, segment: t});
        var l = e.length;
        if (0 != l) {
            for (var c = [], d = 0; d < t - 1; d++) c.push([d, d + 1]);
            c.push([t - 1, 0]);
            var m = this.point2vertexMainTriangle;
            if ([w3m.END_XX, w3m.END_XO, w3m.END_XS].indexOf(o) >= 0) {
                var P = e[0], u = P[0], D = P[1], _ = n ? i : P[2], h = vec3.negate(P[3]), B = s[0];
                c.forEach(function (e) {
                    m([u, D, _, h]), m([u, B[e[0]][1], _, h]), m([u, B[e[1]][1], _, h])
                })
            } else if ([w3m.END_SS, w3m.END_SO, w3m.END_SX].indexOf(o) >= 0) {
                var P = e[0], u = P[0], D = P[1], _ = n ? i : P[2];
                this.sphereFiller([u, D, _], {radius: a})
            }
            if (this.shell2face(s, c), [w3m.END_XX, w3m.END_OX, w3m.END_SX].indexOf(o) >= 0) {
                var P = e[l - 1], u = P[0], D = P[1], _ = n ? i : P[2], h = P[3], B = s[l - 1];
                c.forEach(function (e) {
                    m([u, D, _, h]), m([u, B[e[0]][1], _, h]), m([u, B[e[1]][1], _, h])
                })
            } else if ([w3m.END_SS, w3m.END_XS, w3m.END_OS].indexOf(o) >= 0) {
                var P = e[l - 1], u = P[0], D = P[1], _ = n ? i : P[2];
                this.sphereFiller([u, D, _], {radius: a})
            }
        }
    }, puttyFiller: function (e) {
        var r = [];
        this.puttyShell(e, r);
        for (var t = e.length, a = w3m.config.geom_tube_segment, o = [], n = 0; n < a - 1; n++) o.push([n, n + 1]);
        o.push([a - 1, 0]);
        var i = this.point2vertexMainTriangle, s = e[0], l = s[0], c = s[1], d = s[2], m = vec3.negate(s[3]), P = r[0];
        o.forEach(function (e) {
            i([l, c, d, m]), i([l, P[e[0]][1], d, m]), i([l, P[e[1]][1], d, m])
        }), this.shell2face(r, o);
        var s = e[t - 1], l = s[0], c = s[1], d = s[2], m = s[3], P = r[t - 1];
        o.forEach(function (e) {
            i([l, c, d, m]), i([l, P[e[0]][1], d, m]), i([l, P[e[1]][1], d, m])
        })
    }, cubeFiller: function (e, r) {
        var r = r || {},
            t = (r.end_mode || w3m.END_XX, w3m_isset(r.side_differ) ? r.side_differ : w3m.config.geom_cube_side_differ),
            a = r.side_color || w3m.config.geom_cube_side_color, o = !!w3m_isset(r.inner_differ) && r.inner_differ,
            n = !!w3m_isset(r.inner_face) && r.inner_face, i = [];
        return this.cubeShell(e, i, {side_differ: t, side_color: a, inner_differ: o, inner_face: n}), i
    }, stripFiller: function (e, r) {
        var r = r || {}, t = r.end_mode || w3m.END_XX,
            a = w3m_isset(r.side_differ) ? r.side_differ : w3m.config.geom_strip_side_differ,
            n = r.side_color || w3m.config.geom_strip_side_color, i = !!w3m_isset(r.inner_differ) && r.inner_differ,
            s = !!w3m_isset(r.inner_face) && r.inner_face, l = [];
        this.stripShell(e, l, {side_differ: a, side_color: n, inner_differ: i, inner_face: s});
        for (var c = e.length, d = w3m.config.geom_strip_segment, m = [], P = 1, u = 2 * d; P <= u; P++) m.push([P, P + 1]);
        m.push([2 * d + 2, 2 * d + 3]);
        for (var P = 2 * d + 4, u = 4 * d + 3; P <= u; P++) m.push([P, P + 1]);
        m.push([4 * d + 5, 0]);
        var D = w3m.tool.point2vertexMainTriangle;
        if ([w3m.END_XX, w3m.END_XO].indexOf(t) >= 0) {
            var _ = e[0], h = l[0];
            id = _[0], o = _[1], color = a ? n : _[2], normal = vec3.negate(_[3]), m.forEach(function (e) {
                D([id, o, color, normal]), D([id, h[e[0]][1], color, normal]), D([id, h[e[1]][1], color, normal])
            })
        }
        if (this.shell2face(l, m), [w3m.END_XX, w3m.END_OX].indexOf(t) >= 0) {
            var _ = e[c - 1], h = l[c - 1];
            id = _[0], o = _[1], color = a ? n : _[2], normal = _[3], m.forEach(function (e) {
                D([id, o, color, normal]), D([id, h[e[0]][1], color, normal]), D([id, h[e[1]][1], color, normal])
            })
        }
    }, ribbonFiller: function (e, r) {
        var r = r || {}, t = r.end_mode || w3m.END_XX,
            a = w3m_isset(r.side_differ) ? r.side_differ : w3m.config.geom_ribbon_side_differ,
            n = r.side_color || w3m.config.geom_ribbon_side_color, i = !!w3m_isset(r.inner_differ) && r.inner_differ,
            s = !!w3m_isset(r.inner_face) && r.inner_face, l = [];
        this.ribbonShell(e, l, {side_differ: a, side_color: n, inner_differ: i, inner_face: s});
        for (var c = e.length, d = w3m.config.geom_ribbon_segment, m = [], P = 1, u = 2 * d; P <= u; P++) m.push([P, P + 1]);
        m.push([2 * d + 2, 2 * d + 3]);
        for (var D = 2 * d + 4, _ = 4 * d + 3; D <= _; D++) m.push([D, D + 1]);
        m.push([4 * d + 5, 0]);
        var h = w3m.tool.point2vertexMainTriangle;
        if ([w3m.END_XX, w3m.END_XO].indexOf(t) >= 0) {
            var B = e[0], p = l[0];
            id = B[0], o = B[1], color = a ? n : B[2], normal = vec3.negate(B[3]), m.forEach(function (e) {
                h([id, o, color, normal]), h([id, p[e[0]][1], color, normal]), h([id, p[e[1]][1], color, normal])
            })
        }
        if (this.shell2face(l, m), [w3m.END_XX, w3m.END_OX].indexOf(t) >= 0) {
            var B = e[c - 1], p = l[c - 1];
            id = B[0], o = B[1], color = a ? n : B[2], normal = B[3], m.forEach(function (e) {
                h([id, o, color, normal]), h([id, p[e[0]][1], color, normal]), h([id, p[e[1]][1], color, normal])
            })
        }
    }, railwayFiller: function (e, r) {
        var r = r || {}, t = r.end_mode || (w3m.config.geom_railway_end_close ? w3m.END_XX : w3m.END_OO),
            a = w3m_isset(r.side_differ) ? r.side_differ : w3m.config.geom_railway_side_differ,
            o = r.side_color || w3m.config.geom_railway_side_color, n = !!w3m_isset(r.inner_differ) && r.inner_differ,
            i = !!w3m_isset(r.inner_face) && r.inner_face, s = [];
        this.railwayShell(e, s, {end_mode: t, side_differ: a, side_color: o, inner_differ: n, inner_face: i});
        for (var l = e.length, c = w3m.config.geom_railway_segment, d = [], m = [], P = [], u = [], D = 1, _ = 2 * c; D <= _; D++) d.push([D, D + 1]), m.push([D, D + 1]);
        d.push([2 * c + 2, 2 * c + 3]), m.push([2 * c + 1, 1]), u.push([0, 2 * c + 2], [2 * c + 2, 2 * c + 3]);
        for (var D = 2 * c + 4, _ = 4 * c + 3; D <= _; D++) d.push([D, D + 1]), P.push([D, D + 1]);
        d.push([4 * c + 5, 0]), P.push([4 * c + 4, 2 * c + 4]), u.push([2 * c + 3, 4 * c + 5], [4 * c + 5, 0]);
        var h = w3m.tool.point2vertexMainTriangle, B = s[0], p = e[0], E = p[0], f = p[1], w = a ? o : p[2],
            g = vec3.negate(p[3]), v = w3m.config.geom_railway_width, R = vec3.minus(f, vec3.scalar(v / 2, p[4])),
            b = vec3.plus(f, vec3.scalar(v / 2, p[4]));
        [w3m.END_OO, w3m.END_OX].indexOf(t) >= 0 ? (m.forEach(function (e) {
            h([E, R, w, g]), h([E, B[e[0]][1], w, g]), h([E, B[e[1]][1], w, g])
        }), P.forEach(function (e) {
            h([E, b, w, g]), h([E, B[e[0]][1], w, g]), h([E, B[e[1]][1], w, g])
        }), u.forEach(function (e) {
            h([E, f, w, g]), h([E, B[e[0]][1], w, g]), h([E, B[e[1]][1], w, g])
        })) : (m.forEach(function (e) {
            h([E, f, w, g]), h([E, B[e[0]][1], w, g]), h([E, B[e[1]][1], w, g])
        }), P.forEach(function (e) {
            h([E, f, w, g]), h([E, B[e[0]][1], w, g]), h([E, B[e[1]][1], w, g])
        })), this.shell2face(s, d);
        var B = s[l - 1], p = e[l - 1], E = p[0], f = p[1], w = a ? o : p[2], g = p[3],
            v = w3m.config.geom_railway_width, R = vec3.minus(f, vec3.scalar(v / 2, p[4])),
            b = vec3.plus(f, vec3.scalar(v / 2, p[4]));
        [w3m.END_OO, w3m.END_OX].indexOf(t) >= 0 ? (m.forEach(function (e) {
            h([E, R, w, g]), h([E, B[e[0]][1], w, g]), h([E, B[e[1]][1], w, g])
        }), P.forEach(function (e) {
            h([E, b, w, g]), h([E, B[e[0]][1], w, g]), h([E, B[e[1]][1], w, g])
        }), u.forEach(function (e) {
            h([E, f, w, g]), h([E, B[e[0]][1], w, g]), h([E, B[e[1]][1], w, g])
        })) : (m.forEach(function (e) {
            h([E, f, w, g]), h([E, B[e[0]][1], w, g]), h([E, B[e[1]][1], w, g])
        }), P.forEach(function (e) {
            h([E, f, w, g]), h([E, B[e[0]][1], w, g]), h([E, B[e[1]][1], w, g])
        }))
    }, arrowheadFiller: function (e, r) {
        var r = r || {}, t = !!w3m_isset(r.side_differ) && r.side_differ,
            a = r.side_color || w3m.config.geom_arrow_side_color, o = !!w3m_isset(r.inner_differ) && r.inner_differ,
            n = !!w3m_isset(r.inner_face) && r.inner_face, i = [];
        return this.arrowheadShell(e, i, {side_differ: t, side_color: a, inner_differ: o, inner_face: n}), i
    }, arrowFiller: function (e, r) {
        var r = r || {}, t = w3m_isset(r.side_differ) ? r.side_differ : w3m.config.geom_arrow_side_differ,
            a = r.side_color || w3m.config.geom_arrow_side_color, o = !!w3m_isset(r.inner_differ) && r.inner_differ,
            n = !!w3m_isset(r.inner_face) && r.inner_face, i = e.length,
            s = w3m.config.smooth_segment % 2 ? w3m.config.smooth_segment + 1 : w3m.config.smooth_segment;
        offset = PDB.GeoCenterOffset;
        var l = this.cubeFiller(e.slice(0, i - (s + 1)), {
            end_mode: w3m.END_XO,
            side_differ: t,
            side_color: a,
            inner_differ: o,
            inner_face: n
        });
        if (PDB.config.selectedDrug !== w3m.global.mol) for (var c = 0; c < l.length; c++) for (var d = 0; d < 4; d++) {
            var m = 2 * d + 1,
                P = new THREE.Vector3(l[c][m][1][0] + offset.x, l[c][m][1][1] + offset.y, l[c][m][1][2] + offset.z),
                u = w3m.tool.getMainAtomById(w3m.global.mol, l[c][m][0]);
            u && u.resid && w3m.mol[w3m.global.mol].residueData[u.chainname][u.resid].arrow.push(P)
        }
        var l = this.arrowheadFiller(e.slice(i - (s + 2)), {
            side_differ: t,
            side_color: a,
            inner_differ: o,
            inner_face: n
        });
        if (PDB.config.selectedDrug !== w3m.global.mol) for (var c = 0; c < l.length; c++) for (var d = 0; d < 4; d++) {
            var m = 2 * d + 1,
                P = new THREE.Vector3(l[c][m][1][0] + offset.x, l[c][m][1][1] + offset.y, l[c][m][1][2] + offset.z),
                u = w3m.tool.getMainAtomById(w3m.global.mol, l[c][m][0]);
            u && u.resid && w3m.mol[w3m.global.mol].residueData[u.chainname][u.resid].arrow.push(P)
        }
    }, cylinderFiller: function (e, r) {
        for (var r = r || {}, t = r.radius || w3m.config.geom_cylinder_radius, a = r.segment || w3m.config.geom_cylinder_segment, o = r.end_mode || (w3m.config.geom_cylinder_round_end ? w3m.END_SS : w3m.END_XX), n = w3m_isset(r.end_differ) ? r.end_differ : w3m.config.geom_cylinder_end_differ, i = r.side_color || w3m.config.geom_cylinder_end_color, s = e.length, l = w3m.config.smooth_segment % 2 ? w3m.config.smooth_segment + 1 : w3m.config.smooth_segment, c = [], d = (s - 1) / (l + 1) + 1, m = 0; m < d; m++) w3m_isset(e[m * (l + 1)]) && (c[m] = w3m_copy(e[m * (l + 1)]));
        var P = c[0][1], u = c[c.length - 1][1];
        tnb = [], tnb[0] = vec3.unit(vec3.point(P, u));
        var D, _ = Math.abs(tnb[0][0]), h = Math.abs(tnb[0][1]), B = Math.abs(tnb[0][2]);
        D = _ < h ? B < _ ? [0, 0, 1] : [1, 0, 0] : B < h ? [0, 0, 1] : [0, 1, 0], D = vec3.cross(tnb[0], D), tnb[1] = vec3.unit(vec3.cross(tnb[0], D)), tnb[2] = vec3.cross(tnb[0], tnb[1]);
        var e = [];
        e[0] = c[0].slice(0, 3).concat(tnb);
        for (var m = 1, p = c.length; m < p; m++) {
            var E = m / (p - 1), f = vec3.step(E, P, u), w = (m - .5) / (p - 1), g = vec3.step(w, P, u);
            e.push([c[m - 1][0], g, c[m - 1][2]].concat(tnb)), e.push([c[m][0], g, c[m][2]].concat(tnb)), e.push([c[m][0], f, c[m][2]].concat(tnb))
        }
        this.tubeFiller(e, {end_mode: o, end_differ: n, end_color: i, radius: t, segment: a})
    }, fillMainAsDot: function (e, r, t, a) {
        for (var o = w3m.mol[e], n = o.tree.main[r], i = (o.chain[r], w3m.config.geom_dot_as_cross ? w3m.tool.crossFiller : w3m.tool.dotFiller), s = t; s <= a; s++) if (w3m_isset(n[s])) for (var l = n[s], c = o.residue[r][s], d = w3m.structure.enum[c], m = 0, P = d.length; m < P; m++) if (w3m_isset(l[d[m]])) {
            var u = l[d[m]];
            i(o.getMain(u))
        }
    }, fillMainAsLine: function (e, r, t, a) {
        for (var o = w3m.mol[e], n = o.tree.main[r], i = o.chain[r], s = w3m_find_first(n), l = i == w3m.CHAIN_AA ? w3m.structure.bridge.amino_acid : w3m.structure.bridge.nucleic_acid, c = t; c <= a; c++) if (w3m_isset(n[c])) {
            var d = n[c];
            if (w3m_isset(n[c - 1]) && c != s) {
                var m, P;
                if (w3m_isset(m = n[c - 1][l[0]]) && w3m_isset(P = d[l[1]])) {
                    var u = w3m.tool.getMainAtomById(w3m.global.mol, P);
                    PDB.residue && "" != PDB.residue && (u = w3m.tool.getMainAtomById(PDB.residue, P)), u && w3m.mol[w3m.global.mol].residueData[u.chainname][u.resid].lines.push([m, P])
                }
            }
            for (var D = o.residue[r][c], _ = w3m.structure.pair[D], h = 0, B = _.length; h < B; h += 2) {
                var p, E;
                if (w3m_isset(p = d[_[h]]) && w3m_isset(E = d[_[h + 1]])) {
                    var u = w3m.tool.getMainAtomById(w3m.global.mol, E);
                    PDB.residue && "" != PDB.residue && (u = w3m.tool.getMainAtomById(PDB.residue, E)), u && w3m.mol[w3m.global.mol].residueData[u.chainname][u.resid].lines.push([p, E])
                } else p && this.crossFiller(o.getMain(p)), E && this.crossFiller(o.getMain(E))
            }
        }
    }, fillMainAsBackbone: function (e, r, t, a) {
        var o = w3m.mol[e], n = o.tree.main[r], i = o.chain[r],
            s = i == w3m.CHAIN_AA ? w3m.structure.backbone.amino_acid : w3m.structure.backbone.nucleic_acid,
            l = w3m_split_by_undefined(n, t, a), c = w3m_find_first(n);
        w3m_find_last(n);
        for (var d in l) {
            var m = [], P = l[d][0], u = l[d][1];
            if (P != u) {
                for (var D = P; D <= u; D++) for (var _ = n[D], h = 0, B = s.length; h < B; h++) if (w3m_isset(_[s[h]])) {
                    var p = _[s[h]];
                    m.push(o.getMain(p));
                    var E = w3m.tool.getMainAtomById(w3m.global.mol, p);
                    E && w3m.mol[w3m.global.mol].residueData[E.chainname][E.resid].bbond.push(p)
                }
                var f = [];
                w3m.config.geom_backbone_as_tube ? this.stickFrame(m, f) : this.simpleFrame(m, f, !1)
            } else {
                var _ = n[P],
                    w = i == w3m.CHAIN_AA ? w3m.structure.residue.amino_acid : P == c ? w3m.structure.residue.nucleic_acid_5_end_replace : w3m.structure.residue.nucleic_acid;
                if (!w3m_isset(_[w])) continue;
                this.crossFiller(o.getMain(_[w]))
            }
        }
    }, fillMainAsStick: function (e, r, t, a) {
        var o = w3m.mol[e], n = o.tree.main[r], i = o.chain[r], s = w3m.config.geom_stick_radius,
            l = i == w3m.CHAIN_AA ? w3m.structure.main_chain.amino_acid : w3m.structure.main_chain.nucleic_acid,
            c = w3m_split_by_undefined(n, t, a)
        ;w3m_find_first(n), w3m_find_last(n);
        for (var d in c) {
            for (var m = c[d][0], P = c[d][1], u = [], D = [], _ = [], h = m; h <= P; h++) for (var B = n[h], p = o.residue[r][h], E = w3m_copy(w3m.structure.main_chain_tee[p]), f = 0, w = l.length; f < w; f++) if (w3m_isset(B[l[f]])) {
                var g = l[f], v = B[g], R = o.getMain(v);
                E.indexOf(g) >= 0 && (R[3] = {cross_link: 1, residue_id: h, atom_name: g}), D.push(R)
            } else D.length && _.push(D), D = [];
            _.push(D);
            for (var b = 0, O = _.length; b < O; b++) {
                var D = _[b];
                if (D.length >= 2) {
                    var T = [];
                    this.stickFrame(D, T, u);
                    var M = w3m["END_" + (m == m && w3m.config.geom_stick_round_end ? "S" : "X") + (P == P && w3m.config.geom_stick_round_end ? "S" : "X")];
                    this.tubeFiller(T, {end_mode: M, radius: s})
                } else 1 == D.length && this.crossFiller(D[0], {radius: s})
            }
            for (var h = m; h <= P; h++) {
                var B = n[h], p = o.residue[r][h];
                if (i == w3m.CHAIN_NA) {
                    for (var I = w3m.structure.sub_chain.nucleic_acid, A = w3m.structure.sub_chain_tee.nucleic_acid, y = u[h] && u[h][I[0]] || null, D = [], _ = [], f = 0, w = I.length; f < w; f++) if (w3m_isset(B[I[f]])) {
                        var g = I[f], v = B[g], R = o.getMain(v);
                        A.indexOf(g) >= 0 && (R[3] = {cross_link: 1, residue_id: h, atom_name: g}), D.push(R)
                    } else D.length && _.push(D), D = [];
                    _.push(D);
                    for (var b = 0, O = _.length; b < O; b++) {
                        var D = _[b];
                        if (D.length >= 2) {
                            var T = [];
                            this.stickFrame(D, T, u, y), this.tubeFiller(T, {end_mode: w3m.END_OO, radius: s})
                        } else 1 == D.length && this.crossFiller(D[0], {radius: s})
                    }
                }
                var U = w3m.structure.sub_chain[p], N = w3m.structure.sub_chain_tee[p],
                    G = w3m.structure.sub_chain_loop;
                y = w3m_isset(u[h]) && U.length ? u[h][U[0]] : null, D = [], _ = [];
                for (var f = 0, w = U.length; f < w; f++) if (w3m_isset(B[U[f]])) {
                    var g = U[f], v = B[g], R = o.getMain(v);
                    N.indexOf(g) >= 0 && (R[3] = {cross_link: 1, residue_id: h, atom_name: g}), D.push(R)
                } else D.length && _.push(D), D = [];
                _.push(D);
                for (var b = 0, O = _.length; b < O; b++) {
                    var D = _[b];
                    if (D.length >= 2) {
                        var T = [];
                        this.stickFrame(D, T, u, y);
                        var M = w3m["END_O" + (G.indexOf(p) >= 0 ? "O" : w3m.config.geom_stick_round_end ? "S" : "X")];
                        this.tubeFiller(T, {end_mode: M, radius: s})
                    } else 1 == D.length && this.crossFiller(D[0], {radius: s})
                }
                for (var S = w3m_copy(w3m.structure.hang_link[p]), f = 0, w = S.length; f < w; f++) {
                    var C = S[f][0], x = S[f][1];
                    if (w3m_isset(B[x])) if (w3m_isset(B[C])) {
                        var L = o.getMain(B[C]), H = o.getMain(B[x]), y = w3m_isset(u[h]) ? u[h][C] : null,
                            M = w3m["END_O" + (w3m.config.geom_stick_round_end ? "S" : "X")];
                        this.stickFiller(L, H, {end_mode: M, radius: s, ref_tnb: y})
                    } else this.sphereFiller(o.getMain(B[x]), {radius: s})
                }
                for (var k = w3m.structure.inner_link[p], f = 0, w = k.length; f < w; f++) {
                    var C = k[f][0], x = k[f][1];
                    if (w3m_isset(B[x])) if (w3m_isset(B[C])) {
                        var L = o.getMain(B[C]), H = o.getMain(B[x]), y = w3m_isset(u[h]) ? u[h][C] : null;
                        this.stickFiller(L, H, {end_mode: w3m.END_OO, radius: s, ref_tnb: y})
                    } else this.crossFiller(o.getMain(B[x]), {radius: s})
                }
            }
        }
    }, fillMainAsTube: function (e, r, t, a) {
        var o = w3m.mol[e], n = o.tree.main[r], i = o.chain[r], s = w3m_split_by_undefined(n, t, a);
        for (var l in s) {
            var c = [], d = s[l][0], m = s[l][1];
            if (i == w3m.CHAIN_AA) {
                var P = w3m.structure.residue.amino_acid;
                if (d == m) {
                    var u = n[d];
                    if (!w3m_isset(u[P])) continue;
                    this.sphereFiller(o.getMain(u[P]), {radius: w3m.config.geom_tube_radius});
                    continue
                }
                for (var D = d; D <= m; D++) {
                    var u = n[D];
                    if (w3m_isset(u[P])) {
                        var _ = o.getMain(u[P]);
                        if (w3m.config.fill_tube_putty && 0 != w3m.global.average.b_factor_backbone[1] && !w3m_isempty(w3m.global.limit.b_factor_backbone)) {
                            var h = o.atom.main[u[P]][8];
                            h && (_[6] = h)
                        }
                        c.push(_)
                    }
                }
            } else {
                var B = w3m_find_first(n), p = w3m_find_last(n);
                if (d == m) {
                    var u = n[d],
                        E = d == B ? w3m.structure.residue.nucleic_acid_5_end_replace : w3m.structure.residue.nucleic_acid;
                    if (!w3m_isset(u[E])) continue;
                    this.sphereFiller(o.getMain(u[E]), {radius: w3m.config.geom_tube_radius});
                    continue
                }
                for (var D = d; D <= m; D++) {
                    var u = n[D],
                        P = D == B ? w3m.structure.residue.nucleic_acid_5_end_replace : w3m.structure.residue.nucleic_acid;
                    if (w3m_isset(u[P])) {
                        var _ = o.getMain(u[P]);
                        if (w3m.config.fill_tube_putty && 0 != w3m.global.average.b_factor_backbone[1] && !w3m_isempty(w3m.global.limit.b_factor_backbone)) {
                            var h = o.atom.main[u[P]][8];
                            h && (_[6] = h)
                        }
                        c.push(_), D == p && w3m_isset(u[w3m.structure.residue.nucleic_acid_3_end_push]) && c.push(o.getMain(u[w3m.structure.residue.nucleic_acid_3_end_push]))
                    }
                }
            }
            var f = [];
            w3m.config.geom_tube_smooth ? this.smoothFrame(c, f) : this.simpleFrame(c, f)
        }
    }, getMainAtom: function (e) {
        return atom = w3m.mol[w3m.global.mol].atom.main[e], this.getAtomById(atom, "main")
    }, getAtomById: function (e, r) {
        var t = e[1], a = e[2], o = e[3], n = e[4], i = e[5], s = e[6], l = e[7], c = e[8], d = e[9],
            m = w3m.geometry.radius[d], P = new THREE.Vector3(s[0], s[1], s[2]);
        return offset = PDB.GeoCenterOffset, {
            id: t,
            name: a,
            resname: o,
            chainname: n,
            resid: i,
            pos: P,
            pos_centered: new THREE.Vector3(s[0] + offset.x, s[1] + offset.y, s[2] + offset.z),
            bfactor: l,
            coe: c,
            type: d,
            radius: m,
            color: PDB.tool.getColorByIndex(t, r)
        }
    }, fillMainAsPutty: function (e, r, t, a) {
        if (0 == w3m.global.average.b_factor_backbone[1] || w3m_isempty(w3m.global.limit.b_factor_backbone)) return void this.fillMainAsTube(e, r, t, a);
        var o = w3m.mol[e], n = o.tree.main[r], i = o.chain[r], s = w3m_split_by_undefined(n, t, a);
        for (var l in s) {
            var c = [], d = s[l][0], m = s[l][1];
            if (i == w3m.CHAIN_AA) {
                var P = w3m.structure.residue.amino_acid;
                if (d == m) {
                    var u = n[d];
                    if (!w3m_isset(u[P])) continue;
                    this.sphereFiller(o.getMain(u[P]), {radius: w3m.config.geom_tube_radius});
                    continue
                }
                for (var D = d; D <= m; D++) {
                    var u = n[D];
                    if (w3m_isset(u[P])) {
                        var _ = o.getMain(u[P]), h = o.atom.main[u[P]][8];
                        h && (_[6] = h), c.push(_)
                    }
                }
            } else {
                var B = w3m_find_first(n), p = w3m_find_last(n);
                if (d == m) {
                    var u = n[d],
                        E = d == B ? w3m.structure.residue.nucleic_acid_5_end_replace : w3m.structure.residue.nucleic_acid;
                    if (!w3m_isset(u[E])) continue;
                    this.sphereFiller(o.getMain(u[E]), {radius: w3m.config.geom_tube_radius});
                    continue
                }
                for (var D = d; D <= m; D++) {
                    var u = n[D],
                        P = D == B ? w3m.structure.residue.nucleic_acid_5_end_replace : w3m.structure.residue.nucleic_acid;
                    if (w3m_isset(u[P])) {
                        var _ = o.getMain(u[P]), h = o.atom.main[u[P]][8];
                        h && (_[6] = h), c.push(_), D == p && w3m_isset(u[w3m.structure.residue.nucleic_acid_3_end_push]) && c.push(o.getMain(u[w3m.structure.residue.nucleic_acid_3_end_push]))
                    }
                }
            }
            var f = [];
            this.puttyFrame(c, f), this.puttyFiller(f)
        }
    }, fillMainAsCubeStripRibbonRailwayArrow: function (e, r, t, a, o) {
        var n = w3m.mol[r];
        if (n.chain[t] != w3m.CHAIN_AA) return void this.fillNucleicAcid(r, t, a, o);
        var i = n.tree.main[t], s = (w3m_find_first(i), w3m_find_last(i), w3m.structure.residue.amino_acid),
            l = w3m.structure.normal.amino_acid, c = w3m_split_by_undefined(i, a, o);
        w3m.CLENGTH = 1;
        for (var d = 0, m = c.length; d < m; d++) {
            var P = [], u = c[d][0], D = c[d][1], _ = [];
            if (u != D) {
                for (var h = u; h <= D; h++) {
                    var B, p = i[h];
                    if (w3m_isset(B = p[s])) {
                        var E = n.getMain(B);
                        if (w3m_isset(p[l[0]]) && w3m_isset(p[l[1]])) {
                            var f = vec3.point(n.atom.main[p[l[0]]][6], n.atom.main[p[l[1]]][6]),
                                w = h > u && vec3.dot(_, f) < 0;
                            w && (f = vec3.negate(f))
                        } else var f = [0, 0, 0], w = [0, 0, 0];
                        E[4] = f, E[6] = w, P.push(E), _ = w3m_copy(f)
                    }
                }
                var g = [];
                switch (P.length > 2 ? this.naturalFrame(P, g, !1) : this.simpleFrame(P, g), e) {
                    case w3m.CUBE:
                        this.cubeFiller(g);
                        break;
                    case w3m.STRIP:
                        this.stripFiller(g);
                        break;
                    case w3m.RIBBON:
                        this.ribbonFiller(g);
                        break;
                    case w3m.RAILWAY:
                        this.railwayFiller(g);
                        break;
                    case w3m.ARROW:
                        this.arrowFiller(g)
                }
            } else {
                var p = i[u];
                if (!w3m_isset(p[s])) continue;
                this.sphereFiller(n.getMain(p[s]), {radius: w3m.config.geom_tube_radius})
            }
        }
    }, fillMainAsCube: function (e, r, t, a) {
        this.fillMainAsCubeStripRibbonRailwayArrow(w3m.CUBE, e, r, t, a)
    }, fillMainAsStrip: function (e, r, t, a) {
        this.fillMainAsCubeStripRibbonRailwayArrow(w3m.STRIP, e, r, t, a)
    }, fillMainAsRibbon: function (e, r, t, a) {
        this.fillMainAsCubeStripRibbonRailwayArrow(w3m.RIBBON, e, r, t, a)
    }, fillMainAsRailway: function (e, r, t, a) {
        this.fillMainAsCubeStripRibbonRailwayArrow(w3m.RAILWAY, e, r, t, a)
    }, fillMainAsArrow: function (e, r, t, a) {
        this.fillMainAsCubeStripRibbonRailwayArrow(w3m.ARROW, e, r, t, a)
    }, fillMainAsCartoon: function (e, r, t, a) {
        var o = (PDB.GeoCenterOffset, w3m.mol[e]);
        if (o.chain[r] != w3m.CHAIN_AA) return w3m.CLENGTH = 2, this.fillNucleicAcid(e, r, t, a), void (w3m.CLENGTH = 0);
        for (var n = o.tree.main[r], i = (w3m_find_first(n), w3m_find_last(n), o.helix[r], o.sheet[r], w3m_split_by_undefined(n, t, a)), s = w3m.structure.residue.amino_acid, l = w3m.structure.normal.amino_acid, c = 0, d = i.length; c < d; c++) {
            var m = [], P = i[c][0], u = i[c][1], D = [];
            if (P != u) {
                for (var _ = P; _ <= u; _++) {
                    var h = n[_];
                    if (w3m_isset(h[s])) {
                        var B = o.getMain(h[s]);
                        if (w3m_isset(h[l[0]]) && w3m_isset(h[l[1]])) {
                            var p = vec3.point(o.atom.main[h[l[0]]][6], o.atom.main[h[l[1]]][6]),
                                E = _ > P && vec3.dot(D, p) < 0;
                            E && (p = vec3.negate(p))
                        } else var p = [0, 0, 0], E = [0, 0, 0];
                        B[4] = p, B[6] = E, m.push(B), D = w3m_copy(p)
                    }
                }
                var f = [];
                if (m.length > 2) this.naturalFrame(m, f); else {
                    if (2 != m.length) continue;
                    this.simpleFrame(m, f)
                }
                for (var w = o.ss[r], g = [], _ = P; _ <= u; _++) switch (w[_][0]) {
                    case w3m.HELIX:
                    case w3m.HELIX_HEAD:
                    case w3m.HELIX_BODY:
                    case w3m.HELIX_FOOT:
                        g[_] = w3m.HELIX;
                        break;
                    case w3m.SHEET:
                    case w3m.SHEET_HEAD:
                    case w3m.SHEET_BODY:
                    case w3m.SHEET_FOOT:
                        g[_] = w3m.SHEET;
                        break;
                    case w3m.LOOP:
                    case w3m.LOOP_HEAD:
                    case w3m.LOOP_BODY:
                    case w3m.LOOP_FOOT:
                        g[_] = w3m.LOOP
                }
                var v = w3m_split_by_difference(g), R = {loop: [], helix: [], sheet: []};
                for (var _ in v) {
                    var b = v[_], O = b[0], T = b[1], M = b[2];
                    switch ([w3m.HELIX, w3m.SHEET].indexOf(M) >= 0 && w3m_isset(v[_ - 1]) && [w3m.HELIX, w3m.SHEET].indexOf(v[_ - 1][2]) >= 0 && R.loop.push([v[_ - 1][1], O]), M) {
                        case w3m.HELIX:
                            R.helix.push([O, T]);
                            break;
                        case w3m.SHEET:
                            R.sheet.push([O, T]);
                            break;
                        case w3m.LOOP:
                            R.loop.push([O == P ? O : O - 1, T == u ? T : T + 1])
                    }
                }
                var I = w3m.config.smooth_segment % 2 ? w3m.config.smooth_segment + 1 : w3m.config.smooth_segment;
                for (var _ in R.helix) {
                    var O = R.helix[_][0], T = R.helix[_][1];
                    if (O != T) {
                        var A = (O - P) * (I + 1), y = (T - P) * (I + 1), U = f.slice(A, y + 1);
                        if (w3m.config.geom_helix_mode == w3m.HIDE) ; else if (w3m.config.geom_helix_mode == w3m.TUBE) {
                            var N = w3m["END_" + (O == P && w3m.config.geom_tube_round_end ? "S" : "X") + (T == u && w3m.config.geom_tube_round_end ? "S" : "X")];
                            this.tubeFiller(U, {end_mode: N})
                        } else if (w3m.config.geom_helix_mode == w3m.CYLINDER) this.cylinderFiller(U); else {
                            var G = 0;
                            U.forEach(function (e) {
                                e[6] && G++
                            });
                            var S = G / U.length > .5 ? w3m.INNERFACE_TURNOVER : w3m.INNERFACE_NON_TURNOVER,
                                C = !!w3m.config.geom_helix_inner_differ, x = !!w3m.config.geom_helix_side_differ,
                                L = x ? w3m.config.geom_helix_side_color : null;
                            switch (H = {
                                inner_differ: C,
                                inner_face: S,
                                side_differ: x,
                                side_color: L
                            }, w3m.config.geom_helix_mode) {
                                case w3m.CUBE:
                                    this.cubeFiller(U, H);
                                    break;
                                case w3m.STRIP:
                                    this.stripFiller(U, H);
                                    break;
                                case w3m.RAILWAY:
                                    this.railwayFiller(U, H);
                                    break;
                                case w3m.RIBBON:
                                    this.ribbonFiller(U, H);
                                    break;
                                case w3m.ARROW:
                                    this.arrowFiller(U, H);
                                    break;
                                default:
                                    this.cubeFiller(U, H)
                            }
                        }
                    } else {
                        var h = n[O];
                        if (!w3m_isset(h[w3m.structure.residue.amino_acid])) continue;
                        this.sphereFiller(o.getMain(h[w3m.structure.residue.amino_acid]), {radius: w3m.config.geom_tube_radius})
                    }
                }
                for (var _ in R.sheet) {
                    var O = R.sheet[_][0], T = R.sheet[_][1];
                    if (O != T) {
                        var A = (O - P) * (I + 1), y = (T - P) * (I + 1), U = f.slice(A, y + 1);
                        if (w3m.config.geom_sheet_flat && (U = this.zigzagFix(U)), w3m.config.geom_sheet_mode == w3m.HIDE) ; else if (w3m.config.geom_sheet_mode == w3m.TUBE) {
                            var N = w3m["END_" + (O == P && w3m.config.geom_tube_round_end ? "S" : "X") + (T == u && w3m.config.geom_tube_round_end ? "S" : "X")];
                            this.tubeFiller(U, {end_mode: N})
                        } else {
                            var x = !!w3m.config.geom_sheet_side_differ,
                                L = x ? w3m.config.geom_sheet_side_color : null, H = {side_differ: x, side_color: L};
                            switch (w3m.config.geom_sheet_mode) {
                                case w3m.CUBE:
                                    this.cubeFiller(U, H);
                                    break;
                                case w3m.STRIP:
                                    this.stripFiller(U, H);
                                    break;
                                case w3m.RAILWAY:
                                    this.railwayFiller(U, H);
                                    break;
                                case w3m.RIBBON:
                                    this.ribbonFiller(U, H);
                                    break;
                                case w3m.ARROW:
                                    this.arrowFiller(U, H);
                                    break;
                                default:
                                    this.arrowFiller(U, H)
                            }
                        }
                    } else {
                        var h = n[O];
                        if (!w3m_isset(h[w3m.structure.residue.amino_acid])) continue;
                        this.sphereFiller(o.getMain(h[w3m.structure.residue.amino_acid]), {radius: w3m.config.geom_tube_radius})
                    }
                }
                for (var _ in R.loop) {
                    var O = R.loop[_][0], T = R.loop[_][1];
                    if (O != T) var A = (O - P) * (I + 1), y = (T - P) * (I + 1), U = f.slice(A, y + 1); else {
                        var h = n[O];
                        if (!w3m_isset(h[w3m.structure.residue.amino_acid])) continue;
                        this.sphereFiller(o.getMain(h[w3m.structure.residue.amino_acid]), {radius: w3m.config.geom_tube_radius})
                    }
                }
            } else {
                var h = n[P];
                if (!w3m_isset(h[s])) continue;
                this.sphereFiller(o.getMain(h[s]), {radius: w3m.config.geom_tube_radius})
            }
        }
    }, fillMainAsSphere: function (e, r, t, a) {
        for (var o = w3m.mol[e], n = o.tree.main[r], i = (o.chain[r], t); i <= a; i++) if (w3m_isset(n[i])) for (var s = n[i], l = o.residue[r][i], c = w3m.structure.enum[l], d = 0, m = c.length; d < m; d++) if (w3m_isset(s[c[d]])) {
            s[c[d]]
        }
    }, fillResidueAsBallAndRod: function (e, r, t) {
        var a = w3m.mol[e], o = a.tree.main[r];
        if (w3m_isset(o[t])) for (var n = o[t], i = a.residue[r][t], s = w3m.structure.pair[i], l = 0, c = s.length; l < c; l += 2) {
            var d, m;
            if (w3m_isset(d = n[s[l]]) && w3m_isset(m = n[s[l + 1]])) {
                var P = a.getMain(d), u = a.getMain(m);
                this.stickFiller(P, u, {
                    end_mode: w3m.END_OO,
                    radius: w3m.config.geom_rod_radius
                }), this.sphereFiller(P, {radius: w3m.config.geom_ball_radius}), this.sphereFiller(u, {radius: w3m.config.geom_ball_radius})
            }
        }
    }, fillNucleicAcid: function (e, r, t, a) {
        for (var o = PDB.GeoCenterOffset, n = w3m.mol[e], i = n.tree.main[r], s = (n.chain[r], w3m_find_first(i)), l = w3m_find_last(i), c = w3m_split_by_undefined(i, t, a), s = w3m_find_first(i), l = w3m_find_last(i), d = 0, m = c.length; d < m; d++) {
            var P = [], u = [], D = c[d][0], _ = c[d][1];
            if (D != _) {
                for (var h = D; h <= _; h++) {
                    var B = h == s ? w3m.structure.residue.nucleic_acid_5_end_replace : w3m.structure.residue.nucleic_acid,
                        p = i[h];
                    w3m_isset(p[B]) && P.push(n.getMain(p[B])), h == l && w3m_isset(p[w3m.structure.residue.nucleic_acid_3_end_push]) && P.push(n.getMain(p[w3m.structure.residue.nucleic_acid_3_end_push]))
                }
                this.smoothFrame(P, u), this.tubeFiller(u);
                for (var E = w3m.config.smooth_segment % 2 ? w3m.config.smooth_segment + 1 : w3m.config.smooth_segment, f = 0, h = D; h <= _; h++) if (w3m.structure.normal[n.residue[r][h]]) {
                    var p = i[h], w = n.residue[r][h], g = E * f + E / 2, v = p[w3m.structure.normal[w][0]],
                        R = p[w3m.structure.normal[w][1]];
                    if (v && R) {
                        var b = n.getMain(v), O = n.getMain(R),
                            T = w3m.config.geom_tube_round_end ? w3m.END_OS : w3m.END_OX;
                        if (u[g]) {
                            if (b[0] = u[g][0], b[1] = u[g][1], 2 == w3m.CLENGTH) {
                                var M = w3m.mol[w3m.global.mol].residueData[r][h];
                                void 0 == M.dnaStick && (M.dnaStick = []);
                                var I = {id: v, xyz: new THREE.Vector3(o.x + b[1][0], o.y + b[1][1], o.z + b[1][2])},
                                    A = {id: R, xyz: new THREE.Vector3(o.x + O[1][0], o.y + O[1][1], o.z + O[1][2])};
                                M.dnaStick.push([I, A])
                            }
                            this.stickFiller(b, O, {radius: w3m.config.geom_tube_radius, end_mode: T})
                        }
                    }
                    f++
                }
            } else {
                var p = i[D],
                    y = D == s ? w3m.structure.residue.nucleic_acid_5_end_replace : w3m.structure.residue.nucleic_acid;
                if (!w3m_isset(p[y])) continue;
                this.sphereFiller(n.getMain(p[y]), {radius: w3m.config.geom_tube_radius})
            }
        }
    }, fillSSBond: function (e) {
        var r = w3m.mol[e], t = r.ssbond, a = r.rep;
        for (var o in t) {
            var n = t[o], i = n[0], s = n[1], l = n[2], c = n[3], d = r.tree.main[i][s], m = r.tree.main[l][c],
                P = p1cb = p1sg = p2sg = p2cb = p2ca = null;
            switch (a[i][s]) {
                case w3m.DOT:
                case w3m.LINE:
                case w3m.STICK:
                case w3m.SPHERE:
                    p1sg = d.sg;
                    break;
                case w3m.BACKBONE:
                case w3m.TUBE:
                case w3m.CARTOON:
                case w3m.PUTTY:
                case w3m.CUBE:
                case w3m.STRIP:
                case w3m.RIBBON:
                case w3m.RAILWAY:
                case w3m.ARROW:
                    P = d.ca, p1cb = d.cb, p1sg = d.sg
            }
            switch (a[l][c]) {
                case w3m.DOT:
                case w3m.LINE:
                case w3m.STICK:
                case w3m.SPHERE:
                    p2sg = m.sg;
                    break;
                case w3m.BACKBONE:
                case w3m.TUBE:
                case w3m.CARTOON:
                case w3m.PUTTY:
                case w3m.CUBE:
                case w3m.STRIP:
                case w3m.RIBBON:
                case w3m.RAILWAY:
                case w3m.ARROW:
                    p2ca = m.ca, p2cb = m.cb, p2sg = m.sg
            }
            w3m.color.element.s;
            if (P && p1cb && this.dashFiller(r.getMain(P), r.getMain(p1cb), {ext: !0}), p1cb && p1sg && this.dashFiller(r.getMain(p1cb), r.getMain(p1sg), {ext: !0}), p2ca && p2cb && this.dashFiller(r.getMain(p2ca), r.getMain(p2cb), {ext: !0}), p2cb && p2sg && this.dashFiller(r.getMain(p2cb), r.getMain(p2sg), {ext: !0}), p1sg && p2sg) {
                var u = r.getMain(p1sg), D = r.getMain(p2sg);
                this.stickFiller(u, D, {
                    end_mode: w3m.END_OO,
                    radius: w3m.config.geom_rod_radius,
                    ext: !0
                }), this.point2vertexLabel([u[1], "S"]), this.point2vertexLabel([D[1], "S"])
            }
        }
    }, fillMeasurement: function () {
        for (var e in w3m.global.measure) {
            var r = w3m.global.measure[e], t = w3m.mol[w3m.global.mol], a = w3m.config.measure_line_color;
            if (r && r.show) if (r.type == w3m.MEASURE_DISTANCE) {
                var o = r.point.a ? t.getAtom(r.point.a).slice(0, 2).concat([a]) : null,
                    n = r.point.b ? t.getAtom(r.point.b).slice(0, 2).concat([a]) : null;
                o && n && this.lineFiller(o, n, {ext: !0}), r.label_xyz && this.point2vertexLabel([r.label_xyz, r.result])
            } else if (r.type == w3m.MEASURE_VECTOR_ANGLE) {
                var o = r.point.a ? t.getAtom(r.point.a).slice(0, 2).concat([a]) : null,
                    n = r.point.b ? t.getAtom(r.point.b).slice(0, 2).concat([a]) : null,
                    i = r.point.c ? t.getAtom(r.point.c).slice(0, 2).concat([a]) : null;
                o && n && this.lineFiller(o, n, {ext: !0}), o && i && this.lineFiller(o, i, {ext: !0}), r.label_xyz && this.point2vertexLabel([r.label_xyz, r.result])
            } else if (r.type == w3m.MEASURE_DIHEDRAL_ANGLE) {
                var o = r.point.a ? t.getAtom(r.point.a).slice(0, 2).concat([a]) : null,
                    n = r.point.b ? t.getAtom(r.point.b).slice(0, 2).concat([a]) : null,
                    i = r.point.c ? t.getAtom(r.point.c).slice(0, 2).concat([a]) : null,
                    s = r.point.d ? t.getAtom(r.point.d).slice(0, 2).concat([a]) : null;
                o && n && this.dashFiller(o, n, {ext: !0}), o && i && this.lineFiller(o, i, {ext: !0}), n && i && this.lineFiller(n, i, {ext: !0}), o && s && this.lineFiller(o, s, {ext: !0}), n && s && this.lineFiller(n, s, {ext: !0}), r.label_xyz && this.point2vertexLabel([r.label_xyz, r.result])
            } else if (r.type == w3m.MEASURE_TRIANGLE_AREA) {
                var o = r.point.a ? t.getAtom(r.point.a).slice(0, 2).concat([a]) : null,
                    n = r.point.b ? t.getAtom(r.point.b).slice(0, 2).concat([a]) : null,
                    i = r.point.c ? t.getAtom(r.point.c).slice(0, 2).concat([a]) : null;
                o && n && this.dashFiller(o, n, {ext: !0}), o && i && this.dashFiller(o, i, {ext: !0}), n && i && this.dashFiller(n, i, {ext: !0}), r.label_xyz && this.point2vertexLabel([r.label_xyz, r.result])
            }
        }
    }, fillCellUnit: function () {
        var e = w3m.mol[w3m.global.mol];
        if (e.info.cell.len && e.info.cell.angle) {
            var r = e.info.cell.len[0], t = e.info.cell.len[1], a = e.info.cell.len[2],
                o = math.degree2rad(e.info.cell.angle[0]), n = (Math.sin(o), Math.cos(o)),
                i = math.degree2rad(e.info.cell.angle[1]), s = (Math.sin(i), Math.cos(i)),
                l = math.degree2rad(e.info.cell.angle[2]), c = Math.sin(l), d = Math.cos(l), m = [1, 0, 0],
                P = [d, c, 0], u = [s, (n - s * d) / c, 0];
            u[2] = Math.sqrt(1 - u[0] * u[0] - u[1] * u[1]);
            var D = vec3.setlen(r, m), _ = vec3.setlen(t, P), h = vec3.setlen(a, u), B = [0, [0, 0, 0], 1],
                p = [0, D, 1], E = [0, _, 1], f = [0, vec3.plus(D, _), 1], w = [0, h, 1], g = [0, vec3.plus(D, h), 1],
                v = [0, vec3.plus(_, h), 1], R = [0, vec3.plus(D, vec3.plus(_, h)), 1];
            this.lineFiller(B, p, {ext: !0}), this.lineFiller(B, E, {ext: !0}), this.lineFiller(p, f, {ext: !0}), this.lineFiller(E, f, {ext: !0}), this.lineFiller(B, w, {ext: !0}), this.lineFiller(p, g, {ext: !0}), this.lineFiller(E, v, {ext: !0}), this.lineFiller(f, R, {ext: !0}), this.lineFiller(w, g, {ext: !0}), this.lineFiller(w, v, {ext: !0}), this.lineFiller(g, R, {ext: !0}), this.lineFiller(v, R, {ext: !0})
        }
    }, fillHetAsDot: function (e) {
        var r = w3m.mol[e], t = w3m.config.remove_water_mol,
            a = w3m.config.geom_dot_as_cross ? w3m.tool.crossFiller : w3m.tool.dotFiller;
        for (var o in r.tree.het) {
            r.tree.het[o].forEach(function (e) {
                t && "hoh" == r.atom.het[e][3] || a(r.getHet(e), {het: !0})
            })
        }
    }, fillHetAsLine: function (e) {
        var r = w3m.mol[e];
        for (var t in r.connect) {
            r.connect[t].length
        }
        var a = w3m.config.remove_water_mol;
        for (var t in r.single) a && "hoh" == r.atom.het[t][3] || this.crossFiller(r.getHet(t), {het: !0})
    }, fillHetAsStick: function (e) {
        var r = this, t = w3m.mol[e], a = {};
        for (var o in t.connect) {
            var n = t.connect[o];
            if (n.length) {
                var i = o;
                a[i] = 0, n.forEach(function (e) {
                    var o = e;
                    a[o] = 0, r.stickFiller(t.getAtom(i), t.getAtom(o), {end_mode: w3m.END_OO, het: !0})
                })
            }
        }
        for (var o in a) this.sphereFiller(t.getAtom(o), {radius: w3m.config.geom_stick_radius, het: !0});
        var s = w3m.config.remove_water_mol;
        for (var o in t.single) s && "hoh" == t.atom.het[o][3] || this.crossFiller(t.getHet(o), {
            radius: w3m.config.geom_stick_radius,
            het: !0
        })
    }, fillHetAsBallAndRod: function (e) {
        var r = this, t = w3m.mol[e], a = w3m.config.geom_ball_radius, o = w3m.config.remove_water_mol;
        for (var n in t.tree.het) {
            t.tree.het[n].forEach(function (e) {
                "hoh" == t.atom.het[e][3] ? o || r.crossFiller(t.getHet(e), {het: !0}) : r.sphereFiller(t.getHet(e), {
                    radius: a,
                    het: !0
                })
            })
        }
        var a = w3m.config.geom_rod_radius;
        for (var n in t.connect) {
            var i = t.connect[n];
            if (i.length) {
                var s = n;
                i.forEach(function (e) {
                    var o = e;
                    r.stickFiller(t.getAtom(s), t.getAtom(o), {end_mode: w3m.END_OO, radius: a, het: !0})
                })
            }
        }
    }, fillHetAsSphere: function (e) {
        var r = this, t = w3m.mol[e], a = w3m.config.remove_water_mol;
        for (var o in t.tree.het) {
            t.tree.het[o].forEach(function (e) {
                "hoh" == t.atom.het[e][3] ? a || r.crossFiller(t.getHet(e), {het: !0}) : r.sphereFiller(t.getHet(e), {
                    radius: w3m.geometry.radius[t.atom.het[e][9]],
                    het: !0
                })
            })
        }
    }, labeler: function (e, r) {
        var t = e[6], a = e[1], o = e[4].toUpperCase(), n = w3m_capfirst(e[2]), i = e[5],
            s = w3m_array_has(w3m.dict.cap_last, e[3]) ? w3m_caplast(e[3]) : w3m_capfirst(e[3]), l = w3m_capfirst(e[9]);
        switch (r) {
            case w3m.LABEL_ATOM_NAME:
                this.point2vertexLabel([t, n]);
                break;
            case w3m.LABEL_ATOM_ID:
                this.point2vertexLabel([t, a]);
                break;
            case w3m.LABEL_ATOM_NAME_AND_ID:
                this.point2vertexLabel([t, n + "-" + a]);
                break;
            case w3m.LABEL_ELEMENT:
                this.point2vertexLabel([t, l]);
                break;
            case w3m.LABEL_ELEMENT_AND_ID:
                this.point2vertexLabel([t, l + "-" + a]);
                break;
            case w3m.LABEL_RESIDUE_NAME:
                this.point2vertexLabel([t, s]);
                break;
            case w3m.LABEL_RESIDUE_ID:
                this.point2vertexLabel([t, i]);
                break;
            case w3m.LABEL_RESIDUE_NAME_AND_ID:
                this.point2vertexLabel([t, s + i]);
                break;
            case w3m.LABEL_CHAIN_ID:
                this.point2vertexLabel([t, o]);
                break;
            case w3m.LABEL_CHAIN_AND_RESIDUE:
                this.point2vertexLabel([t, o + "." + s + i]);
                break;
            case w3m.LABEL_CHAIN_AND_RESIDUE_ID:
                this.point2vertexLabel([t, o + "." + i]);
                break;
            case w3m.LABEL_MIX:
                this.point2vertexLabel([t, o + "." + s + i + "-" + n]);
                break;
            case w3m.LABEL_B_FACTOR:
                this.point2vertexLabel([t, e[8]]);
                break;
            case w3m.LABEL_OCCUPANCY:
                this.point2vertexLabel([t, e[7]]);
                break;
            case w3m.LABEL_VDW_RADIUS:
                this.point2vertexLabel([t, w3m.geometry.radius[e[9]].toFixed(2)])
        }
    }, labelMainAtom: function (e, r, t, a, o) {
        for (var n = w3m.mol[e], i = n.tree.main[r], s = (n.chain[r], t); s <= a; s++) if (w3m_isset(i[s])) for (var l = i[s], c = n.residue[r][s], d = w3m_copy(w3m.structure.enum[c]), m = 0, P = d.length; m < P; m++) if (w3m_isset(l[d[m]])) {
            var u = l[d[m]], D = w3m.mol[e].atom.main[u];
            this.labeler(D, o)
        }
    }, labelMainBackbone: function (e, r, t, a, o) {
        for (var n = w3m.mol[e], i = n.tree.main[r], s = n.chain[r], l = w3m_copy(s == w3m.CHAIN_AA ? w3m.structure.backbone.amino_acid : w3m.structure.backbone.nucleic_acid), c = t; c <= a; c++) if (w3m_isset(i[c])) for (var d = i[c], m = 0, P = l.length; m < P; m++) if (w3m_isset(d[l[m]])) {
            var u = d[l[m]], D = w3m.mol[e].atom.main[u];
            this.labeler(D, o)
        }
    }, labelMainResidue: function (e, r, t, a, o) {
        for (var n = w3m.mol[e], i = n.tree.main[r], s = n.chain[r], l = w3m_copy(s == w3m.CHAIN_AA ? w3m.structure.residue.amino_acid : w3m.structure.residue.nucleic_acid), c = t; c <= a; c++) if (w3m_isset(i[c])) {
            var d = i[c];
            if (w3m_isset(d[l])) {
                var m = d[l], P = w3m.mol[e].atom.main[m];
                this.labeler(P, o)
            }
        }
    }, labelMainResidueCenter: function (e, r, t, a, o) {
        for (var n = w3m.mol[e], i = n.tree.main[r], s = n.chain[r], l = w3m_copy(s == w3m.CHAIN_AA ? w3m.structure.residue.amino_acid : w3m.structure.residue.nucleic_acid), c = t; c <= a; c++) if (w3m_isset(i[c])) {
            var d = i[c];
            if (w3m_isset(d[l])) {
                var m = d[l], P = w3m_copy(w3m.mol[e].atom.main[m]), u = [];
                for (var D in d) u.push(n.atom.main[d[D]][6]);
                P[6] = vec3.average(u), this.labeler(P, o)
            }
        }
    }, labelMainChain: function (e, r, t, a, o) {
        for (var n = w3m.mol[e], i = n.tree.main[r], s = n.chain[r], l = w3m_copy(s == w3m.CHAIN_AA ? w3m.structure.chain.amino_acid : w3m.structure.chain.nucleic_acid), c = t; c <= a; c++) if (w3m_isset(i[c])) {
            var d = i[c];
            if (w3m_isset(d[l])) {
                var m = d[l], P = w3m.mol[e].atom.main[m];
                this.labeler(P, o);
                break
            }
        }
    }, labelMainMol: function (e) {
        var r = w3m_find_first(w3m.mol[e].atom.main);
        this.point2vertexLabel([w3m.mol[e].atom.main[r][6], "PDB-" + e.toUpperCase()])
    }, labelHetAtom: function (e, r, t) {
        var a = w3m.mol[e], o = a.tree.het[r], n = w3m.config.remove_water_mol;
        for (var i in o) {
            var s = o[i], l = w3m.mol[e].atom.het[s];
            n && "hoh" == l[3] || this.labeler(l, t)
        }
    }, labelHetMol: function (e) {
        var r = w3m_find_first(w3m.mol[e].atom.het);
        this.point2vertexLabel([w3m.mol[e].atom.het[r][6], "PDB-" + e.toUpperCase()])
    }, getMainAtomById: function (e, r) {
        var t = w3m.mol[e].atom.main[r];
        if (void 0 !== t) return {id: t[1], resid: t[5], chainname: t[4]}
    }
}, w3m.pdb = function (e, r) {
    var t = {
        type: "pdb",
        id: "",
        drug: !1,
        res: !1,
        info: {},
        journal: [],
        atom: {main: [], het: []},
        tree: {main: {}, het: {}},
        residue: {},
        chain: {},
        anisou: {},
        single: {},
        connect: {},
        ssbond: [],
        ss: {},
        helix: {},
        sheet: {},
        rep: {},
        rep_real: {},
        label_area: {},
        label_content: {},
        label_area_real: {},
        color: {main: [], het: []},
        color_real: [],
        highlight: {},
        hide: {},
        residue_detail: {},
        residueData: {},
        residueTypeList: {},
        getMain: function (e) {
            return [e, t.atom.main[e][6], t.color_real[e]]
        },
        getHet: function (e) {
            return [e, t.atom.het[e][6], t.color_real[e]]
        },
        getAtom: function (e) {
            return t.atom.main[e] ? this.getMain(e) : t.atom.het[e] ? this.getHet(e) : null
        },
        getAtomEx: function (e) {
            return t.atom.main[e] || t.atom.het[e] || null
        }
    };
    r && void 0 !== w3m.mol[r] && w3m.mol[r].res && (t.id = r);
    var a = function (e) {
        t.id = w3m_sub(e, 63, 66), t.info.id = w3m_sub(e, 63, 66).toUpperCase(), "none" === t.id && (t.id = r, t.info.id = r), t.info.classification = w3m_capword(w3m_sub(e, 11, 50))
    }, o = function (e) {
        w3m_isset(t.info.title) || (t.info.title = ""), t.info.title += w3m_sub(e, 9, 10) && "-" == t.info.title[t.info.title.length - 1] ? " " + w3m_capword(w3m_sub(e, 12, 80)) : w3m_capword(w3m_sub(e, 11, 80))
    }, n = function (e) {
        if (!w3m_isset(t.info.source)) {
            var r = w3m_sub(e, 11, 79);
            if (w3m_start_with(r, "organism_common")) {
                var a = r.split(" ").slice(1).join(" ");
                ";" == a[a.length - 1] && (a = a.slice(0, a.length - 1)), t.info.source = w3m_capword(a)
            }
        }
    }, i = function (e) {
        t.info.expdata = w3m_capword(w3m_sub(e, 11, 79))
    }, s = function (e) {
        var r = w3m_sub(e, 11, 79).split(",");
        t.info.author = w3m_capword(r.join(", "))
    }, l = function (e) {
        switch (w3m_sub(e, 13, 16).toLowerCase()) {
            case"ref":
                t.info.journal = w3m_capword(w3m_sub(e, 20, 47)), t.info.volume = w3m_sub(e, 52, 55), t.info.page = w3m_sub(e, 57, 61);
                break;
            case"pmid":
                t.info.pmid = w3m_sub(e, 20, 79);
                break;
            case"doi":
                t.info.doi = w3m_sub(e, 20, 79)
        }
    }, c = function (e) {
        switch (w3m_sub(e, 8, 10)) {
            case"2":
                t.info.resolution = w3m_sub(e, 24, 30)
        }
    }, d = function (e) {
        t.info.cell = {}, t.info.cell.len = [parseFloat(w3m_sub(e, 7, 15)), parseFloat(w3m_sub(e, 16, 24)), parseFloat(w3m_sub(e, 25, 33))], t.info.cell.angle = [parseFloat(w3m_sub(e, 34, 40)), parseFloat(w3m_sub(e, 41, 47)), parseFloat(w3m_sub(e, 48, 54))], t.info.cell.space_group = w3m_trim(w3m_sub(e, 56, 66))
    }, m = function (e) {
        var r = w3m_sub(e, 17);
        if ("" == r || "a" == r) {
            if (w3m.tool.getChainType(w3m_sub(e, 18, 20)) == w3m.CHAIN_UNK) return e = u(e);
            var t = parseInt(w3m_sub(e, 7, 11)), a = w3m_sub(e, 13, 16), o = w3m_sub(e, 18, 20) || "xxx",
                n = w3m_sub(e, 22) || "x", i = parseInt(w3m_sub(e, 23, 26)) || 0,
                s = [parseFloat(w3m_sub(e, 31, 38)), parseFloat(w3m_sub(e, 39, 46)), parseFloat(w3m_sub(e, 47, 54))],
                l = parseFloat(w3m_sub(e, 55, 60)), c = parseFloat(w3m_sub(e, 61, 66)) || 0, d = w3m_sub(e, 77, 78);
            if (!(i < 0)) {
                if (math.limit(s[0], w3m.global.limit.x), math.limit(s[1], w3m.global.limit.y), math.limit(s[2], w3m.global.limit.z), PDB.residueGroupObject[n][i].moveVec) {
                    var m = PDB.residueGroupObject[n][i].moveVec;
                    math.limit(m.x, w3m.global.limit.x), math.limit(m.y, w3m.global.limit.y), math.limit(m.z, w3m.global.limit.z), s[0] = s[0] + m.x, s[1] = s[1] + m.y, s[2] = s[2] + m.z, e = e.replace(w3m_sub(e, 31, 38), Math.floor(1e3 * s[0]) / 1e3), e = e.replace(w3m_sub(e, 39, 46), Math.floor(1e3 * s[1]) / 1e3), e = e.replace(w3m_sub(e, 47, 54), Math.floor(1e3 * s[2]) / 1e3)
                }
                if (PDB.allMainToms && PDB.allMainToms[n][i]) {
                    var P = PDB.allMainToms[n][i].state;
                    if ("editRes" == P) {
                        var D = w3m.structure.enum[o].length + PDB.allMainToms[n][i].startAtomID - 1;
                        if (PDB.allMainToms[n][i].tempID ? PDB.allMainToms[n][i].tempID < D && PDB.allMainToms[n][i].tempID++ : PDB.allMainToms[n][i].tempID = PDB.allMainToms[n][i].startAtomID, PDB.allMainToms[n][i].tempID == D) {
                            for (var _ = "", h = PDB.allMainToms[n][i].atoms, B = new Array(h.length), p = 0; p < B.length; p++) B[p] = e;
                            for (var p in h) {
                                var E = h[p], f = PDB.allMainToms[n][i].startAtomID;
                                PDB.allMainToms[n][i].endAtomID;
                                t = f + Number(p), t = (t + "").length < 4 ? PDB.tool.fillSpace(t, 4) : t, a = E[2], a = a.length < 3 ? PDB.tool.fillSpace(a, 3, "hou") : a, o = E[3], n = E[4], residue_id_ = i + "", residue_id_ = residue_id_.length < 3 ? PDB.tool.fillSpace(residue_id_, 3) : residue_id_;
                                var w = Number(E[6][0]).toFixed(3), g = Number(E[6][1]).toFixed(3),
                                    v = Number(E[6][2]).toFixed(3), R = Number(E[7]).toFixed(2),
                                    b = Number(E[8]).toFixed(2);
                                l = R, c = b, d = E[9], B[p] = PDB.tool.replacePosByStartEnd(B[p], 7, 11, t), B[p] = PDB.tool.replacePosByStartEnd(B[p], 13, 16, a), B[p] = PDB.tool.replacePosByStartEnd(B[p], 17, 20, o), B[p] = PDB.tool.replacePos(B[p], 22, n), B[p] = PDB.tool.replacePosByStartEnd(B[p], 23, 26, residue_id_), w = (w + "").length < 7 ? PDB.tool.fillSpace(w + "", 7) : w + "", g = (g + "").length < 7 ? PDB.tool.fillSpace(g + "", 7) : g + "", v = (v + "").length < 7 ? PDB.tool.fillSpace(v + "", 7) : v + "", B[p] = PDB.tool.replacePosByStartEnd(B[p], 31, 38, w), B[p] = PDB.tool.replacePosByStartEnd(B[p], 39, 46, g), B[p] = PDB.tool.replacePosByStartEnd(B[p], 47, 54, v), l = (l + "").length < 5 ? PDB.tool.fillSpace(l + "", 5) : l + "", B[p] = PDB.tool.replacePosByStartEnd(B[p], 55, 60, l), c = (c + "").length < 5 ? PDB.tool.fillSpace(c + "", 5) : c + "", B[p] = PDB.tool.replacePosByStartEnd(B[p], 61, 66, c), B[p] = PDB.tool.replacePosByStartEnd(B[p], 77, 78, d)
                            }
                            for (var p in B) _ = _ + B[p] + "\n";
                            return _ = _.substring(0, _.length - 1), console.log(_), PDB.allMainToms[n][i].tempID = void 0, _
                        }
                        return null
                    }
                    if ("justID" == P) {
                        PDB.allMainToms[n][i].tempID ? PDB.allMainToms[n][i].tempID < PDB.allMainToms[n][i].endAtomID && PDB.allMainToms[n][i].tempID++ : PDB.allMainToms[n][i].tempID = PDB.allMainToms[n][i].startAtomID;
                        var O = PDB.allMainToms[n][i].tempID;
                        O = PDB.tool.fillSpace(O, 4), e = PDB.tool.replacePosByStartEnd(e, 7, 11, O)
                    }
                }
                return e
            }
        }
    }, P = function (e) {
        var r = w3m_sub(e, 17);
        if ("" == r || "a" == r) {
            var a = w3m.tool.getChainType(w3m_sub(e, 18, 20));
            if (a == w3m.CHAIN_UNK) return void D(e);
            var o = parseInt(w3m_sub(e, 7, 11)), n = w3m_sub(e, 13, 16), i = w3m_sub(e, 18, 20) || "xxx",
                s = w3m_sub(e, 22) || "x", l = parseInt(w3m_sub(e, 23, 26)) || 0,
                c = [parseFloat(w3m_sub(e, 31, 38)), parseFloat(w3m_sub(e, 39, 46)), parseFloat(w3m_sub(e, 47, 54))],
                d = parseFloat(w3m_sub(e, 55, 60)), m = parseFloat(w3m_sub(e, 61, 66)) || 0, P = w3m_sub(e, 77, 78);
            if (!(l < 0)) {
                if (math.limit(c[0], w3m.global.limit.x), math.limit(c[1], w3m.global.limit.y), math.limit(c[2], w3m.global.limit.z), void 0 == t.residueTypeList.residue_name && (t.residueTypeList[i] = i), m && (math.average(m, w3m.global.average.b_factor), math.limit(m, w3m.global.limit.b_factor), a == w3m.CHAIN_AA && w3m.structure.backbone.amino_acid.indexOf(n) >= 0 ? (math.average(m, w3m.global.average.b_factor_backbone), math.limit(m, w3m.global.limit.b_factor_backbone)) : a == w3m.CHAIN_NA && w3m.structure.backbone.nucleic_acid.indexOf(n) >= 0 && (math.average(m, w3m.global.average.b_factor_backbone), math.limit(m, w3m.global.limit.b_factor_backbone))), w3m_isset(t.tree.main[s]) || (t.tree.main[s] = []), w3m_isset(t.tree.main[s][l]) || (t.tree.main[s][l] = {}), t.tree.main[s][l][n] = o, w3m_isset(t.chain[s]) || (t.chain[s] = a), w3m_isset(t.residue[s]) || (t.residue[s] = []), w3m_isset(t.residue[s][l]) || (t.residue[s][l] = i), w3m_isset(t.ss[s]) || (t.ss[s] = []), w3m_isset(t.ss[s][l]) || (t.ss[s][l] = w3m.LOOP), w3m_isset(t.rep[s]) || (t.rep[s] = []), w3m_isset(t.rep[s][l]) || (t.rep[s][l] = w3m.config.rep_mode_main), w3m_isset(t.label_area[s]) || (t.label_area[s] = []), w3m_isset(t.label_area[s][l]) || (t.label_area[s][l] = w3m.config.label_area_main), w3m_isset(t.label_content[s]) || (t.label_content[s] = []), w3m_isset(t.label_content[s][l]) || (t.label_content[s][l] = w3m.config.label_content_main), t.atom.main[o] = [w3m.ATOM_MAIN, o, n, i, s, l, c, d, m, P], void 0 == t.residueData[s] && (t.residueData[s] = {}), void 0 == t.residueData[s][l]) {
                    var u = Object.keys(t.residueData[s]);
                    u.length > 0 && (t.residueData[s][u[u.length - 1]].laid = o - 1);
                    var _ = t.ss[s][l];
                    t.residueData[s][l] = {
                        id: l,
                        name: i,
                        chain: s,
                        sse: _,
                        faid: o,
                        bbond: [],
                        lines: [],
                        path: [],
                        tangents: [],
                        normals: [],
                        binormals: [],
                        arrow: [],
                        issel: !1
                    }
                }
                "ca" == n ? t.residueData[s][l].caid = o : void 0 == t.residueData[s][l].caid && (t.residueData[s][l].caid = o)
            }
        }
    }, u = function (e) {
        var r = (parseInt(w3m_sub(e, 7, 11)), w3m_sub(e, 13, 16), w3m_sub(e, 18, 20), w3m_sub(e, 22), parseInt(w3m_sub(e, 23, 26)) || 0),
            t = [parseFloat(w3m_sub(e, 31, 38)), parseFloat(w3m_sub(e, 39, 46)), parseFloat(w3m_sub(e, 47, 54))];
        parseFloat(w3m_sub(e, 55, 60)), parseFloat(w3m_sub(e, 61, 66)), w3m_sub(e, 77, 78);
        if (!(r < 0)) return math.limit(t[0], w3m.global.limit.x), math.limit(t[1], w3m.global.limit.y), math.limit(t[2], w3m.global.limit.z), e
    }, D = function (e) {
        var r = parseInt(w3m_sub(e, 7, 11)), a = w3m_sub(e, 13, 16), o = w3m_sub(e, 18, 20) || "xxx",
            n = w3m_sub(e, 22) || "x", i = parseInt(w3m_sub(e, 23, 26)) || 0,
            s = [parseFloat(w3m_sub(e, 31, 38)), parseFloat(w3m_sub(e, 39, 46)), parseFloat(w3m_sub(e, 47, 54))],
            l = parseFloat(w3m_sub(e, 55, 60)), c = parseFloat(w3m_sub(e, 61, 66)) || 0, d = w3m_sub(e, 77, 78);
        i < 0 || (math.limit(s[0], w3m.global.limit.x), math.limit(s[1], w3m.global.limit.y), math.limit(s[2], w3m.global.limit.z), c && (math.average(c, w3m.global.average.b_factor), math.limit(c, w3m.global.limit.b_factor)), w3m_isset(t.tree.het[n]) || (t.tree.het[n] = []), t.tree.het[n].push(r), t.atom.het[r] = [w3m.ATOM_HET, r, a, o, n, i, s, l, c, d], t.single[r] = d)
    }, _ = function (e) {
        var r = parseInt(w3m_sub(e, 7, 11));
        w3m_isset(t.connect[r]) || (t.connect[r] = []);
        var a = function (a, o) {
            var n = parseInt(w3m_sub(e, a, o));
            n && t.getAtom(n) && (w3m_isset(t.connect[n]) && t.connect[n].indexOf(r) >= 0 || t.connect[r].push(n), delete t.single[n])
        };
        a(12, 16), a(17, 21), a(22, 26), a(27, 31), delete t.single[r]
    }, h = function (e) {
        var r = w3m_sub(e, 16), a = w3m_sub(e, 18, 21), o = w3m_sub(e, 30), n = w3m_sub(e, 32, 35);
        t.ssbond.push([r, a, o, n])
    }, B = function (e) {
        var r = w3m_sub(e, 20), a = parseInt(w3m_sub(e, 22, 25)), o = parseInt(w3m_sub(e, 34, 37));
        w3m_isset(t.helix[r]) || (t.helix[r] = []), t.helix[r].push([a, o])
    }, p = function (e) {
        var r = w3m_sub(e, 22), a = w3m_sub(e, 12, 14), o = parseInt(w3m_sub(e, 23, 26)),
            n = parseInt(w3m_sub(e, 34, 37));
        w3m_isset(t.sheet[r]) || (t.sheet[r] = {}), w3m_isset(t.sheet[r][a]) || (t.sheet[r][a] = []), t.sheet[r][a].push([o, n])
    }, E = function () {
        var e = t.atom.main.length;
        e > 3e4 ? (w3m.config.geom_tube_segment = 6, w3m.config.geom_stick_round_end = !1) : e > 2e4 ? (w3m.config.geom_tube_segment = 8, w3m.config.geom_stick_round_end = !1) : e > 1e4 && (w3m.config.geom_tube_segment = 10);
        for (var r in t.chain) t.highlight[r] = [], t.hide[r] = [];
        for (var r = 0, a = t.ssbond.length; r < a; r++) {
            var o = t.ssbond[r], n = t.atom.main[t.tree.main[o[0]][o[1]].sg][1],
                i = t.atom.main[t.tree.main[o[2]][o[3]].sg][1];
            if (w3m_isset(t.connect[n])) {
                var s = t.connect[n].indexOf(i);
                s >= 0 && t.connect[n].splice(s, 1)
            }
            if (w3m_isset(t.connect[i])) {
                var s = t.connect[i].indexOf(n);
                s >= 0 && t.connect[i].splice(s, 1)
            }
        }
        for (var r in t.connect) t.connect[r].length || delete t.connect[r];
        for (var r in t.chain) if (t.chain[r] == w3m.CHAIN_AA) {
            if (w3m_isset(t.helix[r])) for (var l = 0, c = t.helix[r].length; l < c; l++) for (var d = t.helix[r][l], m = d[0]; m <= d[1]; m++) t.ss[r][m] = w3m.HELIX, t.residueData[r][m] && (t.residueData[r][m].sse = w3m.HELIX);
            if (w3m_isset(t.sheet[r])) for (var P in t.sheet[r]) for (var u = t.sheet[r][P], l = 0, c = u.length; l < c; l++) for (var D = u[l], m = D[0]; m <= D[1]; m++) t.ss[r][m] = w3m.SHEET, t.residueData[r][m] && (t.residueData[r][m].sse = w3m.SHEET);
            var _ = w3m_split_by_difference(t.ss[r]);
            _.forEach(function (e) {
                var a = e[0], o = e[1], n = [e[0], e[1]];
                switch (e[2]) {
                    case w3m.HELIX:
                        var i = w3m.HELIX_HEAD, s = w3m.HELIX_BODY, l = w3m.HELIX_FOOT;
                        break;
                    case w3m.SHEET:
                        var i = w3m.SHEET_HEAD, s = w3m.SHEET_BODY, l = w3m.SHEET_FOOT;
                        break;
                    case w3m.LOOP:
                        var i = w3m.LOOP_HEAD, s = w3m.LOOP_BODY, l = w3m.LOOP_FOOT
                }
                t.ss[r][a] = [i, n], t.residueData[r][a] && (t.residueData[r][a].sse = i);
                for (var c = e[0] + 1; c <= e[1] - 1; c++) t.ss[r][c] = [s, n], t.residueData[r][c] && (t.residueData[r][c].sse = s);
                t.ss[r][o] = [l, n], t.residueData[r][o] && (t.residueData[r][o].sse = l)
            })
        }
    };
    switch (typeof e) {
        case"string":
            !function (e) {
                if (e = e.split("\n"), PDB.exportPdb) {
                    console.log("Starting exporting PDB.");
                    for (var r = "", f = 0, w = e.length; f < w; f++) {
                        var g = e[f].toLowerCase();
                        switch (w3m_sub(g, 0, 6)) {
                            case"atom":
                                g = m(g), g && (g = g.toUpperCase(), r = r + g + "\n");
                                break;
                            case"hetatm":
                                g = u(g), g = g.toUpperCase(), r = r + g + "\n";
                                break;
                            default:
                                g = g.toUpperCase(), r = r + g + "\n"
                        }
                    }
                    return PDB.tool.saveString(r, PDB.pdbId + ".pdb"), void (PDB.exportPdb = !1)
                }
                for (var f = 0, w = e.length; f < w; f++) {
                    var g = e[f].toLowerCase();
                    switch (w3m_sub(g, 0, 6)) {
                        case"atom":
                            P(g);
                            break;
                        case"hetatm":
                            D(g);
                            break;
                        case"conect":
                            _(g);
                            break;
                        case"ssbond":
                            h(g);
                            break;
                        case"helix":
                            B(g);
                            break;
                        case"sheet":
                            p(g);
                            break;
                        case"header":
                            a(g);
                            break;
                        case"title":
                            o(g);
                            break;
                        case"source":
                            n(g);
                            break;
                        case"author":
                            s(g);
                            break;
                        case"expdta":
                            i(g);
                            break;
                        case"jrnl":
                            l(g);
                            break;
                        case"remark":
                            c(g);
                            break;
                        case"cryst1":
                            d(g)
                    }
                }
                e = null, E();
                var v = Object.keys(t.residueData);
                if (0 !== v.length) {
                    var R = v[v.length - 1], b = Object.keys(t.residueData[R]), O = b[b.length - 1];
                    t.residueData[R][O].laid = t.atom.main[t.atom.main.length - 1][1], t.residueTypeList = Object.keys(t.residueTypeList)
                }
                w3m.mol[t.id] = t, w3m.global.mol = t.id, w3m.tool.updateMolColorMap(t.id), w3m.tool.pipelineInit()
            }(e);
            break;
        default:
            return !1
    }
    return t
}, w3m.file = function () {
    var e = new FileReader, r = null;
    return e.onload = function (e) {
        var t = e || window.event, a = t.target.result;
        a.includes("mmcif_pdbx") ? (cont = loadCIF(a, 1), r(cont)) : r(t.target.result)
    }, e.get = function (t, a) {
        r = a, e.readAsText(t)
    }, e.getArrayBuffer = function (t, a) {
        r = a, e.readAsArrayBuffer(t)
    }, e
}(), w3m.api = {
    init: function (e, r, t, a, o) {
        var t = void 0 !== t ? t : w3m.global.widget, a = a || {}, o = o || {};
        window.onload = function () {
            w3m.global.mol = "pdb", w3m.config.init(t, a, o)
        }
    }, update: function (e) {
        w3m.tool.clear(), w3m.global.limit = {
            x: [],
            y: [],
            z: [],
            b_factor: [0, 0],
            b_factor_backbone: [0, 0]
        }, w3m.global.average = {
            b_factor: [0, 0],
            b_factor_backbone: [0, 0]
        }, w3m.global.fragment = [], w3m.mol = {}, w3m.pdb(e)
    }, refreshBackground: function () {
        w3m.tool.background()
    }, refreshGeometry: function () {
        w3m.tool.pipelineGeometry()
    }, refreshMain: function () {
        w3m.tool.pipelineMain()
    }, refreshHet: function () {
        w3m.tool.pipelineHet()
    }, refreshExt: function () {
        w3m.tool.pipelineExt()
    }, refreshLabel: function () {
        w3m.tool.pipelineLabel()
    }, switchRepModeMain: function (e, r) {
        if (w3m.config.rep_mode_main = e, r) w3m.tool.updateMolRepMap(r), w3m.config.color_mode_main == w3m.COLOR_BY_REP && w3m.tool.updateMolColorMapMain(r); else for (var t in w3m.mol) w3m.tool.updateMolRepMap(t), w3m.config.color_mode_main == w3m.COLOR_BY_REP && w3m.tool.updateMolColorMapMain(t);
        this.refreshMain()
    }, switchRepModeHet: function (e) {
        if (w3m.config.rep_mode_het = e, w3m.config.color_mode_het == w3m.COLOR_BY_REP) for (var r in w3m.mol) w3m.tool.updateMolColorMapHet(r);
        this.refreshHet()
    }, switchColorModeMain: function (e) {
        w3m.config.color_mode_main = e;
        for (var r in w3m.mol) w3m.tool.updateMolColorMapMain(r);
        this.refreshMain()
    }, switchColorModeHet: function (e) {
        w3m.config.color_mode_het = e;
        for (var r in w3m.mol) w3m.tool.updateMolColorMapHet(r);
        this.refreshHet()
    }, switchLabelAreaMain: function (e) {
        w3m.config.label_area_main = e;
        for (var r in w3m.mol) w3m.tool.updateMolLabelAreaMap(r);
        this.refreshLabel()
    }, switchLabelAreaHet: function (e) {
        w3m.config.label_area_het = e, this.refreshLabel()
    }, switchLabelContentMain: function (e) {
        w3m.config.label_content_main = e;
        for (var r in w3m.mol) w3m.tool.updateMolLabelContentMap(r);
        this.refreshLabel()
    }, switchLabelContentHet: function (e) {
        w3m.config.label_content_het = e, this.refreshLabel()
    }, refreshGeometryByMode: function (e) {
        if (e) {
            var r = !1, t = !1;
            e:for (var a in w3m.mol) {
                var o = w3m.mol[a];
                for (var n in o.rep) {
                    var i = o.rep[n].some(function (r) {
                        return Array.isArray(e) ? e.indexOf(r) >= 0 : e == r
                    });
                    if (i) {
                        r = !0;
                        break e
                    }
                }
            }
            r && this.refreshMain(), Array.isArray(e) ? e.indexOf(w3m.config.rep_mode_het) >= 0 && (t = !0) : w3m.config.rep_mode_het == e && (t = !0), r && t ? this.refresh() : (r && this.refreshMain(), t && this.refreshHet())
        } else this.refresh()
    }, refreshColorByMode: function (e) {
        var r = w3m.config[e];
        if (r) {
            var t = !1, a = !1;
            for (var o in w3m.mol) {
                var n = w3m.mol[o];
                if (n.color.main.some(function (e) {
                    return e == r
                })) {
                    t = !0;
                    break
                }
            }
            var a = !1;
            for (var o in w3m.mol) {
                var n = w3m.mol[o];
                if (n.color.het.some(function (e) {
                    return e == r
                })) {
                    a = !0;
                    break
                }
            }
            t && a ? this.refresh() : (t && this.refreshMain(), a && this.refreshHet())
        } else this.refresh()
    }, relabel: function () {
        w3m.texture.switchLabel(), this.refreshLabel()
    }, saveConfigToLocalStorage: function () {
        w3m.tool.saveConfigToLocalStorage(), localStorage.length && w3m.tool.toast("Saved !")
    }, recoverConfigFromLocalStorage: function () {
        w3m.tool.recoverConfigFromLocalStorage(), this.refreshSidebox();
        for (var e in w3m.mol) w3m.tool.updateMolRepMap(e), w3m.tool.updateMolColorMapMain(e), w3m.tool.updateMolColorMapHet(e), w3m.tool.updateMolLabelAreaMap(e), w3m.tool.updateMolLabelContentMap(e);
        this.reshade(), this.refresh()
    }, clearLocalStorage: function () {
        w3m.tool.clearLocalStorage(), w3m.tool.toast("Cleared !")
    }, recoverDefaultConfig: function () {
        w3m.tool.recoverConfigFromDefault(), this.refreshSidebox();
        for (var e in w3m.mol) w3m.tool.updateMolRepMap(e), w3m.tool.updateMolColorMapMain(e), w3m.tool.updateMolColorMapHet(e), w3m.tool.updateMolLabelAreaMap(e), w3m.tool.updateMolLabelContentMap(e);
        this.reshade(), this.refresh()
    }, highlight: function (e, r, t, a) {
        var o = w3m.mol[e], t = t || w3m_find_first(o.residue[r]), a = a || w3m_find_last(o.residue[r]);
        w3m.tool.highlightSegment(e, r, t, a, w3m.ADD), this.refreshGeometry()
    }, highlightRemove: function (e, r, t, a) {
        var o = w3m.mol[e], t = t || w3m_find_first(o.residue[r]), a = a || w3m_find_last(o.residue[r]);
        w3m.tool.highlightSegment(e, r, t, a, w3m.REMOVE), this.refreshGeometry()
    }, highlightToggle: function (e, r, t, a) {
        var o = w3m.mol[e], t = t || w3m_find_first(o.residue[r]), a = a || w3m_find_last(o.residue[r]);
        w3m.tool.highlightSegment(e, r, t, a, w3m.TOGGLE), this.refreshGeometry()
    }, hide: function (e, r, t, a) {
        var o = w3m.mol[e], t = t || w3m_find_first(o.residue[r]), a = a || w3m_find_last(o.residue[r]);
        w3m.tool.hideSegment(e, r, t, a, w3m.ADD), this.refresh()
    }, hideRemove: function (e, r, t, a) {
        var o = w3m.mol[e], t = t || w3m_find_first(o.residue[r]), a = a || w3m_find_last(o.residue[r]);
        w3m.tool.hideSegment(e, r, t, a, w3m.REMOVE), this.refresh()
    }, hideToggle: function (e, r, t, a) {
        var o = w3m.mol[e], t = t || w3m_find_first(o.residue[r]), a = a || w3m_find_last(o.residue[r]);
        w3m.tool.hideSegment(e, r, t, a, w3m.TOGGLE), this.refresh()
    }, addFragment: function (e, r, t, a) {
        return w3m.tool.addFragment(e || null, r || null, t || null, a || null)
    }, updateFragment: function (e) {
        w3m.tool.updateFragment(e), this.refresh()
    }, resetFragment: function (e) {
        w3m.tool.resetFragment(e), this.refresh()
    }, deleteFragment: function (e) {
        w3m.tool.deleteFragment(e), this.refresh()
    }, showResidueDetail: function (e, r, t) {
        var a = w3m.mol[e];
        w3m_isset(a.residue_detail[r]) || (a.residue_detail[r] = []);
        var o;
        (o = a.residue_detail[r].indexOf(t)) >= 0 ? a.residue_detail[r].splice(o, 1, 0) : a.residue_detail[r].push(t), w3m.config.label_ball_and_rod ? this.refresh() : this.refreshGeometry()
    }, loadPDB: function (e) {
        4 == e.length && this.update(e)
    }, loadPDBFromFile: function (e) {
        this.update(e)
    }, toggleFullscreen: function () {
        if (w3m_check_fullscreen()) document.exitFullscreen ? document.exitFullscreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.webkitCancelFullScreen ? document.webkitCancelFullScreen() : document.msExitFullscreen && document.msExitFullscreen(); else {
            var e = document.documentElement;
            e.requestFullscreen ? e.requestFullscreen() : e.mozRequestFullScreen ? e.mozRequestFullScreen() : e.webkitRequestFullScreen ? e.webkitRequestFullScreen() : e.msRequestFullscreen && e.msRequestFullscreen()
        }
    }, toggleRotate: function (e) {
        if (w3m_array_has(["x", "y", "z"], e)) {
            var r = "rotate_" + e;
            w3m.global[r] = !w3m.global[r], w3m.tool.recycle()
        }
    }, help: function (e) {
        var e = w3m_isset(e) ? "#" + e : "";
        window.open(w3m_official + "help.html" + e)
    }, config: function (e, r) {
        return w3m_isset(r) ? w3m.config[e] = r : w3m.config[e]
    }, rgb: function (e, r) {
        return w3m_isset(r) ? w3m.rgb[e] = r : w3m.rgb[e]
    }, refresh: function () {
        w3m.tool.background(), w3m.tool.pipeline()
    }, pdb: function (e) {
        this.update(e)
    }, representation: function (e, r) {
        switch (e) {
            case w3m.ATOM_MAIN:
                w3m.api.switchRepModeMain(r);
                break;
            case w3m.ATOM_HET:
                w3m.api.switchRepModeHet(r)
        }
    }, color: function (e, r) {
        switch (e) {
            case w3m.ATOM_MAIN:
                w3m.api.switchColorModeMain(r);
                break;
            case w3m.ATOM_HET:
                w3m.api.switchColorModeHet(r)
        }
    }, label_area: function (e, r) {
        switch (e) {
            case w3m.ATOM_MAIN:
                w3m.api.switchLabelAreaMain(r);
                break;
            case w3m.ATOM_HET:
                w3m.api.switchLabelAreaHet(r)
        }
    }, label_content: function (e, r) {
        switch (e) {
            case w3m.ATOM_MAIN:
                w3m.api.switchLabelContentMain(r);
                break;
            case w3m.ATOM_HET:
                w3m.api.switchLabelContentHet(r)
        }
    }, fragment_add: function (e, r, t) {
        var a = w3m.tool.addFragment(w3m.global.mol, e || null, r || null, t || null);
        return w3m.ui.fragment.sidebox(), this.refresh(), a
    }, fragment_set: function (e, r, t, a, o, n) {
        var i = w3m.global.fragment[e];
        i.rep = r, i.color = t, i.label_area = a, i.label_content = o, this.color(1300 + e, n || w3m.rgb[1]), w3m.ui.fragment.update(e)
    }, fragment_remove: function (e) {
        w3m.tool.deleteFragment(e), w3m.ui.fragment.sidebox(), this.refresh()
    }, highlight_add: function (e, r, t) {
        this.highlight(w3m.global.mol, e, r, t)
    }, highlight_remove: function (e, r, t) {
        this.highlightRemove(w3m.global.mol, e, r, t)
    }, hide_add: function (e, r, t) {
        this.hide(w3m.global.mol, e, r, t)
    }, hide_remove: function (e, r, t) {
        this.hideRemove(w3m.global.mol, e, r, t)
    }, picked: function () {
        var e = w3m.global.picked_atom;
        return w3m.global.picked_atom = null, e
    }, atom: function (e) {
        return w3m.mol[w3m.global.mol].getAtomEx(e)
    }
};
var w3m_$ = function (e) {
        return document.getElementById(e)
    }, w3m_$$ = function (e) {
        return document.getElementsByClassName(e)
    }, w3m_pass = function () {
    }, w3m_event = function () {
        return window.event || arguments.callee.caller.arguments[0]
    }, w3m_clear_array = function (e) {
        []
    }, w3m_clear_object = function (e) {
        ({})
    }, w3m_trim = function (e) {
        return e.replace(/^\s+/, "").replace(/\s+$/, "")
    }, w3m_equal = function (e, r) {
        return Array.isArray(e) && Array.isArray(r) ? w3m_array_equal(e, r) : e == r
    }, w3m_array_push = function (e, r) {
        Array.prototype.push.apply(e, r)
    }, w3m_array_merge = function () {
        return Array.prototype.concat.apply([], arguments)
    }, w3m_array_add = function (e, r) {
        e.indexOf(r) >= 0 || e.push(r)
    }, w3m_array_remove = function (e, r) {
        var t = e.indexOf(r);
        t >= 0 && e.splice(t, 1)
    }, w3m_array_toggle = function (e, r) {
        var t = e.indexOf(r);
        t >= 0 ? e.splice(t, 1) : e.push(r)
    }, w3m_array_has = function (e, r) {
        return e.indexOf(r) >= 0
    }, w3m_array_sort = function (e) {
        return e.sort(function (e, r) {
            return e - r
        })
    }, w3m_array_equal = function (e, r) {
        if (!Array.isArray(e) || !Array.isArray(r)) return !1;
        if (e.length != r.length) return !1;
        for (var t = !0, a = 0, o = e.length; a < o; a++) if (e[a] != r[a]) {
            t = !1;
            break
        }
        return t
    }, w3m_object2array = function (e) {
        var r = [];
        for (var t in e) r.push(e[t]);
        return r
    }, w3m_sub = function (e, r, t) {
        return w3m_trim(t ? e.substring(r - 1, t) : e.charAt(r - 1))
    }, w3m_capfirst = function (e) {
        return e[0].toUpperCase() + e.slice(1)
    }, w3m_caplast = function (e) {
        var r = e.length - 1;
        return e.slice(0, r) + e[r].toUpperCase()
    }, w3m_capword = function (e) {
        return e.toLowerCase().replace(/\b([\w|']+)\b/g, function (e) {
            return e.replace(e.charAt(0), e.charAt(0).toUpperCase())
        })
    }, w3m_start_with = function (e, r) {
        return 0 == e.indexOf(r)
    }, w3m_isset = function (e) {
        return void 0 !== e
    }, w3m_isempty = function (e) {
        for (var r in e) if (e.hasOwnProperty(r)) return !1;
        return !0
    }, w3m_copy = function (e) {
        return Array.isArray(e) ? e.slice(0) : e
    }, w3m_show = function (e, r) {
        e.style.display = r || "block"
    }, w3m_hide = function (e) {
        e.style.display = "none"
    }, w3m_toggle_display = function (e) {
        e.style.display = "" == e.style.display || "none" == e.style.display ? "block" : "none"
    }, w3m_toggle_html = function (e, r, t) {
        e.innerHTML = e.innerHTML == r ? t : r
    }, w3m_is_hidden = function (e) {
        return "" == e.style.display || "none" == e.style.display
    }, w3m_html = function (e, r) {
        return w3m_isset(r) ? e.innerHTML = r : e.innerHTML
    }, w3m_attr = function (e, r, t) {
        return w3m_isset(t) ? e.setAttribute(r, t) : e.getAttribute(r)
    }, w3m_style = function (e, r, t) {
        return w3m_isset(t) ? e.style[r] = t : e.style[r]
    }, w3m_width = function (e, r) {
        return w3m_isset(r) && !isNaN(r) ? e.style.width = r : e.clientWidth
    }, w3m_width_adjust = function (e) {
        e.style.width = e.clientWidth + "px"
    }, w3m_height = function (e, r) {
        return w3m_isset(r) && !isNaN(r) ? e.style.height = r : e.clientHeight
    }, w3m_height_adjust = function (e) {
        e.style.height = e.clientHeight + "px"
    }, w3m_add_class = function (e, r) {
        e.classList.add(r)
    }, w3m_remove_class = function (e, r) {
        e.classList.remove(r)
    }, w3m_toggle_class = function (e, r) {
        e.classList.toggle(r)
    }, w3m_toggle = function (e, r, t, a) {
        for (var o = document.getElementById(e), n = document.getElementsByClassName(r), i = 0, s = n.length; i < s; i++) {
            a(n.item(i))
        }
        t(o)
    }, w3m_node_create = function (e) {
        return document.createElement(e)
    }, w3m_node_remove = function (e) {
        e.parentNode.removeChild(e)
    }, w3m_node_append = function (e, r) {
        e.appendChild(r)
    }, w3m_father = function (e) {
        return e.parentNode
    }, w3m_child = function (e) {
        return e.childNodes
    }, w3m_last_brother = function (e) {
        for (var r = e.previousSibling; r && 3 == r.nodeType;) r = r.previousSibling;
        return r
    }, w3m_next_brother = function (e) {
        for (var r = e.nextSibling; r && 3 == r.nodeType;) r = r.nextSibling;
        return r
    }, w3m_ischild = function (e, r) {
        return e.contains ? e != r && e.contains(r) : !(16 & e.compareDocumentPosition(r))
    }, w3m_ban = function (e, r) {
        e.addEventListener(r, function (e) {
            var r = e || window.event;
            return r.preventDefault && r.preventDefault(), r.returnValue && (r.returnValue = !1), !1
        })
    }, w3m_clear = function (e) {
        for (var r in e) delete e[r]
    }, w3m_time = function () {
        return Date.now ? Date.now() : (new Date).getTime()
    },
    w3m_cycle_start = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame,
    w3m_cycle_stop = window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame || window.msRequestAnimationFrame,
    w3m_find_first = function (e, r) {
        for (var r = !!w3m_isset(r) && r, t = e.length, a = 0; a < t; a++) if (e[a]) return r ? e[a] : a;
        return null
    }, w3m_find_last = function (e, r) {
        for (var r = !!w3m_isset(r) && r, t = e.length, a = t - 1; a > -1; a--) if (e[a]) return r ? e[a] : a;
        return null
    }, w3m_find_object_first = function (e, r) {
        var r = !!w3m_isset(r) && r;
        for (var t in e) if (e[t]) return r ? e[t] : t;
        return null
    }, w3m_find_object_last = function (e, r) {
        var r = !!w3m_isset(r) && r, t = null;
        for (var a in e) t = a;
        return r ? e[t] : t
    }, w3m_split_by_undefined = function (e, r, t) {
        for (var a = [], r = r || 0, t = t || e.length - 1, o = r, n = !0, i = r; i <= t; i++) w3m_isset(e[i]) ? n = !1 : (n || (a.push([o, i - 1]), n = !0), o = i + 1);
        return n || a.push([o, t]), a
    }, w3m_split_by_difference = function (e, r, t) {
        for (var a = [], r = r || 0, t = t || e.length - 1, o = r, n = e[r], i = !0, s = r; s <= t; s++) w3m_isset(e[s]) ? (i = !1, e[s] != n && (a.push([o, s - 1, n]), o = s, n = e[s])) : (i || (a.push([o, s - 1, n]), i = !0), o = s + 1, n = e[s + 1]);
        return i || a.push([o, t, e[o]]), a
    }, w3m_color_normal_2_rgb = function (e) {
        return 3 == e.length ? [Math.round(255 * e[0]), Math.round(255 * e[1]), Math.round(255 * e[2])] : [Math.round(255 * e[0]), Math.round(255 * e[1]), Math.round(255 * e[2]), e[3]]
    }, w3m_color_rgb_2_normal = function (e) {
        return 3 == e.length ? [e[0] / 255, e[1] / 255, e[2] / 255] : [e[0] / 255, e[1] / 255, e[2] / 255, e[3]]
    }, w3m_time = function () {
        return (new Date).getTime()
    }, w3m_copy_object = function (e) {
        var r = {};
        for (var t in e) {
            var a = e[t];
            Array.isArray(a) ? r[t] = a.slice(0) : r[t] = a
        }
        return r
    }, w3m_check_fullscreen = function () {
        return document.fullscreen || document.mozFullScreen || document.webkitIsFullScreen || document.msFullscreenElement
    }, w3m_crossline = function (e) {
        return e.toString().split("\n").slice(1, -1).join("\n") + "\n"
    };
w3m.url = ["https://files.rcsb.org/view/", "https://www.rcsb.org/pdb/files/"], w3m.dict = {
    amino_acid: ["ala", "gly", "ile", "leu", "pro", "val", "phe", "trp", "tyr", "asp", "glu", "arg", "his", "lys", "ser", "thr", "cys", "met", "asn", "gln"],
    nucleic_acid: ["a", "da", "c", "dc", "g", "dg", "u", "dt"],
    cap_last: ["da", "dc", "dg", "dt"],
    special_element: ["fe", "cu", "co", "zn", "mn", "k", "na", "ca", "mg", "al", "i"],
    label: ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "'", "-", ".", "Å", "π", "°", "'", '"', "²"],
    label_st: {},
    hydrophobicity: {
        arg: 0,
        lys: .06,
        asn: .11,
        asp: .11,
        gln: .11,
        glu: .11,
        his: .14,
        pro: .32,
        tyr: .35,
        trp: .4,
        ser: .41,
        thr: .42,
        gly: .46,
        ala: .7,
        met: .71,
        cys: .78,
        phe: .81,
        leu: .92,
        val: .96,
        ile: 1
    }
}, w3m.glsl = {geometry: {}, label: {}}, w3m.glsl.geometry.vertex = w3m_crossline(function () {
}), w3m.glsl.geometry.fragment = w3m_crossline(function () {
}), w3m.glsl.label.vertex = w3m_crossline(function () {
}), w3m.glsl.label.fragment = w3m_crossline(function () {
}), w3m.html = w3m_crossline(function () {
}), w3m.structure = {
    info: {
        ala: ["A", "Alanine ( Ala )"],
        gly: ["G", "Glycine ( Gly )"],
        ile: ["I", "Isoleucine ( Ile )"],
        leu: ["L", "Leucine ( Leu )"],
        pro: ["P", "Proline ( Pro )"],
        val: ["V", "Valine ( Val )"],
        phe: ["F", "Phenylalanine ( Phe )"],
        trp: ["W", "Tryptophan ( Trp )"],
        tyr: ["Y", "Tyrosine ( Tyr )"],
        asp: ["D", "Aspartic Acid ( Asp )"],
        glu: ["E", "Glutamic Acid ( Glu )"],
        arg: ["R", "Arginine ( Arg )"],
        his: ["H", "Histidine ( His )"],
        lys: ["K", "Lysine ( Lys )"],
        ser: ["S", "Serine ( Ser )"],
        thr: ["T", "Threonine ( Thr )"],
        cys: ["C", "Cysteine ( Cys )"],
        met: ["M", "Methionine ( Met )"],
        asn: ["N", "Asparagine ( Asn )"],
        gln: ["Q", "Glutamine ( Gln )"],
        a: ["A", "Adenosine 5'-monophosphate ( AMP )"],
        da: ["DA", "Deoxyadenosine 5'-monophosphate ( dAMP )"],
        c: ["C", "Cytidine 5'-monophosphate ( CMP )"],
        dc: ["DC", "Deoxycytidine 5'-monophosphate ( dCMP )"],
        g: ["G", "Guanosine 5'-monophosphate ( GMP )"],
        dg: ["DG", "Deoxyguanosine 5'-monophosphate ( dGMP )"],
        u: ["U", "Uridine 5'-monophosphate ( UMP )"],
        dt: ["DT", "Deoxythymidine 5'-monophosphate ( dTMP )"]
    },
    enum: {
        ala: ["n", "ca", "c", "o", "cb"],
        gly: ["n", "ca", "c", "o"],
        ile: ["n", "ca", "c", "o", "cb", "cg1", "cg2", "cd1"],
        leu: ["n", "ca", "c", "o", "cb", "cg", "cd1", "cd2"],
        pro: ["n", "ca", "c", "o", "cb", "cg", "cd"],
        val: ["n", "ca", "c", "o", "cb", "cg1", "cg2"],
        phe: ["n", "ca", "c", "o", "cb", "cg", "cd1", "cd2", "ce1", "ce2", "cz"],
        trp: ["n", "ca", "c", "o", "cb", "cg", "cd1", "cd2", "ne1", "ce2", "ce3", "cz2", "cz3", "ch2"],
        tyr: ["n", "ca", "c", "o", "cb", "cg", "cd1", "cd2", "ce1", "ce2", "cz", "oh"],
        asp: ["n", "ca", "c", "o", "cb", "cg", "od1", "od2"],
        glu: ["n", "ca", "c", "o", "cb", "cg", "cd", "oe1", "oe2"],
        arg: ["n", "ca", "c", "o", "cb", "cg", "cd", "ne", "cz", "nh1", "nh2"],
        his: ["n", "ca", "c", "o", "cb", "cg", "nd1", "cd2", "ce1", "ne2"],
        lys: ["n", "ca", "c", "o", "cb", "cg", "cd", "ce", "nz"],
        ser: ["n", "ca", "c", "o", "cb", "og"],
        thr: ["n", "ca", "c", "o", "cb", "og1", "cg2"],
        cys: ["n", "ca", "c", "o", "cb", "sg"],
        met: ["n", "ca", "c", "o", "cb", "cg", "sd", "ce"],
        asn: ["n", "ca", "c", "o", "cb", "cg", "od1", "nd2"],
        gln: ["n", "ca", "c", "o", "cb", "cg", "cd", "oe1", "ne2"],
        a: ["p", "op1", "op2", "o5'", "c5'", "c4'", "o4'", "c3'", "o3'", "c2'", "o2'", "c1'", "n9", "c8", "n7", "c5", "c6", "n6", "n1", "c2", "n3", "c4"],
        da: ["p", "op1", "op2", "o5'", "c5'", "c4'", "o4'", "c3'", "o3'", "c2'", "c1'", "n9", "c8", "n7", "c5", "c6", "n6", "n1", "c2", "n3", "c4"],
        c: ["p", "op1", "op2", "o5'", "c5'", "c4'", "o4'", "c3'", "o3'", "c2'", "o2'", "c1'", "n1", "c2", "o2", "n3", "c4", "n4", "c5", "c6"],
        dc: ["p", "op1", "op2", "o5'", "c5'", "c4'", "o4'", "c3'", "o3'", "c2'", "c1'", "n1", "c2", "o2", "n3", "c4", "n4", "c5", "c6"],
        g: ["p", "op1", "op2", "o5'", "c5'", "c4'", "o4'", "c3'", "o3'", "c2'", "o2'", "c1'", "n9", "c8", "n7", "c5", "c6", "o6", "n1", "c2", "n2", "n3", "c4"],
        dg: ["p", "op1", "op2", "o5'", "c5'", "c4'", "o4'", "c3'", "o3'", "c2'", "c1'", "n9", "c8", "n7", "c5", "c6", "o6", "n1", "c2", "n2", "n3", "c4"],
        u: ["p", "op1", "op2", "o5'", "c5'", "c4'", "o4'", "c3'", "o3'", "c2'", "o2'", "c1'", "n1", "c2", "o2", "n3", "c4", "o4", "c5", "c6"],
        dt: ["p", "op1", "op2", "o5'", "c5'", "c4'", "o4'", "c3'", "o3'", "c2'", "c1'", "n1", "c2", "o2", "n3", "c4", "o4", "c5", "c7", "c6"]
    },
    pair: {
        ala: ["n", "ca", "ca", "c", "c", "o", "ca", "cb"],
        gly: ["n", "ca", "ca", "c", "c", "o"],
        ile: ["n", "ca", "ca", "c", "c", "o", "ca", "cb", "cb", "cg1", "cb", "cg2", "cg1", "cd1"],
        leu: ["n", "ca", "ca", "c", "c", "o", "ca", "cb", "cb", "cg", "cg", "cd1", "cg", "cd2"],
        pro: ["n", "ca", "ca", "c", "c", "o", "ca", "cb", "cb", "cg", "cg", "cd", "cd", "n"],
        val: ["n", "ca", "ca", "c", "c", "o", "ca", "cb", "cb", "cg1", "cb", "cg2"],
        phe: ["n", "ca", "ca", "c", "c", "o", "ca", "cb", "cb", "cg", "cg", "cd1", "cg", "cd2", "cd1", "ce1", "cd2", "ce2", "ce1", "cz", "ce2", "cz"],
        trp: ["n", "ca", "ca", "c", "c", "o", "ca", "cb", "cb", "cg", "cg", "cd1", "cg", "cd2", "cd1", "ne1", "ne1", "ce2", "cd2", "ce2", "cd2", "ce3", "ce2", "cz2", "ce3", "cz3", "cz2", "ch2", "cz3", "ch2"],
        tyr: ["n", "ca", "ca", "c", "c", "o", "ca", "cb", "cb", "cg", "cg", "cd1", "cg", "cd2", "cd1", "ce1", "cd2", "ce2", "ce1", "cz", "ce2", "cz", "cz", "oh"],
        asp: ["n", "ca", "ca", "c", "c", "o", "ca", "cb", "cb", "cg", "cg", "od1", "cg", "od2"],
        glu: ["n", "ca", "ca", "c", "c", "o", "ca", "cb", "cb", "cg", "cg", "cd", "cd", "oe1", "cd", "oe2"],
        arg: ["n", "ca", "ca", "c", "c", "o", "ca", "cb", "cb", "cg", "cg", "cd", "cd", "ne", "ne", "cz", "cz", "nh1", "cz", "nh2"],
        his: ["n", "ca", "ca", "c", "c", "o", "ca", "cb", "cb", "cg", "cg", "nd1", "cg", "cd2", "nd1", "ce1", "cd2", "ne2", "ce1", "ne2"],
        lys: ["n", "ca", "ca", "c", "c", "o", "ca", "cb", "cb", "cg", "cg", "cd", "cd", "ce", "ce", "nz"],
        ser: ["n", "ca", "ca", "c", "c", "o", "ca", "cb", "cb", "og"],
        thr: ["n", "ca", "ca", "c", "c", "o", "ca", "cb", "cb", "og1", "cb", "cg2"],
        cys: ["n", "ca", "ca", "c", "c", "o", "ca", "cb", "cb", "sg"],
        met: ["n", "ca", "ca", "c", "c", "o", "ca", "cb", "cb", "cg", "cg", "sd", "sd", "ce"],
        asn: ["n", "ca", "ca", "c", "c", "o", "ca", "cb", "cb", "cg", "cg", "od1", "cg", "nd2"],
        gln: ["n", "ca", "ca", "c", "c", "o", "ca", "cb", "cb", "cg", "cg", "cd", "cd", "oe1", "cd", "ne2"],
        a: ["p", "op1", "p", "op2", "p", "o5'", "o5'", "c5'", "c5'", "c4'", "c4'", "o4'", "c4'", "c3'", "c3'", "o3'", "c3'", "c2'", "c2'", "o2'", "c2'", "c1'", "c1'", "o4'", "c1'", "n9", "n9", "c8", "c8", "n7", "n7", "c5", "c5", "c6", "c6", "n6", "c6", "n1", "n1", "c2", "c2", "n3", "n3", "c4", "c4", "c5", "c4", "n9"],
        da: ["p", "op1", "p", "op2", "p", "o5'", "o5'", "c5'", "c5'", "c4'", "c4'", "o4'", "c4'", "c3'", "c3'", "o3'", "c3'", "c2'", "c2'", "c1'", "c1'", "o4'", "c1'", "n9", "n9", "c8", "c8", "n7", "n7", "c5", "c5", "c6", "c6", "n6", "c6", "n1", "n1", "c2", "c2", "n3", "n3", "c4", "c4", "c5", "c4", "n9"],
        c: ["p", "op1", "p", "op2", "p", "o5'", "o5'", "c5'", "c5'", "c4'", "c4'", "o4'", "c4'", "c3'", "c3'", "o3'", "c3'", "c2'", "c2'", "o2'", "c2'", "c1'", "c1'", "o4'", "c1'", "n1", "n1", "c2", "c2", "o2", "c2", "n3", "n3", "c4", "c4", "n4", "c4", "c5", "c5", "c6", "c6", "n1"],
        dc: ["p", "op1", "p", "op2", "p", "o5'", "o5'", "c5'", "c5'", "c4'", "c4'", "o4'", "c4'", "c3'", "c3'", "o3'", "c3'", "c2'", "c2'", "c1'", "c1'", "o4'", "c1'", "n1", "n1", "c2", "c2", "o2", "c2", "n3", "n3", "c4", "c4", "n4", "c4", "c5", "c5", "c6", "c6", "n1"],
        g: ["p", "op1", "p", "op2", "p", "o5'", "o5'", "c5'", "c5'", "c4'", "c4'", "o4'", "c4'", "c3'", "c3'", "o3'", "c3'", "c2'", "c2'", "o2'", "c2'", "c1'", "c1'", "o4'", "c1'", "n9", "n9", "c8", "c8", "n7", "n7", "c5", "c5", "c6", "c6", "o6", "c6", "n1", "n1", "c2", "c2", "n2", "c2", "n3", "n3", "c4", "c4", "c5", "c4", "n9"],
        dg: ["p", "op1", "p", "op2", "p", "o5'", "o5'", "c5'", "c5'", "c4'", "c4'", "o4'", "c4'", "c3'", "c3'", "o3'", "c3'", "c2'", "c2'", "c1'", "c1'", "o4'", "c1'", "n9", "n9", "c8", "c8", "n7", "n7", "c5", "c5", "c6", "c6", "o6", "c6", "n1", "n1", "c2", "c2", "n2", "c2", "n3", "n3", "c4", "c4", "c5", "c4", "n9"],
        u: ["p", "op1", "p", "op2", "p", "o5'", "o5'", "c5'", "c5'", "c4'", "c4'", "o4'", "c4'", "c3'", "c3'", "o3'", "c3'", "c2'", "c2'", "o2'", "c2'", "c1'", "c1'", "o4'", "c1'", "n1", "n1", "c2", "c2", "o2", "c2", "n3", "n3", "c4", "c4", "o4", "c4", "c5", "c5", "c6", "c6", "n1"],
        dt: ["p", "op1", "p", "op2", "p", "o5'", "o5'", "c5'", "c5'", "c4'", "c4'", "o4'", "c4'", "c3'", "c3'", "o3'", "c3'", "c2'", "c2'", "c1'", "c1'", "o4'", "c1'", "n1", "n1", "c2", "c2", "o2", "c2", "n3", "n3", "c4", "c4", "o4", "c4", "c5", "c5", "c7", "c5", "c6", "c6", "n1"]
    },
    bridge: {amino_acid: ["c", "n"], nucleic_acid: ["o3'", "p"]},
    backbone: {amino_acid: ["n", "ca", "c"], nucleic_acid: ["p", "o5'", "c5'", "c4'", "c3'", "o3'"]},
    residue: {amino_acid: "ca", nucleic_acid: "p", nucleic_acid_5_end_replace: "o5'", nucleic_acid_3_end_push: "o3'"},
    chain: {amino_acid: "n", nucleic_acid: "o5'"},
    normal: {
        amino_acid: ["c", "o"],
        a: ["c5'", "n1"],
        da: ["c5'", "n1"],
        c: ["c5'", "n3"],
        dc: ["c5'", "n3"],
        g: ["c5'", "n1"],
        dg: ["c5'", "n1"],
        u: ["c5'", "n3"],
        dt: ["c5'", "n3"]
    },
    ssbond: ["ca", "sg"],
    main_chain: {amino_acid: ["n", "ca", "c"], nucleic_acid: ["p", "o5'", "c5'", "c4'", "c3'", "o3'"]},
    main_chain_tee: {
        ala: ["c", "ca"],
        gly: ["c"],
        ile: ["c", "ca"],
        leu: ["c", "ca"],
        pro: ["c", "ca", "n"],
        val: ["c", "ca"],
        phe: ["c", "ca"],
        trp: ["c", "ca"],
        tyr: ["c", "ca"],
        asp: ["c", "ca"],
        glu: ["c", "ca"],
        arg: ["c", "ca"],
        his: ["c", "ca"],
        lys: ["c", "ca"],
        ser: ["c", "ca"],
        thr: ["c", "ca"],
        cys: ["c", "ca"],
        met: ["c", "ca"],
        asn: ["c", "ca"],
        gln: ["c", "ca"],
        a: ["p", "c4'", "c3'"],
        da: ["p", "c4'", "c3'"],
        c: ["p", "c4'", "c3'"],
        dc: ["p", "c4'", "c3'"],
        g: ["p", "c4'", "c3'"],
        dg: ["p", "c4'", "c3'"],
        u: ["p", "c4'", "c3'"],
        dt: ["p", "c4'", "c3'"]
    },
    sub_chain: {
        ala: [],
        gly: [],
        ile: ["ca", "cb", "cg1", "cd1"],
        leu: ["ca", "cb", "cg", "cd1"],
        pro: ["ca", "cb", "cg", "cd", "n"],
        val: ["ca", "cb", "cg1"],
        phe: ["ca", "cb", "cg", "cd1", "ce1", "cz", "ce2", "cd2", "cg"],
        trp: ["ca", "cb", "cg", "cd1", "ne1", "ce2", "cz2", "ch2", "cz3", "ce3", "cd2", "cg"],
        tyr: ["ca", "cb", "cg", "cd1", "ce1", "cz", "ce2", "cd2", "cg"],
        asp: ["ca", "cb", "cg", "od1"],
        glu: ["ca", "cb", "cg", "cd", "oe1"],
        arg: ["ca", "cb", "cg", "cd", "ne", "cz", "nh1"],
        his: ["ca", "cb", "cg", "nd1", "ce1", "ne2", "cd2", "cg"],
        lys: ["ca", "cb", "cg", "cd", "ce", "nz"],
        ser: ["ca", "cb", "og"],
        thr: ["ca", "cb", "og1"],
        cys: ["ca", "cb", "sg"],
        met: ["ca", "cb", "cg", "sd", "ce"],
        asn: ["ca", "cb", "cg", "od1"],
        gln: ["ca", "cb", "cg", "cd", "oe1"],
        a: ["c1'", "n9", "c4", "n3", "c2", "n1", "c6", "c5", "n7", "c8", "n9"],
        da: ["c1'", "n9", "c4", "n3", "c2", "n1", "c6", "c5", "n7", "c8", "n9"],
        c: ["c1'", "n1", "c2", "n3", "c4", "c5", "c6", "n1"],
        dc: ["c1'", "n1", "c2", "n3", "c4", "c5", "c6", "n1"],
        g: ["c1'", "n9", "c4", "n3", "c2", "n1", "c6", "c5", "n7", "c8", "n9"],
        dg: ["c1'", "n9", "c4", "n3", "c2", "n1", "c6", "c5", "n7", "c8", "n9"],
        u: ["c1'", "n1", "c2", "n3", "c4", "c5", "c6", "n1"],
        dt: ["c1'", "n1", "c2", "n3", "c4", "c5", "c6", "n1"],
        amino_acid: [],
        nucleic_acid: ["c3'", "c2'", "c1'", "o4'", "c4'"]
    },
    sub_chain_tee: {
        ala: [],
        gly: [],
        ile: ["cb"],
        leu: ["cg"],
        pro: [],
        val: ["cb"],
        phe: ["cg"],
        trp: ["cg", "ce2", "cd2"],
        tyr: ["cg", "cz"],
        asp: ["cg"],
        glu: ["cd"],
        arg: ["cz"],
        his: ["cg"],
        lys: [],
        ser: [],
        thr: ["cb"],
        cys: [],
        met: [],
        asn: ["cg"],
        gln: ["cd"],
        a: ["n9", "c4", "c6", "c5"],
        da: ["n9", "c4", "c6", "c5"],
        c: ["n1", "c2", "c4"],
        dc: ["n1", "c2", "c4"],
        g: ["n9", "c4", "c2", "c6", "c5"],
        dg: ["n9", "c4", "c2", "c6", "c5"],
        u: ["n1", "c2", "c4"],
        dt: ["n1", "c2", "c4", "c5"],
        amino_acid: [],
        nucleic_acid: ["c1'", "c4'"]
    },
    sub_chain_loop: ["pro", "phe", "trp", "tyr", "his", "a", "da", "c", "dc", "g", "dg", "u", "dt", "nucleic_acid"],
    hang_link: {
        ala: [["c", "o"], ["ca", "cb"]],
        gly: [["c", "o"]],
        ile: [["c", "o"], ["cb", "cg2"]],
        leu: [["c", "o"], ["cg", "cd2"]],
        pro: [["c", "o"]],
        val: [["c", "o"], ["cb", "cg2"]],
        phe: [["c", "o"]],
        trp: [["c", "o"]],
        tyr: [["c", "o"], ["cz", "oh"]],
        asp: [["c", "o"], ["cg", "od2"]],
        glu: [["c", "o"], ["cd", "oe2"]],
        arg: [["c", "o"], ["cz", "nh2"]],
        his: [["c", "o"]],
        lys: [["c", "o"]],
        ser: [["c", "o"]],
        thr: [["c", "o"], ["cb", "cg2"]],
        cys: [["c", "o"]],
        met: [["c", "o"]],
        asn: [["c", "o"], ["cg", "nd2"]],
        gln: [["c", "o"], ["cd", "ne2"]],
        a: [["p", "op1"], ["p", "op2"], ["c6", "n6"], ["c2'", "o2'"]],
        da: [["p", "op1"], ["p", "op2"], ["c6", "n6"]],
        c: [["p", "op1"], ["p", "op2"], ["c2", "o2"], ["c4", "n4"], ["c2'", "o2'"]],
        dc: [["p", "op1"], ["p", "op2"], ["c2", "o2"], ["c4", "n4"]],
        g: [["p", "op1"], ["p", "op2"], ["c2", "n2"], ["c6", "o6"], ["c2'", "o2'"]],
        dg: [["p", "op1"], ["p", "op2"], ["c2", "n2"], ["c6", "o6"]],
        u: [["p", "op1"], ["p", "op2"], ["c2", "o2"], ["c4", "o4"], ["c2'", "o2'"]],
        dt: [["p", "op1"], ["p", "op2"], ["c2", "o2"], ["c4", "o4"], ["c5", "c7"]]
    },
    inner_link: {
        ala: [],
        gly: [],
        ile: [],
        leu: [],
        pro: [],
        val: [],
        phe: [],
        trp: [["ce2", "cd2"]],
        tyr: [],
        asp: [],
        glu: [],
        arg: [],
        his: [],
        lys: [],
        ser: [],
        thr: [],
        cys: [],
        met: [],
        asn: [],
        gln: [],
        a: [["c4", "c5"]],
        da: [["c4", "c5"]],
        c: [],
        dc: [],
        g: [["c4", "c5"]],
        dg: [["c4", "c5"]],
        u: [],
        dt: []
    }
}, w3m.rgb = {
    0: [null, null, null],
    1: [.75, .78, .79],
    2: [1, 1, 0],
    11: [.79, .41, .14],
    12: [.75, .75, .75],
    13: [.75, .75, .75],
    14: [.79, .41, .14],
    15: [.79, .41, .14],
    16: [.79, .41, .14],
    17: [.79, .41, .14],
    18: [.79, .41, .14],
    19: [.79, .41, .14],
    101: [.2, 1, .2],
    102: [1, .3, .3],
    103: [.18, .18, .93],
    104: [1, .56, 0],
    105: [.82, .82, .82],
    106: [.79, .41, .14],
    107: [1, .275, .122],
    108: [.086, .663, .318],
    109: [.02, .467, .282],
    110: [1, .945, .263],
    111: [.267, .808, .965],
    112: [.8, .643, .89],
    113: [.859, .353, .4],
    114: [.086, .522, .663],
    115: [.129, .651, .459],
    116: [.851, .714, .067],
    117: [.553, .294, .733],
    118: [.086, .663, .318],
    201: [1, .275, .122],
    202: [1, .702, .655],
    203: [.859, .353, .4],
    204: [1, .129, .129],
    205: [1, .278, .467],
    206: [.749, .141, .165],
    207: [.267, .808, .965],
    208: [.439, .953, 1],
    209: [.086, .522, .663],
    210: [.086, .663, .318],
    211: [0, .737, .071],
    212: [.129, .651, .459],
    213: [0, .898, 0],
    214: [.588, .808, .329],
    215: [.02, .467, .282],
    216: [1, .945, .263],
    217: [1, .651, .192],
    218: [.8, .643, .89],
    219: [.298, .133, .106],
    220: [.553, .294, .733],
    221: [0, .204, .447],
    222: [.851, .714, .067],
    223: [.459, .259, .4],
    224: [.231, .18, .494],
    225: [.294, .361, .769],
    226: [.886, .612, .271],
    227: [.549, .263, .337],
    228: [.667, .298, .561],
    301: [1, 0, 0],
    302: [1, 1, 0],
    303: [0, 1, 0],
    401: [.2, 1, .2],
    402: [1, .3, .3],
    403: [.18, .18, .93],
    404: [1, .56, 0],
    405: [.54, .36, .54],
    406: [.79, .41, .14],
    407: [.82, .82, .82],
    408: [.086, .522, .663],
    409: [1, .651, .192],
    410: [.298, .133, .106],
    411: [.859, .353, .4],
    412: [.86, .522, .663],
    413: [.086, .0522, .663],
    414: [.851, .714, .067],
    415: [0, 0, 0],
    416: [0, 0, .25],
    417: [0, 0, .5],
    418: [0, 0, .75],
    419: [0, 0, 1],
    420: [0, .25, 0],
    421: [0, .25, .25],
    422: [0, .25, .5],
    423: [0, .25, .75],
    424: [0, .25, 1],
    425: [0, .5, 0],
    426: [0, .5, .25],
    500: [0, .5, .5],
    501: [0, .5, .75],
    502: [0, .5, 1],
    503: [0, .75, 0],
    504: [0, .75, .25],
    505: [0, .75, .5],
    506: [0, .75, .75],
    507: [0, .75, 1],
    508: [0, 1, 0],
    509: [0, 1, .25],
    510: [0, 1, .5],
    511: [0, 1, .75],
    512: [0, 1, 1],
    513: [.25, 0, 0],
    514: [.25, 0, .25],
    515: [.25, 0, .5],
    516: [.25, 0, .75],
    517: [.25, 0, 1],
    518: [.25, .25, 0],
    519: [.25, .25, .25],
    520: [.25, .25, .5],
    521: [.25, .25, .75],
    522: [.25, .25, 1],
    523: [.25, .5, 0],
    524: [.25, .5, .25],
    525: [.25, .5, .5],
    526: [.25, .5, .75],
    527: [.25, .5, 1],
    528: [.25, .75, 0],
    529: [.25, .75, .25],
    530: [.25, .75, .5],
    531: [.25, .75, .75],
    532: [.25, .75, 1],
    533: [.25, 1, 0],
    534: [.25, 1, .25],
    535: [.25, 1, .5],
    536: [.25, 1, .75],
    537: [.25, 1, 1],
    538: [.5, 0, 0],
    539: [.5, 0, .25],
    540: [.5, 0, .5],
    541: [.5, 0, .75],
    542: [.5, 0, 1],
    543: [.5, .25, 0],
    544: [.5, .25, .25],
    545: [.5, .25, .5],
    546: [.5, .25, .75],
    547: [.5, .25, 1],
    548: [.5, .5, 0],
    549: [.5, .5, .25],
    550: [.5, .5, .5],
    551: [.5, .5, .75],
    552: [.5, .5, 1],
    553: [.5, .75, 0],
    554: [.5, .75, .25],
    555: [.5, .75, .5],
    556: [.5, .75, .75],
    557: [.5, .75, 1],
    558: [.5, 1, 0],
    559: [.5, 1, .25],
    560: [.5, 1, .5],
    561: [.5, 1, .75],
    562: [.5, 1, 1],
    563: [.75, 0, 0],
    564: [.75, 0, .25],
    565: [.75, 0, .5],
    566: [.75, 0, .75],
    567: [.75, 0, 1],
    568: [.75, .25, 0],
    569: [.75, .25, .25],
    570: [.75, .25, .5],
    571: [.75, .25, .75],
    572: [.75, .25, 1],
    573: [.75, .5, 0],
    574: [.75, .5, .25],
    575: [.75, .5, .5],
    576: [.75, .5, .75],
    577: [.75, .5, 1],
    578: [.75, .75, 0],
    579: [.75, .75, .25],
    580: [.75, .75, .5],
    581: [.75, .75, .75],
    582: [.75, .75, 1],
    583: [.75, 1, 0],
    584: [.75, 1, .25],
    585: [.75, 1, .5],
    586: [.75, 1, .75],
    587: [.75, 1, 1],
    588: [1, 0, 0],
    589: [1, 0, .25],
    590: [1, 0, .5],
    591: [1, 0, .75],
    592: [1, 0, 1],
    593: [1, .25, 0],
    594: [1, .25, .25],
    595: [1, .25, .5],
    596: [1, .25, .75],
    597: [1, .25, 1],
    598: [1, .5, 0],
    599: [1, .5, .25],
    601: [0, 0, 1],
    602: [.07, .07, 1],
    603: [.11, .11, 1],
    604: [.11, .11, 1],
    605: [.11, .11, 1],
    606: [.11, .11, 1],
    607: [.14, .14, 1],
    608: [.32, .32, 1],
    609: [.36, .36, 1],
    610: [.4, .4, 1],
    611: [.41, .41, 1],
    612: [.42, .42, 1],
    613: [.46, .46, 1],
    614: [1, .3, .3],
    615: [1, .29, .29],
    616: [1, .22, .22],
    617: [1, .19, .19],
    618: [1, .08, .08],
    619: [1, .03, .03],
    620: [1, 0, 0],
    701: [1, 0, 0],
    702: [0, 1, 0],
    703: [0, 0, 1],
    704: [1, 1, 0],
    705: [1, 0, 1],
    706: [0, 1, 1],
    707: [1, .275, .122],
    708: [.267, .808, .965],
    709: [.086, .663, .318],
    710: [1, .945, .263],
    711: [.8, .643, .89],
    712: [.282, .753, .639],
    713: [1, .776, .667],
    714: [.42, .482, .431],
    715: [.894, .62, .38],
    1e3: [1, 0, 1],
    1001: [.94, 0, 1],
    1002: [.88, 0, 1],
    1003: [.82, 0, 1],
    1004: [.76, 0, 1],
    1005: [.701, 0, 1],
    1006: [.641, 0, 1],
    1007: [.581, 0, 1],
    1008: [.521, 0, 1],
    1009: [.461, 0, 1],
    1010: [.401, 0, 1],
    1011: [.341, 0, 1],
    1012: [.281, 0, 1],
    1013: [.222, 0, 1],
    1014: [.162, 0, 1],
    1015: [.102, 0, 1],
    1016: [.042, 0, 1],
    1017: [0, .02, 1],
    1018: [0, .087, 1],
    1019: [0, .153, 1],
    1020: [0, .22, 1],
    1021: [0, .287, 1],
    1022: [0, .353, 1],
    1023: [0, .42, 1],
    1024: [0, .487, 1],
    1025: [0, .553, 1],
    1026: [0, .62, 1],
    1027: [0, .687, 1],
    1028: [0, .753, 1],
    1029: [0, .82, 1],
    1030: [0, .887, 1],
    1031: [0, .953, 1],
    1032: [0, 1, .974],
    1033: [0, 1, .888],
    1034: [0, 1, .802],
    1035: [0, 1, .716],
    1036: [0, 1, .629],
    1037: [0, 1, .543],
    1038: [0, 1, .457],
    1039: [0, 1, .371],
    1040: [0, 1, .284],
    1041: [0, 1, .198],
    1042: [0, 1, .112],
    1043: [0, 1, .026],
    1044: [.052, 1, 0],
    1045: [.127, 1, 0],
    1046: [.201, 1, 0],
    1047: [.276, 1, 0],
    1048: [.351, 1, 0],
    1049: [.425, 1, 0],
    1050: [.5, 1, 0],
    1051: [.575, 1, 0],
    1052: [.649, 1, 0],
    1053: [.724, 1, 0],
    1054: [.799, 1, 0],
    1055: [.873, 1, 0],
    1056: [.948, 1, 0],
    1057: [1, .99, 0],
    1058: [1, .957, 0],
    1059: [1, .923, 0],
    1060: [1, .89, 0],
    1061: [1, .857, 0],
    1062: [1, .823, 0],
    1063: [1, .79, 0],
    1064: [1, .757, 0],
    1065: [1, .724, 0],
    1066: [1, .69, 0],
    1067: [1, .657, 0],
    1068: [1, .624, 0],
    1069: [1, .59, 0],
    1070: [1, .557, 0],
    1071: [1, .538, 0],
    1072: [1, .52, 0],
    1073: [1, .501, 0],
    1074: [1, .483, 0],
    1075: [1, .464, 0],
    1076: [1, .446, 0],
    1077: [1, .427, 0],
    1078: [1, .408, 0],
    1079: [1, .39, 0],
    1080: [1, .371, 0],
    1081: [1, .353, 0],
    1082: [1, .334, 0],
    1083: [1, .316, 0],
    1084: [1, .297, 0],
    1085: [1, .278, 0],
    1086: [1, .26, 0],
    1087: [1, .241, 0],
    1088: [1, .223, 0],
    1089: [1, .204, 0],
    1090: [1, .186, 0],
    1091: [1, .167, 0],
    1092: [1, .149, 0],
    1093: [1, .13, 0],
    1094: [1, .111, 0],
    1095: [1, .093, 0],
    1096: [1, .074, 0],
    1097: [1, .056, 0],
    1098: [1, .037, 0],
    1099: [1, .019, 0],
    1100: [1, 0, 0],
    1201: [0, 0, 1],
    1202: [.11, .11, 1],
    1203: [.11, .11, 1],
    1204: [.14, .14, 1],
    1205: [.36, .36, 1],
    1206: [.41, .41, 1],
    1207: [.46, .46, 1],
    1208: [1, .29, .29],
    1209: [1, .03, .03]
}, w3m.color = {
    element: {
        c: 101,
        o: 102,
        n: 103,
        s: 104,
        h: 105,
        p: 106,
        fe: 107,
        cu: 108,
        co: 109,
        zn: 110,
        mn: 111,
        i: 112,
        na: 113,
        k: 114,
        ca: 115,
        mg: 116,
        al: 117,
        cl: 118
    },
    residue: {
        ala: 201,
        gly: 202,
        ile: 203,
        leu: 204,
        pro: 205,
        val: 206,
        phe: 207,
        trp: 208,
        tyr: 209,
        ser: 210,
        thr: 211,
        cys: 212,
        met: 213,
        asn: 214,
        gln: 215,
        asp: 216,
        glu: 217,
        arg: 218,
        his: 219,
        lys: 220,
        a: 221,
        c: 222,
        g: 223,
        u: 224,
        da: 225,
        dc: 226,
        dg: 227,
        dt: 228
    },
    ss: {helix: 301, sheet: 302, loop: 303},
    chain: {
        a: 401,
        b: 402,
        c: 403,
        d: 404,
        e: 405,
        f: 406,
        g: 407,
        h: 408,
        i: 409,
        j: 410,
        k: 411,
        l: 412,
        m: 413,
        n: 414,
        o: 415,
        p: 416,
        q: 417,
        r: 418,
        s: 419,
        t: 420,
        u: 421,
        v: 422,
        w: 423,
        x: 424,
        y: 425,
        z: 426,
        0: 500,
        1: 501,
        2: 502,
        3: 503,
        4: 504,
        5: 505,
        6: 506,
        7: 507,
        8: 508,
        9: 509,
        10: 510,
        11: 511,
        12: 512,
        13: 513,
        14: 514,
        15: 515,
        16: 516,
        17: 517,
        18: 518,
        19: 519,
        20: 520,
        21: 521,
        22: 522,
        23: 523,
        24: 524,
        25: 525,
        26: 526,
        27: 527,
        28: 528,
        29: 529,
        30: 530,
        31: 531,
        32: 532,
        33: 533,
        34: 534,
        35: 535,
        36: 536,
        37: 537,
        38: 538,
        39: 539,
        40: 540,
        41: 541,
        42: 542,
        43: 543,
        44: 544,
        45: 545,
        46: 546,
        47: 547,
        48: 548,
        49: 549,
        50: 550,
        51: 551,
        52: 552,
        53: 553,
        54: 554,
        55: 555,
        56: 556,
        57: 557,
        58: 558,
        59: 559,
        60: 560,
        61: 561,
        62: 562,
        63: 563,
        64: 564,
        65: 565,
        66: 566,
        67: 567,
        68: 568,
        69: 569,
        70: 570,
        71: 571,
        72: 572,
        73: 573,
        74: 574,
        75: 575,
        76: 576,
        77: 577,
        78: 578,
        79: 579,
        80: 580,
        81: 581,
        82: 582,
        83: 583,
        84: 584,
        85: 585,
        86: 586,
        87: 587,
        88: 588,
        89: 589,
        90: 590,
        91: 591,
        92: 592,
        93: 593,
        94: 594,
        95: 595,
        96: 596,
        97: 597,
        98: 598,
        99: 599
    },
    hydrophobicity: {
        arg: 601,
        lys: 602,
        asn: 603,
        asp: 604,
        gln: 605,
        glu: 606,
        his: 607,
        pro: 608,
        tyr: 609,
        trp: 610,
        ser: 611,
        thr: 612,
        gly: 613,
        ala: 614,
        met: 615,
        cys: 616,
        phe: 617,
        leu: 618,
        val: 619,
        ile: 620
    },
    rep: {
        hide: 0,
        dot: 701,
        line: 702,
        backbone: 703,
        tube: 704,
        cartoon: 705,
        putty: 706,
        cube: 707,
        strip: 708,
        railway: 709,
        ribbon: 710,
        arrow: 711,
        stick: 712,
        sphere: 713,
        ball_and_rod: 714
    }
}, w3m.geometry = {
    radius: {
        o: 1.52,
        c: 1.7,
        n: 1.55,
        s: 1.8,
        h: 1.2,
        p: 1.8,
        cu: 1.4,
        zn: 1.39,
        i: 1.98,
        na: 2.27,
        k: 2.75,
        mg: 1.73,
        cl: 1.75,
        fe: 1.73
    },
    circle: {
        n: 12,
        sin: [0, .5, .866, 1, .866, .5, 0, -.5, -.866, -1, -.866, -.5, 0],
        cos: [1, .866, .5, 0, -.5, -.866, -1, -.866, -.5, 0, .5, .866, 1]
    },
    oval: [],
    sphere_vector: [[.8506, .5257, 0], [.8506, -.5257, 0], [-.8506, .5257, 0], [-.8506, -.5257, 0], [0, .8506, .5257], [0, .8506, -.5257], [0, -.8506, .5257], [0, -.8506, -.5257], [.5257, 0, .8506], [-.5257, 0, .8506], [.5257, 0, -.8506], [-.5257, 0, -.8506], [.9794, .2017, 0], [.8547, .4035, .3264], [.8547, .4035, -.3264], [.6529, .73, .2017], [.6529, .73, -.2017], [.9794, -.2017, 0], [.8547, -.4035, .3264], [.8547, -.4035, -.3264], [.6529, -.73, .2017], [.6529, -.73, -.2017], [-.9794, .2017, 0], [-.8547, .4035, .3264], [-.8547, .4035, -.3264], [-.6529, .73, .2017], [-.6529, .73, -.2017], [-.9794, -.2017, 0], [-.8547, -.4035, .3264], [-.8547, -.4035, -.3264], [-.6529, -.73, .2017], [-.6529, -.73, -.2017], [0, .9794, .2017], [.3264, .8547, .4035], [-.3264, .8547, .4035], [.2017, .6529, .73], [-.2017, .6529, .73], [0, .9794, -.2017], [.3264, .8547, -.4035], [-.3264, .8547, -.4035], [.2017, .6529, -.73], [-.2017, .6529, -.73], [0, -.9794, .2017], [.3264, -.8547, .4035], [-.3264, -.8547, .4035], [.2017, -.6529, .73], [-.2017, -.6529, .73], [0, -.9794, -.2017], [.3264, -.8547, -.4035], [-.3264, -.8547, -.4035], [.2017, -.6529, -.73], [-.2017, -.6529, -.73], [.2017, 0, .9794], [.4035, .3264, .8547], [.4035, -.3264, .8547], [.73, .2017, .6529], [.73, -.2017, .6529], [-.2017, 0, .9794], [-.4035, .3264, .8547], [-.4035, -.3264, .8547], [-.73, .2017, .6529], [-.73, -.2017, .6529], [.2017, 0, -.9794], [.4035, .3264, -.8547], [.4035, -.3264, -.8547], [.73, .2017, -.6529], [.73, -.2017, -.6529], [-.2017, 0, -.9794], [-.4035, .3264, -.8547], [-.4035, -.3264, -.8547], [-.73, .2017, -.6529], [-.73, -.2017, -.6529], [.9341, 0, .3568], [.9341, 0, -.3568], [.5773, .5773, .5773], [.5773, .5773, -.5773], [.3568, .9341, 0], [.5773, -.5773, .5773], [.5773, -.5773, -.5773], [.3568, -.9341, 0], [-.9341, 0, .3568], [-.9341, 0, -.3568], [-.5773, .5773, .5773], [-.5773, .5773, -.5773], [-.3568, .9341, 0], [-.5773, -.5773, .5773], [-.5773, -.5773, -.5773], [-.3568, -.9341, 0], [0, .3568, .9341], [0, .3568, -.9341], [0, -.3568, .9341], [0, -.3568, -.9341]],
    sphere_link: [0, 12, 13, 0, 12, 14, 0, 13, 15, 0, 14, 16, 0, 15, 16, 1, 17, 18, 1, 17, 19, 1, 18, 20, 1, 19, 21, 1, 20, 21, 2, 22, 23, 2, 22, 24, 2, 23, 25, 2, 24, 26, 2, 25, 26, 3, 27, 28, 3, 27, 29, 3, 28, 30, 3, 29, 31, 3, 30, 31, 4, 32, 33, 4, 32, 34, 4, 33, 35, 4, 34, 36, 4, 35, 36, 5, 37, 38, 5, 37, 39, 5, 38, 40, 5, 39, 41, 5, 40, 41, 6, 42, 43, 6, 42, 44, 6, 43, 45, 6, 44, 46, 6, 45, 46, 7, 47, 48, 7, 47, 49, 7, 48, 50, 7, 49, 51, 7, 50, 51, 8, 52, 53, 8, 52, 54, 8, 53, 55, 8, 54, 56, 8, 55, 56, 9, 57, 58, 9, 57, 59, 9, 58, 60, 9, 59, 61, 9, 60, 61, 10, 62, 63, 10, 62, 64, 10, 63, 65, 10, 64, 66, 10, 65, 66, 11, 67, 68, 11, 67, 69, 11, 68, 70, 11, 69, 71, 11, 70, 71, 72, 12, 17, 72, 17, 18, 72, 18, 56, 72, 56, 55, 72, 55, 13, 72, 13, 12, 73, 12, 17, 73, 17, 19, 73, 19, 66, 73, 66, 65, 73, 65, 14, 73, 14, 12, 74, 13, 55, 74, 55, 53, 74, 53, 35, 74, 35, 33, 74, 33, 15, 74, 15, 13, 75, 14, 65, 75, 65, 63, 75, 63, 40, 75, 40, 38, 75, 38, 16, 75, 16, 14, 76, 15, 33, 76, 33, 32, 76, 32, 37, 76, 37, 38, 76, 38, 16, 76, 16, 15, 77, 18, 56, 77, 56, 54, 77, 54, 45, 77, 45, 43, 77, 43, 20, 77, 20, 18, 78, 19, 66, 78, 66, 64, 78, 64, 50, 78, 50, 48, 78, 48, 21, 78, 21, 19, 79, 20, 43, 79, 43, 42, 79, 42, 47, 79, 47, 48, 79, 48, 21, 79, 21, 20, 80, 22, 27, 80, 27, 28, 80, 28, 61, 80, 61, 60, 80, 60, 23, 80, 23, 22, 81, 22, 27, 81, 27, 29, 81, 29, 71, 81, 71, 70, 81, 70, 24, 81, 24, 22, 82, 23, 60, 82, 60, 58, 82, 58, 36, 82, 36, 34, 82, 34, 25, 82, 25, 23, 83, 24, 70, 83, 70, 68, 83, 68, 41, 83, 41, 39, 83, 39, 26, 83, 26, 24, 84, 25, 34, 84, 34, 32, 84, 32, 37, 84, 37, 39, 84, 39, 26, 84, 26, 25, 85, 28, 61, 85, 61, 59, 85, 59, 46, 85, 46, 44, 85, 44, 30, 85, 30, 28, 86, 29, 71, 86, 71, 69, 86, 69, 51, 86, 51, 49, 86, 49, 31, 86, 31, 29, 87, 30, 44, 87, 44, 42, 87, 42, 47, 87, 47, 49, 87, 49, 31, 87, 31, 30, 88, 35, 53, 88, 53, 52, 88, 52, 57, 88, 57, 58, 88, 58, 36, 88, 36, 35, 89, 40, 63, 89, 63, 62, 89, 62, 67, 89, 67, 68, 89, 68, 41, 89, 41, 40, 90, 45, 54, 90, 54, 52, 90, 52, 57, 90, 57, 59, 90, 59, 46, 90, 46, 45, 91, 50, 64, 91, 64, 62, 91, 62, 67, 91, 67, 69, 91, 69, 51, 91, 51, 50]
};
var vec2 = {
    init: function () {
        return [0, 0]
    }, negate: function (e) {
        return [-e[0], -e[1]]
    }, len: function (e) {
        return Math.sqrt(e[0] * e[0] + e[1] * e[1])
    }, setlen: function (e, r) {
        return this.scalar(e, this.unit(r))
    }, scalar: function (e, r) {
        return [e * r[0], e * r[1]]
    }, unit: function (e) {
        var r = this.len(e);
        return r > Number.EPSILON ? this.scalar(1 / r, e) : [0, 0]
    }
}, vec3 = {
    init: function () {
        return [0, 0, 0]
    }, negate: function (e) {
        return [-e[0], -e[1], -e[2]]
    }, plus: function (e, r) {
        return [e[0] + r[0], e[1] + r[1], e[2] + r[2]]
    }, minus: function (e, r) {
        return [e[0] - r[0], e[1] - r[1], e[2] - r[2]]
    }, point: function (e, r) {
        return vec3.minus(r, e)
    }, scalar: function (e, r) {
        return [e * r[0], e * r[1], e * r[2]]
    }, dot: function (e, r) {
        return e[0] * r[0] + e[1] * r[1] + e[2] * r[2]
    }, cross: function (e, r) {
        return [e[1] * r[2] - e[2] * r[1], e[2] * r[0] - e[0] * r[2], e[0] * r[1] - e[1] * r[0]]
    }, x: function (e, r) {
        return [e[0] * r[0], e[1] * r[1], e[2] * r[2]]
    }, len: function (e) {
        return Math.sqrt(e[0] * e[0] + e[1] * e[1] + e[2] * e[2])
    }, setlen: function (e, r) {
        return this.scalar(e, this.unit(r))
    }, dist: function (e, r) {
        return this.len(this.minus(e, r))
    }, mid: function (e, r) {
        return this.scalar(.5, this.plus(e, r))
    }, average: function (e) {
        var r = y = z = 0, t = e.length;
        return t ? (e.forEach(function (e) {
            r += e[0], y += e[1], z += e[2]
        }), [r / t, y / t, z / t]) : null
    }, cos: function (e, r, t) {
        return t ? this.dot(e, r) : this.dot(e, r) / this.len(e) / this.len(r)
    }, rad: function (e, r, t) {
        var a = t ? this.dot(e, r) : this.dot(e, r) / this.len(e) / this.len(r);
        return Math.acos(math.clamp(a, [-1, 1]))
    }, unit: function (e) {
        var r = this.len(e);
        return r > Number.EPSILON ? this.scalar(1 / r, e) : [0, 0, 0]
    }, step: function (e, r, t) {
        return this.plus(this.scalar(1 - e, r), this.scalar(e, t))
    }
}, mat4 = {
    init: function () {
        return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    }, diag: function (e) {
        return [e, 0, 0, 0, 0, e, 0, 0, 0, 0, e, 0, 0, 0, 0, e]
    }, x: function (e, r) {
        for (var t = [], a = 0; a < 4; a++) for (var o = 0; o < 4; o++) t[a + 4 * o] = e[a] * r[4 * o] + e[a + 4] * r[4 * o + 1] + e[a + 8] * r[4 * o + 2] + e[a + 12] * r[4 * o + 3];
        return t
    }, transpose: function (e) {
        return [e[0], e[4], e[8], e[12], e[1], e[5], e[9], e[13], e[2], e[6], e[10], e[14], e[3], e[7], e[11], e[15]]
    }, invert: function (e) {
        var r = [];
        r[0] = e[5] * e[10] * e[15] - e[5] * e[11] * e[14] - e[9] * e[6] * e[15] + e[9] * e[7] * e[14] + e[13] * e[6] * e[11] - e[13] * e[7] * e[10], r[4] = -e[4] * e[10] * e[15] + e[4] * e[11] * e[14] + e[8] * e[6] * e[15] - e[8] * e[7] * e[14] - e[12] * e[6] * e[11] + e[12] * e[7] * e[10], r[8] = e[4] * e[9] * e[15] - e[4] * e[11] * e[13] - e[8] * e[5] * e[15] + e[8] * e[7] * e[13] + e[12] * e[5] * e[11] - e[12] * e[7] * e[9], r[12] = -e[4] * e[9] * e[14] + e[4] * e[10] * e[13] + e[8] * e[5] * e[14] - e[8] * e[6] * e[13] - e[12] * e[5] * e[10] + e[12] * e[6] * e[9], r[1] = -e[1] * e[10] * e[15] + e[1] * e[11] * e[14] + e[9] * e[2] * e[15] - e[9] * e[3] * e[14] - e[13] * e[2] * e[11] + e[13] * e[3] * e[10], r[5] = e[0] * e[10] * e[15] - e[0] * e[11] * e[14] - e[8] * e[2] * e[15] + e[8] * e[3] * e[14] + e[12] * e[2] * e[11] - e[12] * e[3] * e[10], r[9] = -e[0] * e[9] * e[15] + e[0] * e[11] * e[13] + e[8] * e[1] * e[15] - e[8] * e[3] * e[13] - e[12] * e[1] * e[11] + e[12] * e[3] * e[9], r[13] = e[0] * e[9] * e[14] - e[0] * e[10] * e[13] - e[8] * e[1] * e[14] + e[8] * e[2] * e[13] + e[12] * e[1] * e[10] - e[12] * e[2] * e[9], r[2] = e[1] * e[6] * e[15] - e[1] * e[7] * e[14] - e[5] * e[2] * e[15] + e[5] * e[3] * e[14] + e[13] * e[2] * e[7] - e[13] * e[3] * e[6], r[6] = -e[0] * e[6] * e[15] + e[0] * e[7] * e[14] + e[4] * e[2] * e[15] - e[4] * e[3] * e[14] - e[12] * e[2] * e[7] + e[12] * e[3] * e[6], r[10] = e[0] * e[5] * e[15] - e[0] * e[7] * e[13] - e[4] * e[1] * e[15] + e[4] * e[3] * e[13] + e[12] * e[1] * e[7] - e[12] * e[3] * e[5], r[14] = -e[0] * e[5] * e[14] + e[0] * e[6] * e[13] + e[4] * e[1] * e[14] - e[4] * e[2] * e[13] - e[12] * e[1] * e[6] + e[12] * e[2] * e[5], r[3] = -e[1] * e[6] * e[11] + e[1] * e[7] * e[10] + e[5] * e[2] * e[11] - e[5] * e[3] * e[10] - e[9] * e[2] * e[7] + e[9] * e[3] * e[6], r[7] = e[0] * e[6] * e[11] - e[0] * e[7] * e[10] - e[4] * e[2] * e[11] + e[4] * e[3] * e[10] + e[8] * e[2] * e[7] - e[8] * e[3] * e[6], r[11] = -e[0] * e[5] * e[11] + e[0] * e[7] * e[9] + e[4] * e[1] * e[11] - e[4] * e[3] * e[9] - e[8] * e[1] * e[7] + e[8] * e[3] * e[5], r[15] = e[0] * e[5] * e[10] - e[0] * e[6] * e[9] - e[4] * e[1] * e[10] + e[4] * e[2] * e[9] + e[8] * e[1] * e[6] - e[8] * e[2] * e[5];
        var t = e[0] * r[0] + e[1] * r[4] + e[2] * r[8] + e[3] * r[12];
        if (math.equal(t, 0)) {
            t = 1 / t;
            for (var a = 0; a < 16; a++) r[a] *= t
        }
        return r
    }, pan: function (e, r, t) {
        return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, e, r, t, 1]
    }, zoom: function (e) {
        return [e, 0, 0, 0, 0, e, 0, 0, 0, 0, e, 0, 0, 0, 0, 1]
    }, rotate: function (e, r, t) {
        var a = Math.sin(e), o = Math.cos(e), n = Math.sin(r), i = Math.cos(r), s = Math.sin(t), l = Math.cos(t);
        return [i * l, a * n * l + o * s, -o * n * l + a * s, 0, -i * s, -a * n * s + o * l, o * n * s + a * l, 0, n, -a * i, o * i, 0, 0, 0, 0, 1]
    }, trackball: function (e, r) {
        var t = Math.sin(e), a = Math.cos(e), o = Math.sin(r), n = Math.cos(r);
        return [n, t * o, -a * o, 0, 0, a, t, 0, o, -t * n, a * n, 0, 0, 0, 0, 1]
    }, orbit: function (e, r) {
        var t = e[0], a = e[1], o = e[2], n = Math.sin(r), i = Math.cos(r);
        return [i + (1 - i) * t * t, (1 - i) * t * a + o * n, (1 - i) * t * o - a * n, 0, (1 - i) * t * a - o * n, i + (1 - i) * a * a, (1 - i) * a * o + t * n, 0, (1 - i) * t * o + a * n, (1 - i) * a * o - t * n, i + (1 - i) * o * o, 0, 0, 0, 0, 1]
    }, model: function () {
        return this.diag(1)
    }, view: function (e, r, t) {
        var a = vec3.unit(vec3.minus(e, r)), o = vec3.unit(vec3.cross(t, a)), n = vec3.cross(a, o);
        return [o[0], n[0], a[0], 0, o[1], n[1], a[1], 0, o[2], n[2], a[2], 0, -vec3.dot(o, e), -vec3.dot(n, e), -vec3.dot(a, e), 1]
    }, project: function (e, r, t, a) {
        var o = 1 / Math.tan(e / 2);
        return [o / r, 0, 0, 0, 0, o, 0, 0, 0, 0, (t + a) / (t - a), -1, 0, 0, 2 * t * a / (t - a), 0]
    }, xvec3: function (e, r) {
        return [e[0] * r[0] + e[4] * r[1] + e[8] * r[2], e[1] * r[0] + e[5] * r[1] + e[9] * r[2], e[2] * r[0] + e[6] * r[1] + e[10] * r[2]]
    }, x4points: function (e, r, t, a, o) {
        var n = [r[0], t[0], a[0], o[0], r[1], t[1], a[1], o[1], r[2], t[2], a[2], o[2], 0, 0, 0, 0], i = this.x(e, n);
        return [[i[0], i[4], i[8]], [i[1], i[5], i[9]], [i[2], i[6], i[10]], [i[3], i[7], i[11]]]
    }
}, mat3 = {
    x: function (e, r) {
        for (var t = [], a = 0; a < 3; a++) for (var o = 0; o < 3; o++) t[a + 3 * o] = e[a] * r[3 * o] + e[a + 3] * r[3 * o + 1] + e[a + 6] * r[3 * o + 2];
        return t
    }, x3points: function (e, r, t, a) {
        var o = [r[0], t[0], a[0], r[1], t[1], a[1], r[2], t[2], a[2]], n = this.x(e, o);
        return [[n[0], n[3], n[6]], [n[1], n[4], n[7]], [n[2], n[5], n[8]]]
    }
}, math = {
    rad2radian: function (e) {
        return (e / Math.PI).toFixed(4) + " π"
    }, rad2degree: function (e) {
        var r = e / Math.PI * 180, t = Math.floor(r);
        return t + "°" + Math.floor(60 * (r - t)) + "'"
    }, degree2rad: function (e) {
        return Math.PI * e / 180
    }, step: function (e, r, t) {
        return (1 - e) * r + e * t
    }, percent: function (e, r) {
        return r[0] == r[1] ? e < r[0] ? 0 : 1 : this.clamp((e - r[0]) / (r[1] - r[0]), 0, 1)
    }, clamp: function (e, r) {
        return e < r[0] ? r[0] : e > r[1] ? r[1] : e
    }, limit: function (e, r) {
        void 0 === r[1] || e > r[1] ? r[1] = e : (void 0 === r[0] || e < r[0]) && (r[0] = e)
    }, average: function (e, r) {
        r[0] = r[0] + (e - r[0]) / ++r[1]
    }, equal: function (e, r) {
        return Math.abs(e - r) < Number.EPSILON
    }, overlap: function (e, r) {
        return this.equal(e[0], r[0]) && this.equal(e[1], r[1]) && this.equal(e[2], r[2])
    }, det_3: function (e) {
        return 9 == e.length && e[0] * e[4] * e[8] + e[1] * e[5] * e[6] + e[2] * e[3] * e[7] - e[0] * e[5] * e[7] - e[1] * e[3] * e[8] - e[2] * e[4] * e[6]
    }, linear_equation_3: function (e, r, t, a) {
        var o = this.det_3([e[0], r[0], t[0], e[1], r[1], t[1], e[2], r[2], t[2]]);
        return [this.det_3([a[0], r[0], t[0], a[1], r[1], t[1], a[2], r[2], t[2]]) / o, this.det_3([e[0], a[0], t[0], e[1], a[1], t[1], e[2], a[2], t[2]]) / o, this.det_3([e[0], r[0], a[0], e[1], r[1], a[1], e[2], r[2], a[2]]) / o]
    }, polysum: function (e, r) {
        for (var t = [], a = Math.min(e.length, r.length), o = r[0].length, n = 0; n < o; n++) {
            t[n] = 0;
            for (var i = 0; i < a; i++) t[n] += e[i] * r[i][n]
        }
        return t
    }, shadow: function (e, r, t, a) {
        var a = w3m_isset(a) ? a : vec3.cross(e, r), o = this.linear_equation_3(e, r, a, t);
        return vec3.unit(this.polysum([o[0], o[1]], [e, r]))
    }, dihedral_angle: function (e, r, t, a) {
        var o = vec3.unit(vec3.point(e, r)), n = vec3.point(e, t), i = vec3.minus(n, vec3.scalar(vec3.dot(n, o), o)),
            s = vec3.point(e, a), l = vec3.minus(s, vec3.scalar(vec3.dot(s, o), o)),
            c = vec3.plus(vec3.mid(e, r), vec3.plus(vec3.unit(i), vec3.unit(l)));
        return [vec3.rad(i, l), c]
    }, triangle_area: function (e, r, t) {
        var a = vec3.dist(r, t), o = vec3.dist(e, t), n = vec3.dist(e, r), i = .5 * (a + o + n);
        return Math.sqrt(i * (i - a) * (i - o) * (i - n))
    }, fit: function (e, r) {
        for (var t = [], a = 0; a <= e; a++) {
            for (var o = a / e, n = [1], i = [0], s = [0, 0, 2, 6 * o], l = 1, c = r.length; l < c; l++) n[l] = n[l - 1] * o, i[l] = n[l - 1] * l;
            t[a] = [this.polysum(n, r), this.polysum(i, r), this.polysum(s, r)]
        }
        return t
    }, lineFit: function (e, r, t) {
        var a = [r, vec3.point(r, t)];
        return this.fit(e, a)
    }, quadFit: function (e, r, t, a) {
        var o = [1, -3, 2, 0, 4, -4, 0, -1, 2], n = mat3.x3points(o, r, t, a);
        return this.fit(e, n)
    }, cubeFit: function (e, r, t, a, o) {
        var n = [1, -5.5, 9, -4.5, 0, 9, -22.5, 13.5, 0, -4.5, 18, -13.5, 0, 1, -4.5, 4.5],
            i = mat4.x4points(n, r, t, a, o);
        return this.fit(e, i)
    }, cubeFit4parts: function (e, r, t, a, o) {
        var n = [1, -6.33, 10.67, -5.33, 0, 8, -18.67, 10.67, 0, -2.67, 13.33, -10.67, 0, 1, -5.33, 5.33];
        return c = mat4.x4points(n, r, t, a, o), this.fit(e, c)
    }, hermiteFit: function (e, r, t, a, o) {
        var n = [1, 0, -3, 2, 0, 0, 3, -2, 0, 1, -2, 1, 0, 0, -1, 1];
        return c = mat4.x4points(n, r, t, a, o), this.fit(e, c)
    }
}, PDB, ServerType = 2, SERVERURL = "http://localhost:8080/vrmol";
1 === ServerType ? SERVERURL = "http://localhost/" : 2 === ServerType && (SERVERURL = "https://vrmol.net");
var API_URL = "https://vrmol.life.tsinghua.edu.cn", API_URL_EMMAP = "https://vrmol.net/server/api_em.php?pdbid=";
PDB = {
    DOCKING_POS_START: {x: 0, y: 0, z: 0},
    SELECTED_MUTATION: "",
    DEBUG_MODE: 0,
    bigmodel: 19,
    smallmodel: 20,
    loadType: 19,
    map_step: 2,
    map_surface_show: 0,
    HOLDERTIME: 100,
    rotateAngleThreshold: .005,
    nowRotateAngle: 0,
    rotateAxis: {x: 0, y: 0, z: 0},
    rotateAxisAngle: {x: 0, y: 0, z: 0},
    zTemp: 0,
    residueGroup_undefined: 0,
    residueGroup_show: 1,
    residueGroup_hide: 2,
    residueGroup_low: 3,
    residueGroupObject: {},
    initVRShowThreshold: 35,
    initDesktopShowThreshold: 1e3,
    cameraPosition: {x: 0, y: 0, z: 300},
    initChainNumThreshold: 5,
    structureSizeLevel: 0,
    pptShow: !1,
    panelShow: 1,
    isShowSurface: 0,
    VRMode: !1,
    mode: 0,
    isShowMenu: !1,
    distanceArray: [],
    fragmentList: {},
    fragmentArray: [],
    editingArray: [],
    isShowKeyboard: !1,
    selection_mode: 105,
    selection_mode_pre: 105,
    pdbVrId: "",
    trigger: 6,
    parent: "",
    TravelMode: !1,
    TravelGeometry: "",
    VRTravelGeometry: "",
    VRTraveMesh: "",
    MarchingCubes: "",
    fragmentMode: "Flat",
    isShowWater: !1,
    isShowAxis: !1,
    ROTATION_START_FLAG: !1,
    ROTATION_DIRECTION: 1,
    ROTATION_AXIS: 1,
    ROTATION_TASK_ID: 0,
    MOVE_DIRECTION: 2,
    MOVE_AXIS: 3,
    MOVE_TASK_ID: 0,
    PLANE: {a: 0, b: 0, c: 0, d: 0},
    TravelScale: 6,
    currentType: 1,
    label_type: 100,
    cartoonsheet: 0,
    isAnimate: !1,
    tubeSSE: [],
    GeoCenterOffset: "",
    mutation: '{"code":1,"data":{"mutations":[{"id":"832951","v_class":"Missense_Mutation","v_type":"SNP","g_change":"g.chr11:111779667C>G","p_change":"p.E117Q","disease":"UCEC","pos":"117"},{"id":"832952","v_class":"Missense_Mutation","v_type":"SNP","g_change":"g.chr11:111781056G>A","p_change":"p.R107C","disease":"UCEC","pos":"107"},{"id":"832953","v_class":"Silent","v_type":"SNP","g_change":"g.chr11:111781108G>T","p_change":"p.L89L","disease":"UCEC","pos":"89"},{"id":"79882","v_class":"Silent","v_type":"SNP","g_change":"g.chr11:111779560G>A","p_change":"p.V152V","disease":"SKCM","pos":"152"},{"id":"118368","v_class":"Missense_Mutation","v_type":"SNP","g_change":"g.chr11:111782377A>C","p_change":"p.F24L","disease":"SKCM","pos":"24"},{"id":"390477","v_class":"Silent","v_type":"SNP","g_change":"g.chr11:111782347C>T","p_change":"p.E34E","disease":"STAD","pos":"34"},{"id":"646695","v_class":"Missense_Mutation","v_type":"SNP","g_change":"g.chr11:111779603G>A","p_change":"p.S138L","disease":"LUAD","pos":"138"}],"chains":["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X"],"pdbid":"2YGD","dataset":"tcga"},"message":"success"}',
    MUTATION_URL: API_URL + "/server/api.php?taskid=10",
    SHOW_MUTATION_WHEN_SWITCH_VR_MENU: 1,
    CONSERVATION_URL: API_URL + "/server/api.php?taskid=11",
    DRUG_URL: SERVERURL + "/data/DB04464.pdb",
    currentUrl: "data/aaa.pdb",
    remoteUrl: ["https://files.rcsb.org/view/", "https://www.rcsb.org/pdb/files/", SERVERURL + "/data/"],
    drugPDBUrl: [SERVERURL + "/data/", "https://www.drugbank.ca/structures/small_molecule_drugs/"],
    pdbId: "1cbs",
    pdburl: "",
    molecules: {aaa: "aaa.pdb", bbb: "bbb.pdb", "5ftm": "5ftm.pdb", "1mbs": "remote.pdb", aspirin: "aspirin.pdb"},
    MODE_THREE: 0,
    MODE_VR: 1,
    MODE_TRAVEL_THREE: 2,
    MODE_TRAVEL_VR: 3,
    GROUP: {},
    GROUP_STRUCTURE_INDEX: [],
    GROUP_MAIN_INDEX: [],
    GROUP_HET_INDEX: [],
    GROUP_MENU_INDEX: [],
    GROUP_SURFACE_INDEX: [],
    GROUP_MUTATION_INDEX: [],
    GROUP_COUNT: 45,
    GROUP_MAIN: 0,
    GROUP_HET: 1,
    GROUP_WATER: 2,
    GROUP_LABEL: 3,
    GROUP_INFO: 4,
    GROUP_KEYBOARD: 5,
    GROUP_INPUT: 6,
    GROUP_CHAIN: 7,
    GROUP_TRAVEL: 8,
    GROUP_MENU: 9,
    GROUP_MENU_MAIN: 10,
    GROUP_MENU_HET: 11,
    GROUP_MENU_COLOR: 12,
    GROUP_MENU_MEASURE: 13,
    GROUP_MENU_MODE: 14,
    GROUP_MENU_DRAG: 15,
    GROUP_MENU_FRAGMENT: 16,
    GROUP_MENU_LABEL: 17,
    GROUP_MENU_EX_HET: 18,
    GROUP_MENU_TRAVEL: 19,
    GROUP_MENU_SURFACE: 20,
    GROUP_SURFACE: 21,
    GROUP_MUTATION: 22,
    GROUP_MENU_ROTATION: 23,
    GROUP_MENU_MUTATION: 24,
    GROUP_MENU_DRUG: 25,
    GROUP_DRUG: 26,
    GROUP_MENU_HBOND: 27,
    GROUP_MENU_CONSERVATION: 28,
    GROUP_MENU_DENSITYMAP: 29,
    GROUP_SLICE: 30,
    GROUP_SURFACE_HET: 31,
    GROUP_BOND: 32,
    GROUP_MENU_DIRECTION: 33,
    GROUP_MAP: 34,
    GROUP_MENU_OUTBALL: 35,
    GROUP_BOX_HELPER: 36,
    GROUP_AXIS: 37,
    GROUP_MENU_EXPORT: 38,
    GROUP_MENU_SPEECH: 39,
    GROUP_DOCKING: 40,
    GROUP_MENU_EDITING: 41,
    GROUP_VR_MENU_DRUG: 42,
    GROUP_VR_MENU_DOCKING: 43,
    GROUP_VR_MENU_SWITCH: 44,
    MENU_TYPE_FIRST: 0,
    MENU_TYPE_MAIN: 1,
    MENU_TYPE_LIGAND: 2,
    MENU_TYPE_COLOR: 3,
    MENU_TYPE_DRAG: 4,
    MENU_TYPE_MEASURE: 5,
    MENU_TYPE_FRAGMENT: 6,
    MENU_TYPE_LABEL: 7,
    MENU_TYPE_EX_HET: 8,
    MENU_TYPE_TRAVEL: 9,
    MENU_TYPE_SURFACE: 10,
    MENU_TYPE_MUTATION: 11,
    MENU_TYPE_ROTATION: 12,
    MENU_TYPE_DRUG: 13,
    MENU_TYPE_HBOND: 14,
    MENU_TYPE_CONSERVATION: 15,
    MENU_TYPE_DENSITYMAP: 16,
    MENU_TYPE_DIRECTION: 17,
    MENU_TYPE_CURRENT: 1,
    MENU_TYPE_OUTBALL: 18,
    MENU_TYPE_OUTSHOW: 19,
    MENU_TYPE_OUTHIDE: 20,
    MENU_TYPE_EXPORT: 21,
    MENU_TYPE_SPEECH: 22,
    MENU_TYPE_EDITING: 23,
    HIDE: 0,
    LINE: 1,
    DOT: 2,
    BACKBONE: 3,
    SPHERE: 4,
    STICK: 5,
    BALL_AND_ROD: 6,
    TUBE: 7,
    RIBBON_FLAT: 8,
    RIBBON_ELLIPSE: 9,
    RIBBON_RECTANGLE: 10,
    RIBBON_STRIP: 11,
    RIBBON_RAILWAY: 12,
    CARTOON_SSE: 13,
    SURFACE: 14,
    HET: 50,
    HET_LINE: 51,
    HET_SPHERE: 52,
    HET_STICK: 53,
    HET_BALL_ROD: 54,
    HET_WATER: 55,
    HET_IRON: 56,
    CHANGESTYLE: 0,
    DRAWSTYLE_DEFAULT: 0,
    DRAWSTYLE_FRAGMENT: 1,
    DRAWSTYLE_CHAIN: 2,
    DRAWSTYLE_SSETYPE: 3,
    DRAWSTYLE_RESIDUETYPE: 4,
    DRAWSTYLE_TRAVELTHREE: 5,
    SELECTION_MODEL: 100,
    SELECTION_MAIN_HET: 101,
    SELECTION_MAIN: 102,
    SELECTION_HET: 103,
    SELECTION_CHAIN: 104,
    SELECTION_RESIDUE: 105,
    SELECTION_ATOM: 106,
    SELECTION_OBJECT: 107,
    SELECTION_MENU: 108,
    SELECTION_DRUG: 109,
    SELECTION_DRUG_LIST: 110,
    FRAGMENT_MODE_TUBE: "Tube",
    FRAGMENT_MODE_RECTANGLE: "Rectangle",
    FRAGMENT_MODE_ELLIPSE: "Ellipse",
    FRAGMENT_MODE_STRIP: "Strip",
    FRAGMENT_MODE_RAILWAY: "Railway",
    FRAGMENT_MODE_FLAT: "Flat",
    LABEL_TYPE: 701,
    LABEL_ID: 700,
    LABEL_NAME: 701,
    LABEL_AREA_ATOM: 701,
    LABEL_AREA_BACKBONE: 702,
    LABEL_AREA_RESIDUE: 703,
    LABEL_AREA_CHAIN: 704,
    LABEL_AREA_MOL: 705,
    LABEL_ATOM_NAME: 711,
    LABEL_ATOM_ID: 712,
    LABEL_ATOM_NAME_AND_ID: 713,
    LABEL_ELEMENT: 721,
    LABEL_ELEMENT_AND_ID: 722,
    LABEL_RESIDUE_NAME: 731,
    LABEL_RESIDUE_ID: 732,
    LABEL_RESIDUE_NAME_AND_ID: 733,
    LABEL_CHAIN_ID: 741,
    LABEL_CHAIN_AND_RESIDUE: 742,
    LABEL_CHAIN_AND_RESIDUE_ID: 743,
    LABEL_MIX: 744,
    LABEL_OCCUPANCY: 751,
    LABEL_B_FACTOR: 752,
    LABEL_VDW_RADIUS: 753,
    TRIGGER_EVENT_DRAG: 1,
    TRIGGER_EVENT_DISTANCE: 2,
    TRIGGER_EVENT_ANGLE: 3,
    TRIGGER_EVENT_ATOM: 4,
    TRIGGER_EVENT_FRAGMENT: 5,
    TRIGGER_EVENT_LABEL: 6,
    TRIGGER_EVENT_EDITING: 7,
    CONFIG_LOW: {
        sphere_width: 8,
        sphere_height: 4,
        stick_sphere_w: 4,
        ballrod_sphere_w: 4,
        water_sphere_w: 8,
        stick_radius: 3,
        retangle_height: .2,
        retangle_width: 1,
        ellipse_radius: .21,
        ellipse_radius_multiple: 5,
        flat_HIGH: .001,
        flat_width: 1,
        strip_radius: .2,
        strip_ex: 9,
        tubesegment: 5,
        defaultColor: 41797,
        railway_radius: .1,
        railway_gui: 9,
        tube_radius: .2,
        startSegmentSurfaceID: 0,
        endSegmentSurfaceID: 0
    },
    CONFIG_HIGH: {
        sphere_width: 20,
        sphere_height: 20,
        stick_sphere_w: 12,
        ballrod_sphere_w: 12,
        water_sphere_w: 16,
        stick_radius: 15,
        retangle_height: .2,
        retangle_width: 1,
        ellipse_radius: .21,
        ellipse_radius_multiple: 5,
        lat_HIGH: .001,
        flat_width: 1,
        strip_radius: .2,
        strip_ex: 9,
        tubesegment: 15,
        defaultColor: 41797,
        railway_radius: .1,
        railway_gui: 9,
        tube_radius: .2,
        startSegmentSurfaceID: 0,
        endSegmentSurfaceID: 0
    },
    EMMAP_CONFIG: {
        MIN_THRESHOLD: 0,
        MAX_THRESHOLD: 100,
        CURR_THRESHOLD: 100,
        FIRST_EMMAP_ID: "",
        CURRENT_EMMAP_ID: "",
        MIN_SLICE: 0,
        MAX_SLICE: 100,
        CURR_SLICE: 0
    },
    LINK_CONFIG: {
        DRUG_BANK: "https://www.drugbank.ca/drugs/",
        BINDINGDB: "http://www.bindingdb.org/uniport/",
        CHEMBL: "https://www.ebi.ac.uk/chembldb/target/inspect/",
        GUIDETOPHARMACOLOGY: "http://www.guidetopharmacology.org/GRAC/ObjectDisplayForward?objectId=",
        SWISSLIPIDS: "http://www.swisslipids.org/#/entity/",
        EMMAP: "https://www.ebi.ac.uk/pdbe/entry/emdb/"
    },
    DRUBDB_URL: {
        drugbank: SERVERURL + "/data/drugbank/",
        bindingdb: "http://www.bindingdb.org/uniport/",
        chembl: "https://www.ebi.ac.uk/chembldb/target/inspect/",
        guidetopharmacology: "http://www.guidetopharmacology.org/GRAC/ObjectDisplayForward?objectId=",
        swisslipids: "http://www.swisslipids.org/#/entity/",
        docking: ""
    },
    DRUBDB_NAME: {
        drugbank: "DrugBank",
        bindingdb: "BindingDB",
        chembl: "ChEMBL",
        guidetopharmacology: "Guide to PHARMACOLOGY",
        swisslipids: "SwissLipids"
    },
    DOCKING_URL: API_URL + "/server/autodock/autodock.php",
    DIMENSION: 0,
    DIMENSION_X: 0,
    DIMENSION_Y: 1,
    DIMENSION_Z: 2,
    MAP_SCOPE: {x: 0, y: 0, z: 0},
    DRUG_MODE_CONFIG: {
        x_c: 10,
        y_c: 10,
        z_c: 10,
        x_s: 10,
        y_s: 10,
        z_s: 10,
        DRUG_BANK: "drugbank",
        BINDING_DB: "bindingdb",
        CHEMBL: "chembl",
        GUIDETOPHARMACOLOGY: "guidetopharmacology",
        SWISSLIPIDS: "swisslipids",
        Detail_URL: {
            drugbank: "https://www.drugbank.ca/drugs/",
            bindingdb: "http://www.bindingdb.org/uniport/",
            chembl: "https://www.ebi.ac.uk/chembldb/target/inspect/",
            guidetopharmacology: "http://www.guidetopharmacology.org/GRAC/ObjectDisplayForward?objectId=",
            swisslipids: "http://www.swisslipids.org/#/entity/"
        }
    },
    SHOWSOLID: !0,
    SHOWSILICE: !0,
    BOND_TYPE: 0,
    BOND_TYPE_NONE: 0,
    BOND_TYPE_SSBOND: 1,
    BOND_TYPE_COVALENT: 2,
    BOND_TYPE_HBOND: 3,
    ZOOM_STEP: .5,
    ZOOM_TIMES: 1,
    SURFACE_TYPE: 1,
    CURRENT_SURFACE_TYPE: 1,
    SURFACE_OPACITY: 1,
    SURFACE_WIREFRAME: !1,
    DEMO: {INDEX: 0, PRE_INDEX: -1, FUNCTION: [], LAST_EXE_TIME: Date.now(), FLAG: !1, ID: 0},
    EMMAP: {DATA: {}, TYPE: 0, FIRST_ID: 0, MIN_SLICE: 0, MAX_SLICE: 0, SHOW_SLICE: !1, SHOW_MAP: !0}
}, PDB.config = {
    mainMode: PDB.CARTOON_SSE,
    hetMode: PDB.HET_BALL_ROD,
    surfaceMode: PDB.SURFACE,
    selectedDrug: "DB04464",
    panelOpen: 1,
    panelClose: 0,
    openSurface: 1
}, PDB.loader = {
    load: function (e, r) {
        var t = this;
        w3m.ajax.get(e, function (e) {
            w3m.tool.clear(), w3m.config.rep_mode_main = PDB.config.mainMode, w3m.config.rep_mode_het = PDB.config.hetMode, w3m.pdb(e), PDB.pdbId = w3m.global.mol, t.dealwithBigPDB(), t.getCenterOffset(), w3m.api.switchRepModeMain(w3m.LINE), w3m.api.switchRepModeMain(w3m.BACKBONE), w3m.api.switchRepModeMain(w3m.CUBE), w3m.api.switchRepModeMain(w3m.CARTOON), w3m.api.switchRepModeHet(w3m.LINE), PDB.GROUP_STRUCTURE_INDEX = [], PDB.GROUP_MAIN_INDEX = [], PDB.GROUP_HET_INDEX = [];
            for (var a in w3m.mol[PDB.pdbId].chain) {
                var o = "chain_" + a, n = PDB.tool.getFirstAtomIdByChain(a);
                if (PDB.GROUP[o] = new THREE.Group, PDB.GROUP[o].name = a, PDB.GROUP[o].userData.group = o, PDB.structureSizeLevel > 1 && (PDB.GROUP[o].userData.type = "normal"), PDB.GROUP[o].userData.presentAtom = PDB.tool.getMainAtom(PDB.pdbId, n), PDB.pptShow || scene.add(PDB.GROUP[o]), PDB.GROUP_MAIN_INDEX.push(o), PDB.GROUP_STRUCTURE_INDEX.push(o), PDB.structureSizeLevel > 1) {
                    var i = "chain_" + a + "_low";
                    PDB.GROUP[i] = new THREE.Group, PDB.GROUP[i].name = a, PDB.GROUP[i].userData.group = i, PDB.GROUP[i].userData.type = "low", PDB.GROUP[i].userData.presentAtom = PDB.tool.getMainAtom(PDB.pdbId, n), PDB.pptShow || scene.add(PDB.GROUP[i]), PDB.GROUP_MAIN_INDEX.push(i), PDB.GROUP_STRUCTURE_INDEX.push(i)
                }
            }
            PDB.GROUP_MAIN_INDEX.push(PDB.GROUP_MAIN), PDB.GROUP_HET_INDEX.push(PDB.GROUP_HET), PDB.GROUP_HET_INDEX.push(PDB.GROUP_WATER), PDB.GROUP_HET_INDEX.push(PDB.GROUP_AXIS), PDB.GROUP_SURFACE_INDEX.push(PDB.GROUP_SURFACE), PDB.GROUP_MUTATION_INDEX.push(PDB.GROUP_MUTATION), PDB.GROUP_STRUCTURE_INDEX.push(PDB.GROUP_MAIN), PDB.GROUP_STRUCTURE_INDEX.push(PDB.GROUP_BOX_HELPER), PDB.GROUP_STRUCTURE_INDEX.push(PDB.GROUP_DOCKING), PDB.GROUP_STRUCTURE_INDEX.push(PDB.GROUP_WATER), PDB.GROUP_STRUCTURE_INDEX.push(PDB.GROUP_HET), PDB.GROUP_STRUCTURE_INDEX.push(PDB.GROUP_INFO), PDB.GROUP_STRUCTURE_INDEX.push(PDB.GROUP_SURFACE), PDB.GROUP_STRUCTURE_INDEX.push(PDB.GROUP_MUTATION), PDB.GROUP_STRUCTURE_INDEX.push(PDB.GROUP_DRUG), PDB.GROUP_STRUCTURE_INDEX.push(PDB.GROUP_SLICE), PDB.GROUP_STRUCTURE_INDEX.push(PDB.GROUP_BOND), PDB.GROUP_STRUCTURE_INDEX.push(PDB.GROUP_MAP), r()
        })
    }, loadFromDisk: function (e, r) {
        var t = this;
        w3m.tool.clear(), w3m.config.rep_mode_main = PDB.config.mainMode, w3m.config.rep_mode_het = PDB.config.hetMode, PDB.pdbId = e.name.split(".")[0], w3m.file.get(e, function (e) {
            text = e, w3m.pdb(text), PDB.pdbId = w3m.global.mol, t.dealwithBigPDB(), t.getCenterOffset(), w3m.api.switchRepModeMain(w3m.LINE), w3m.api.switchRepModeMain(w3m.BACKBONE), w3m.api.switchRepModeMain(w3m.CUBE), w3m.api.switchRepModeMain(w3m.CARTOON), w3m.api.switchRepModeHet(w3m.LINE), PDB.GROUP_STRUCTURE_INDEX = [], PDB.GROUP_MAIN_INDEX = [], PDB.GROUP_HET_INDEX = [];
            for (var a in w3m.mol[PDB.pdbId].chain) {
                var o = "chain_" + a, n = PDB.tool.getFirstAtomIdByChain(a);
                if (PDB.GROUP[o] = new THREE.Group, PDB.GROUP[o].name = a, PDB.GROUP[o].userData.group = o, PDB.structureSizeLevel > 1 && (PDB.GROUP[o].userData.type = "normal"), PDB.GROUP[o].userData.presentAtom = PDB.tool.getMainAtom(PDB.pdbId, n), PDB.pptShow || scene.add(PDB.GROUP[o]), PDB.GROUP_MAIN_INDEX.push(o), PDB.GROUP_STRUCTURE_INDEX.push(o), PDB.structureSizeLevel > 1) {
                    var i = "chain_" + a + "_low";
                    PDB.GROUP[i] = new THREE.Group, PDB.GROUP[i].name = a, PDB.GROUP[i].userData.group = i, PDB.GROUP[i].userData.type = "low", PDB.GROUP[i].userData.presentAtom = PDB.tool.getMainAtom(PDB.pdbId, n), PDB.pptShow || scene.add(PDB.GROUP[i]), PDB.GROUP_MAIN_INDEX.push(i), PDB.GROUP_STRUCTURE_INDEX.push(i)
                }
            }
            PDB.GROUP_MAIN_INDEX.push(PDB.GROUP_MAIN), PDB.GROUP_HET_INDEX.push(PDB.GROUP_HET), PDB.GROUP_HET_INDEX.push(PDB.GROUP_WATER), PDB.GROUP_SURFACE_INDEX.push(PDB.GROUP_SURFACE), PDB.GROUP_MUTATION_INDEX.push(PDB.GROUP_MUTATION), PDB.GROUP_STRUCTURE_INDEX.push(PDB.GROUP_MAIN), PDB.GROUP_STRUCTURE_INDEX.push(PDB.GROUP_WATER), PDB.GROUP_STRUCTURE_INDEX.push(PDB.GROUP_AXIS), PDB.GROUP_STRUCTURE_INDEX.push(PDB.GROUP_HET), PDB.GROUP_STRUCTURE_INDEX.push(PDB.GROUP_INFO), PDB.GROUP_STRUCTURE_INDEX.push(PDB.GROUP_SURFACE), PDB.GROUP_STRUCTURE_INDEX.push(PDB.GROUP_MUTATION), PDB.GROUP_STRUCTURE_INDEX.push(PDB.GROUP_DRUG), PDB.GROUP_STRUCTURE_INDEX.push(PDB.GROUP_SLICE), PDB.GROUP_STRUCTURE_INDEX.push(PDB.GROUP_BOND), r()
        })
    }, loadDrug: function (e, r, t) {
        w3m.ajax.getDrug(e, r, function (r) {
            w3m.tool.clear(), w3m.pdb(r, e), w3m.mol[e].drug = !0, t()
        })
    }, loadResidue: function (e, r) {
        w3m.ajax.getResidue(e, function (t) {
            PDB.residue = e, w3m.mol[e] || (w3m.mol[e] = {}), w3m.tool.clear(), w3m.mol[e].res = !0, w3m.pdb(t, e), w3m.api.switchRepModeMain(w3m.LINE, e), w3m.api.switchRepModeMain(w3m.BACKBONE, e), PDB.residue = "", r()
        })
    }, loadDocking: function (e, r, t) {
        w3m.ajax.getDocking(e, r, function (e) {
            w3m.tool.clear(), w3m.pdb(e, r), w3m.mol[r].drug = !0, t()
        })
    }, clear: function () {
        w3m.global.limit = {
            x: [],
            y: [],
            z: [],
            b_factor: [0, 0],
            b_factor_backbone: [0, 0]
        }, w3m.global.average = {
            b_factor: [0, 0],
            b_factor_backbone: [0, 0]
        }, w3m.global.fragment = [], w3m.mol = {}, PDB.GeoCenterOffset = "", PDB.fragmentList = {}
    }, getCenterOffset: function () {
        limit = w3m.global.limit, x = -(limit.x[0] + limit.x[1]) / 2, y = -(limit.y[0] + limit.y[1]) / 2, z = -(limit.z[0] + limit.z[1]) / 2, PDB.limit = {}, $.extend(!0, PDB.limit, limit);
        var e = new THREE.Vector3(x, y, z);
        return PDB.GeoCenterOffset = e, PDB.GROUP[PDB.GROUP_BOX_HELPER].visible = !1, PDB.painter.showBoxHelper(), e
    }, dealwithBigPDB: function () {
        if (w3m.mol[PDB.pdbId]) {
            var e = w3m.mol[PDB.pdbId].atom.main.length;
            console.log("MainAtomCount:" + e), PDB.structureSizeLevel = e < 2e3 ? 0 : e < 5e3 ? 1 : e < 1e4 ? 2 : e < 3e4 ? 3 : 4
        }
    }
};
var container, camera, scene, renderer, statsVR, splineCamera, parent, group, cameraEye, menu_panel,
    binormal = new THREE.Vector3, normal = new THREE.Vector3, scale = 4, controls, controller1, controller2, vrEffect,
    vrControls, raycasterFor3, mouse = new THREE.Vector2, INTERSECTED, radius = 100, theta = 0, raycaster,
    intersected = [], tempMatrix = new THREE.Matrix4, lightType = 0, controlsType = 0, showMenu = !1, curve0, train0,
    position0 = new THREE.Vector3, tangent0 = new THREE.Vector3, lookAt0 = new THREE.Vector3, velocity0 = 0,
    progress0 = 0, prevTime0 = performance.now(), tmpTime = 0, ThumbpadAxes = [], id = 0, action = 0;
PDB.render = {
    animationView: !1, currentNodeIndex: 0, init: function () {
        scene = new THREE.Scene, raycasterFor3 = new THREE.Raycaster, container = document.createElement("div"), document.body.appendChild(container), camera = new THREE.PerspectiveCamera(10, window.innerWidth / window.innerHeight, .1, 5e4), camera.position.set(PDB.cameraPosition.x, PDB.cameraPosition.y, PDB.cameraPosition.z), scene.background = new THREE.Color(0), scene.add(camera), document.addEventListener("mousemove", onDocumentMouseMove, !1), this.addLightsByType(lightType);
        for (var e = 0; e < PDB.GROUP_COUNT; e++) PDB.GROUP[e] = new THREE.Group, PDB.GROUP[e].userData.group = e, scene.add(PDB.GROUP[e]);
        renderer = new THREE.WebGLRenderer({antialias: !0}), renderer.setPixelRatio(window.devicePixelRatio), renderer.setSize(window.innerWidth, window.innerHeight), renderer.shadowMap.enabled = !0, renderer.gammaInput = !0, renderer.gammaOutput = !0, container.appendChild(renderer.domElement), 0 == controlsType ? (controls = new THREE.TrackballControls(camera, renderer.domElement), controls.minDistance = 10, controls.maxDistance = 5e4, controls.staticMoving = !1, controls.dynamicDampingFactor = .3, controls.rotateSpeed = 5) : 1 == controlsType ? (stats = new Stats, stats.domElement.style.position = "absolute", stats.domElement.style.right = "0px", stats.domElement.style.left = "inherit", container.appendChild(stats.dom), controls = new THREE.OrbitControls(camera), controls.target.set(0, 0, 0), controls.update()) : controls = new THREE.OrbitControls(camera, renderer.domElement), window.addEventListener("resize", this.onWindowResize, !1)
    }, initVR: function () {
        function e() {
            camera.aspect = window.innerWidth / window.innerHeight, camera.updateProjectionMatrix(), renderer.setSize(window.innerWidth, window.innerHeight)
        }

        scene = new THREE.Scene, scene.background = new THREE.Color(8421504), scene.add(new THREE.HemisphereLight(8421504, 6316128)), camera = new THREE.PerspectiveCamera(10, window.innerWidth / window.innerHeight, .1, 5e4), camera.position.copy(new THREE.Vector3(0, 0, 0)), scene.add(camera), statsVR = new StatsVR(scene, camera);
        for (var r = 0; r < PDB.GROUP_COUNT; r++) PDB.GROUP[r] = new THREE.Group, PDB.GROUP[r].userData.group = r, scene.add(PDB.GROUP[r]);
        this.addLightsByType(lightType), container = document.createElement("div"), document.body.appendChild(container), renderer = new THREE.WebGLRenderer({antialias: !0}), renderer.setPixelRatio(window.devicePixelRatio), renderer.setSize(window.innerWidth, window.innerHeight), renderer.shadowMap.enabled = !0,
            renderer.gammaInput = !0, renderer.gammaOutput = !0, container.appendChild(renderer.domElement), renderer.vr.enabled = !0, document.body.appendChild(WEBVR.createButton(renderer)), window.addEventListener("vr controller connected", function (e) {
            controller1 = e.detail, console.log("style:" + controller1.style + " " + controller1.gamepad.hand), console.log(controller1), controller1.standingMatrix = renderer.vr.getStandingMatrix(), controller1.addEventListener("thumbstick touch began", function (e) {
            }), controller1.addEventListener("thumbstick touch ended", function (e) {
            }), controller1.addEventListener("thumbpad touch began", function (e) {
            }), controller1.addEventListener("thumbpad touch ended", function (e) {
            }), controller1.addEventListener("thumbpad press began", function (e) {
                onThumbpadDown(e)
            }), controller1.addEventListener("thumbpad press ended", function (e) {
                onThumbpadUp(e)
            }), controller1.addEventListener("primary press began", function (e) {
                onTriggerDown(e)
            }), controller1.addEventListener("primary press ended", function (e) {
                onTriggerUp(e)
            }), controller1.addEventListener("menu press began", function (e) {
                onMenuDown(e)
            }), controller1.addEventListener("menu press ended", function (e) {
                onMenuUp(e)
            }), controller1.addEventListener("thumbstick axes changed", function (e) {
                onAxisChanged(e)
            }), controller1.addEventListener("thumbpad axes changed", function (e) {
                onAxisChanged(e)
            }), controller1.addEventListener("primary axes changed", function (e) {
                onAxisChanged(e)
            }), scene.add(controller1);
            var r = "vr_controller_vive_1_5.obj", t = "js/models/vive-controller/";
            "microsoft" === controller1.style && (r = controller1.gamepad.hand + ".obj", t = "js/models/microsoft-controller/");
            var a = new THREE.OBJLoader;
            a.setPath(t), a.load(r, function (e) {
                var r = new THREE.TextureLoader;
                r.setPath(t);
                var a = e.children[0];
                "microsoft" === controller1.style ? console.log("onepointfive_texture png") : (a.material.map = r.load("onepointfive_texture.png"), a.material.specularMap = r.load("onepointfive_spec.png")), controller1.add(e.clone())
            });
            var o = new THREE.BufferGeometry;
            o.addAttribute("position", new THREE.Float32BufferAttribute([0, 0, 0, 0, 0, -1], 3)), o.addAttribute("color", new THREE.Float32BufferAttribute([.5, .5, .5, 0, 0, 0], 3));
            var n = new THREE.LineBasicMaterial({vertexColors: !0, linewidth: 2, blending: THREE.AdditiveBlending}),
                i = new THREE.Line(o, n);
            i.name = "line", i.scale.z = 5, controller1.add(i.clone())
        }), raycaster = new THREE.Raycaster, window.addEventListener("resize", e, !1)
    }, changeToThreeMode: function (e, r) {
        var t = this;
        PDB.tool.hideGroup(PDB.GROUP_VR_MENU_DOCKING), PDB.tool.hideGroup(PDB.GROUP_VR_MENU_DRUG), PDB.mode = e, PDB.TravelMode = r, t.removeCamera(scene), camera = new THREE.PerspectiveCamera(10, window.innerWidth / window.innerHeight, .1, 5e4), camera.position.set(0, 0, 300), scene.background = new THREE.Color(0), scene.add(camera), console.log("lightType:" + lightType), t.clearRender(), t.generateRender(), PDB.tool.backToInitialPositonForDesktop(), console.log("lightType:" + lightType), this.addLightsByType(lightType), 0 == controlsType ? (controls = new THREE.TrackballControls(camera, renderer.domElement), controls.minDistance = 10, controls.maxDistance = 5e4) : 1 == controlsType ? (stats = new Stats, stats.domElement.style.position = "absolute", stats.domElement.style.right = "0px", stats.domElement.style.left = "inherit", container.appendChild(stats.dom), controls = new THREE.OrbitControls(camera), controls.target.set(0, 0, 0), controls.update()) : controls = new THREE.OrbitControls(camera, renderer.domElement), !0 === PDB.TravelMode ? t.openTrackMode() : (PDB.controller.refreshGeometryByMode(PDB.config.mainMode), PDB.controller.refreshGeometryByMode(PDB.config.hetMode))
    }, changeToVrMode: function (e, r) {
        if (PDB.mode !== e) {
            var t = this;
            PDB.mode = e, PDB.TravelMode = r, t.clearStructure(), t.removeCamera(scene), PDB.tool.showGroup(PDB.GROUP_VR_MENU_DOCKING), PDB.tool.showGroup(PDB.GROUP_VR_MENU_DRUG), t.initVR(), !0 === PDB.TravelMode ? t.openTrackMode() : (PDB.controller.refreshGeometryByMode(PDB.config.mainMode), PDB.controller.refreshGeometryByMode(PDB.config.hetMode))
        }
    }, openTrackMode: function () {
        PDB.parent = new THREE.Object3D, scene.add(PDB.parent), splineCamera = new THREE.PerspectiveCamera(84, window.innerWidth / window.innerHeight, .01, 1e3), PDB.parent.add(splineCamera);
        var e = new THREE.PointLight(16777215, 1, 0);
        if (e.position.copy(splineCamera.position), splineCamera.add(e), cameraEye = new THREE.Mesh(new THREE.SphereGeometry(5), new THREE.MeshBasicMaterial({color: 14540253})), "" != PDB.TravelGeometry) {
            var r = Date.now(), t = r % 2e5 / 2e5, a = PDB.TravelGeometry.parameters.path.getPointAt(t);
            a.multiplyScalar(PDB.TravelScale);
            var o = PDB.TravelGeometry.tangents.length, n = t * o, i = Math.floor(n), s = (i + 1) % o;
            typeof binormal != THREE.Vector3 && (binormal = new THREE.Vector3), typeof normal != THREE.Vector3 && (normal = new THREE.Vector3), binormal.subVectors(PDB.TravelGeometry.binormals[s], PDB.TravelGeometry.binormals[i]), binormal.multiplyScalar(n - i).add(PDB.TravelGeometry.binormals[i]);
            var l = PDB.TravelGeometry.parameters.path.getTangentAt(t);
            normal.copy(binormal).cross(l), a.add(normal.clone().multiplyScalar(5)), splineCamera.position.copy(a), cameraEye.position.copy(a);
            var c = PDB.TravelGeometry.parameters.path.getPointAt((t + 5 / PDB.TravelGeometry.parameters.path.getLength()) % 1).multiplyScalar(PDB.TravelScale);
            splineCamera.matrix.lookAt(splineCamera.position, c, normal), splineCamera.rotation.setFromRotationMatrix(splineCamera.matrix, splineCamera.rotation.order)
        }
    }, addLightsByType: function (e) {
        if (0 == e) {
            var r = new THREE.DirectionalLight(16777215, 1.2);
            r.position.copy(camera.position), camera.add(r)
        } else if (1 == e) {
            var r = new THREE.DirectionalLight(16777215);
            r.position.set(0, 6, 0), r.castShadow = !0, r.shadow.camera.top = 2, r.shadow.camera.bottom = -2, r.shadow.camera.right = 2, r.shadow.camera.left = -2, r.shadow.mapSize.set(4096, 4096), scene.add(r)
        } else if (2 == e) {
            var t = [];
            t[0] = new THREE.PointLight(16777215, 1, 0), t[1] = new THREE.PointLight(16777215, 1, 0), t[2] = new THREE.PointLight(16777215, 1, 0), t[0].position.set(0, 200, 0), t[1].position.set(100, 200, 100), t[2].position.set(-100, -200, -100), scene.add(t[0]), scene.add(t[1]), scene.add(t[2])
        } else if (3 == e) {
            particleLight = new THREE.Mesh(new THREE.SphereBufferGeometry(0, 0, 0), new THREE.MeshBasicMaterial({color: 16777215})), scene.add(particleLight), scene.add(new THREE.AmbientLight(2236962));
            var a = new THREE.DirectionalLight(16777215, 1);
            a.position.set(1, 1, 1).normalize(), scene.add(a);
            var o = new THREE.PointLight(16777215, 2, 800);
            particleLight.add(o)
        }
    }, render: function () {
        if (PDB.mode === PDB.MODE_VR || PDB.mode === PDB.MODE_TRAVEL_VR) {
            if (THREE.VRController.update(), void 0 != menu_panel && menu_panel.lookAt(camera.position), cleanIntersected(), void 0 != controller1 && (intersectObjects(controller1), controller1.update()), !0 === PDB.TravelMode && "" !== PDB.TravelGeometry) {
                var e = Date.now(), r = 2e5, t = e % r / r, a = PDB.TravelGeometry.parameters.path.getPointAt(t);
                a.multiplyScalar(PDB.TravelScale);
                var o = PDB.TravelGeometry.tangents.length, n = t * o, i = Math.floor(n), s = (i + 1) % o;
                typeof binormal != THREE.Vector3 && (binormal = new THREE.Vector3), typeof normal != THREE.Vector3 && (normal = new THREE.Vector3), binormal.subVectors(PDB.TravelGeometry.binormals[s], PDB.TravelGeometry.binormals[i]), binormal.multiplyScalar(n - i).add(PDB.TravelGeometry.binormals[i]);
                var l = PDB.TravelGeometry.parameters.path.getTangentAt(t), c = 10;
                normal.copy(binormal).cross(l), a.add(normal.clone().multiplyScalar(c)), PDB.parent.position.copy(a);
                var d = PDB.TravelGeometry.parameters.path.getPointAt((t + 5 / PDB.TravelGeometry.parameters.path.getLength()) % 1).multiplyScalar(PDB.TravelScale);
                PDB.parent.matrix.lookAt(PDB.parent.position, d, normal), PDB.parent.rotation.setFromRotationMatrix(PDB.parent.matrix, PDB.parent.rotation.order), camera = splineCamera
            }
            if (PDB.DRUGMOVE) {
                var m = new Date;
                PDB.drugMoveTime - m < -500 && (PDB.tool.migrationDrug(), PDB.drugMoveTime = new Date)
            }
            renderer.render(scene, camera)
        } else if (PDB.mode === PDB.MODE_THREE || PDB.MODE_TRAVEL_THREE) {
            if (!0 === PDB.TravelMode && "" != PDB.TravelGeometry) {
                var e = Date.now(), r = 2e5, t = e % r / r, a = PDB.TravelGeometry.parameters.path.getPointAt(t);
                a.multiplyScalar(PDB.TravelScale);
                var o = PDB.TravelGeometry.tangents.length, n = t * o, i = Math.floor(n), s = (i + 1) % o;
                typeof binormal != THREE.Vector3 && (binormal = new THREE.Vector3), typeof normal != THREE.Vector3 && (normal = new THREE.Vector3), binormal.subVectors(PDB.TravelGeometry.binormals[s], PDB.TravelGeometry.binormals[i]), binormal.multiplyScalar(n - i).add(PDB.TravelGeometry.binormals[i]);
                var l = PDB.TravelGeometry.parameters.path.getTangentAt(t), c = 10;
                normal.copy(binormal).cross(l), a.add(normal.clone().multiplyScalar(c)), splineCamera.position.copy(a), cameraEye.position.copy(a);
                var d = PDB.TravelGeometry.parameters.path.getPointAt((t + 5 / PDB.TravelGeometry.parameters.path.getLength()) % 1).multiplyScalar(PDB.TravelScale);
                splineCamera.matrix.lookAt(splineCamera.position, d, normal), splineCamera.rotation.setFromRotationMatrix(splineCamera.matrix, splineCamera.rotation.order), renderer.render(scene, splineCamera)
            } else {
                raycasterFor3.setFromCamera(mouse, camera);
                var P = [], u = PDB.GROUP[PDB.GROUP_STRUCTURE_INDEX[PDB.GROUP_MAIN]], D = PDB.GROUP[PDB.GROUP_HET],
                    _ = PDB.GROUP[PDB.GROUP_MUTATION];
                if (void 0 != u && void 0 != u.children && u.children.length > 0) for (var h = 0; h < u.children.length; h++) P.push(u.children[h]);
                if (void 0 != D && void 0 != D.children && D.children.length > 0) for (var h = 0; h < D.children.length; h++) P.push(D.children[h]);
                if (void 0 != _ && void 0 != _.children && _.children.length > 0) for (var h = 0; h < _.children.length; h++) P.push(_.children[h]);
                var B = raycasterFor3.intersectObjects(P);
                if (B.length > 0) {
                    if (INTERSECTED != B[0].object) {
                        if (PDB.render.clearGroupIndex(PDB.GROUP_INFO), INTERSECTED && void 0 != INTERSECTED.material && void 0 != INTERSECTED.material.emissive && INTERSECTED.material.emissive.setHex(INTERSECTED.currentHex), INTERSECTED = B[0].object, void 0 != INTERSECTED.material && void 0 != INTERSECTED.material.emissive && (INTERSECTED.currentHex = INTERSECTED.material.emissive.getHex(), INTERSECTED.material.emissive.setHex(16711680)), void 0 != INTERSECTED.userData.mutation) {
                            var p = INTERSECTED.userData.presentAtom, E = INTERSECTED.userData.mutation,
                                f = E.pos + " " + E.p_change + " " + E.v_class + " " + E.v_type,
                                a = PDB.tool.getAtomInfoPosition(p.pos_centered, camera.position);
                            PDB.drawer.drawTextForDesktop(PDB.GROUP_INFO, a, f, "", p.color, 180);
                            var w = document.getElementById(PDB.SELECTED_MUTATION);
                            w && (w.style.background = "transparent");
                            var g = document.getElementById(E.pos + E.p_change);
                            g && (g.style.background = "red", PDB.SELECTED_MUTATION = E.pos + E.p_change)
                        } else if (void 0 != INTERSECTED.userData.presentAtom) {
                            var p = INTERSECTED.userData.presentAtom, f = "",
                                a = PDB.tool.getAtomInfoPosition(p.pos_centered, camera.position);
                            switch (PDB.label_type) {
                                case PDB.SELECTION_MODEL:
                                    f = p.chainname.toUpperCase() + "." + p.resname.substring(0, 1).toUpperCase() + p.resname.substring(1) + "." + p.resid + "." + p.name.substring(0, 1).toUpperCase() + p.name.substring(1);
                                    break;
                                case PDB.SELECTION_CHAIN:
                                    f = p.chainname.toUpperCase();
                                    break;
                                case PDB.SELECTION_RESIDUE:
                                    f = p.chainname.toUpperCase() + "." + p.resname.substring(0, 1).toUpperCase() + p.resname.substring(1) + "." + p.resid;
                                    break;
                                case PDB.SELECTION_ATOM:
                                    f = p.chainname.toUpperCase() + "." + p.resname.substring(0, 1).toUpperCase() + p.resname.substring(1) + "." + p.resid + "." + p.name.substring(0, 1).toUpperCase() + p.name.substring(1)
                            }
                            PDB.drawer.drawTextForDesktop(PDB.GROUP_INFO, a, f, "", p.color, 180)
                        }
                        INTERSECTED.userData.mutation
                    }
                } else {
                    var w = document.getElementById(PDB.SELECTED_MUTATION);
                    w && (w.style.background = "transparent"), INTERSECTED && void 0 != INTERSECTED.material && void 0 != INTERSECTED.material.emissive && INTERSECTED.material.emissive.setHex(INTERSECTED.currentHex), INTERSECTED = null, PDB.render.clearGroupIndex(PDB.GROUP_INFO)
                }
                renderer.render(scene, camera)
            }
            camera.updateProjectionMatrix(), controls.update()
        }
        PDB.ROTATION_START_FLAG && PDB.tool.rotation(PDB.GROUP_STRUCTURE_INDEX, PDB.ROTATION_DIRECTION)
    }, showDemo: function () {
        if (PDB.DEMO.FLAG) {
            var e = Date.now();
            if (e - PDB.DEMO.LAST_EXE_TIME >= 8e3 && PDB.DEMO.INDEX != PDB.DEMO.PRE_INDEX) {
                switch (console.log(PDB.DEMO.INDEX), console.log("start----"), PDB.DEMO.PRE_INDEX = PDB.DEMO.INDEX, PDB.DEMO.INDEX) {
                    case 0:
                        PDB.config.mainMode = PDB.SPHERE, PDB.controller.refreshGeometryByMode(PDB.config.mainMode);
                        break;
                    case 1:
                        PDB.config.mainMode = PDB.TUBE, PDB.controller.refreshGeometryByMode(PDB.config.mainMode);
                        break;
                    case 2:
                        PDB.config.mainMode = PDB.RIBBON_ELLIPSE, PDB.controller.refreshGeometryByMode(PDB.config.mainMode);
                        break;
                    case 3:
                        PDB.config.hetMode = PDB.HET_SPHERE, PDB.controller.refreshGeometryByMode(PDB.config.hetMode);
                        break;
                    case 4:
                        PDB.config.hetMode = PDB.HET_BALL_ROD, PDB.controller.refreshGeometryByMode(PDB.config.hetMode);
                        break;
                    case 5:
                        PDB.controller.clear(4, void 0), PDB.CONFIG.startSegmentSurfaceID = 0, PDB.CONFIG.endSegmentSurfaceID = 0, PDB.SURFACE_WIREFRAME = !0, PDB.SURFACE_OPACITY = .5, PDB.SURFACE_TYPE = 1, PDB.controller.refreshSurface(PDB.config.surfaceMode, PDB.SURFACE_TYPE, PDB.SURFACE_OPACITY, PDB.SURFACE_WIREFRAME);
                        break;
                    case 6:
                        PDB.controller.clear(4, void 0), PDB.SURFACE_WIREFRAME = !1, PDB.SURFACE_OPACITY = .6, PDB.SURFACE_TYPE = 3, PDB.controller.refreshSurface(PDB.config.surfaceMode, PDB.SURFACE_TYPE, PDB.SURFACE_OPACITY, PDB.SURFACE_WIREFRAME);
                        break;
                    case 7:
                        PDB.GROUP[PDB.GROUP_SURFACE].visible = !1, PDB.controller.switchColorBymode(602);
                        break;
                    case 8:
                        PDB.controller.switchColorBymode(603);
                        break;
                    case 9:
                        PDB.controller.switchColorBymode(606);
                        break;
                    case 10:
                        PDB.controller.switchColorBymode(609);
                        break;
                    case 11:
                        PDB.render.clear(3);
                        var r = PDB.tool.getFirstAtomByResidueId(10, "a")[1],
                            t = PDB.tool.getLastAtomByResidueId(80, "a")[1];
                        PDB.controller.fragmentPainter(r, t, "Rectangle");
                        break;
                    case 12:
                        PDB.render.clear(3);
                        var r = PDB.tool.getFirstAtomByResidueId(50, "a")[1],
                            t = PDB.tool.getLastAtomByResidueId(55, "a")[1];
                        PDB.SURFACE_OPACITY = .7, PDB.controller.fragmentPainter(r, t, "Surface");
                        break;
                    case 13:
                        PDB.GROUP[PDB.GROUP_SURFACE].visible = !1, PDB.controller.clear(4, void 0), PDB.painter.showMutation(PDB.mutation);
                        break;
                    case 14:
                        PDB.GROUP[PDB.GROUP_SURFACE].visible = !1, PDB.render.clearGroupIndex(PDB.GROUP_MUTATION);
                        var a = PDB.tool.getMainAtom(PDB.pdbId, 700);
                        a.pos_curr = a.pos_centered;
                        var o = PDB.tool.getMainAtom(PDB.pdbId, 750);
                        o.pos_curr = o.pos_centered, PDB.painter.showDistance(a, o);
                        break;
                    case 15:
                        PDB.render.clearGroupIndex(PDB.GROUP_INFO), PDB.controller.clear(4, void 0), PDB.DEMO.INDEX = -1
                }
                PDB.DEMO.INDEX = PDB.DEMO.INDEX + 1, PDB.DEMO.LAST_EXE_TIME = e = Date.now(), console.log("end----")
            }
        }
    }, animate: function () {
        PDB.mode === PDB.MODE_VR || PDB.mode === PDB.MODE_TRAVEL_VR ? renderer.setAnimationLoop(PDB.render.render) : (PDB.mode === PDB.MODE_THREE || PDB.MODE_TRAVEL_THREE) && (PDB.render.render(), requestAnimationFrame(PDB.render.animate));
        var e = camera.position;
        if (PDB.offset || (PDB.offset = e.clone()), Math.sqrt(Math.pow(e.x - PDB.offset.x, 2) + Math.pow(e.y - PDB.offset.y, 2) + Math.pow(e.z - PDB.offset.z, 2)) > .01) {
            var r = {x: e.x - PDB.offset.x, y: e.y - PDB.offset.y, z: e.z - PDB.offset.z};
            PDB.tool.getRealVectorForRepeatPainter(r)
        }
        if (PDB.offset = e.clone(), PDB.DRUGMOVE) {
            var t = new Date;
            PDB.drugMoveTime - t < -2e3 && (PDB.tool.migrationDrug(), PDB.drugMoveTime = new Date)
        }
    }, onWindowResize: function () {
        camera.aspect = window.innerWidth / window.innerHeight, camera.updateProjectionMatrix(), renderer.setSize(window.innerWidth, window.innerHeight)
    }, hideMenu: function () {
        PDB.SHOW_MUTATION_WHEN_SWITCH_VR_MENU = 1, PDB.render.clearGroupIndex(PDB.GROUP_MENU), PDB.render.clearGroupIndex(PDB.GROUP_KEYBOARD), PDB.render.clearGroupIndex(PDB.GROUP_MENU_MAIN), PDB.render.clearGroupIndex(PDB.GROUP_MENU_LABEL), PDB.render.clearGroupIndex(PDB.GROUP_MENU_TRAVEL), PDB.render.clearGroupIndex(PDB.GROUP_MENU_EX_HET), PDB.render.clearGroupIndex(PDB.GROUP_MENU_HET), PDB.render.clearGroupIndex(PDB.GROUP_MENU_COLOR), PDB.render.clearGroupIndex(PDB.GROUP_MENU_MEASURE), PDB.render.clearGroupIndex(PDB.GROUP_MENU_DRAG), PDB.render.clearGroupIndex(PDB.GROUP_MENU_FRAGMENT), PDB.render.clearGroupIndex(PDB.GROUP_MENU_EDITING), PDB.render.clearGroupIndex(PDB.GROUP_MENU_SURFACE), PDB.render.clearGroupIndex(PDB.GROUP_MENU_MUTATION), PDB.render.clearGroupIndex(PDB.GROUP_MENU_ROTATION), PDB.render.clearGroupIndex(PDB.GROUP_MENU_DIRECTION), PDB.render.clearGroupIndex(PDB.GROUP_MENU_EXPORT), PDB.render.clearGroupIndex(PDB.GROUP_MENU_SPEECH), PDB.render.clearGroupIndex(PDB.GROUP_MENU_OUTBALL), PDB.render.clearGroupIndex(PDB.GROUP_MENU_DRUG), PDB.render.clearGroupIndex(PDB.GROUP_MENU_DENSITYMAP), PDB.render.clearGroupIndex(PDB.GROUP_MENU_CONSERVATION), PDB.render.clearGroupIndex(PDB.GROUP_MENU_HBOND), PDB.render.clearGroupIndex(PDB.GROUP_INPUT), PDB.render.showStructure()
    }, hideSubMenu: function () {
        PDB.SHOW_MUTATION_WHEN_SWITCH_VR_MENU = 1, PDB.render.clearGroupIndex(PDB.GROUP_MENU_MAIN), PDB.render.clearGroupIndex(PDB.GROUP_MENU_HET), PDB.render.clearGroupIndex(PDB.GROUP_MENU_LABEL), PDB.render.clearGroupIndex(PDB.GROUP_MENU_TRAVEL), PDB.render.clearGroupIndex(PDB.GROUP_MENU_SURFACE), PDB.render.clearGroupIndex(PDB.GROUP_MENU_MUTATION), PDB.render.clearGroupIndex(PDB.GROUP_MENU_ROTATION), PDB.render.clearGroupIndex(PDB.GROUP_MENU_DIRECTION), PDB.render.clearGroupIndex(PDB.GROUP_MENU_SPEECH), PDB.render.clearGroupIndex(PDB.GROUP_MENU_EXPORT), PDB.render.clearGroupIndex(PDB.GROUP_MENU_OUTBALL), PDB.render.clearGroupIndex(PDB.GROUP_MENU_EDITING), PDB.render.clearGroupIndex(PDB.GROUP_MENU_DRUG), PDB.render.clearGroupIndex(PDB.GROUP_MENU_DENSITYMAP), PDB.render.clearGroupIndex(PDB.GROUP_MENU_CONSERVATION), PDB.render.clearGroupIndex(PDB.GROUP_MENU_HBOND), PDB.render.clearGroupIndex(PDB.GROUP_MENU_EX_HET), PDB.render.clearGroupIndex(PDB.GROUP_MENU_COLOR), PDB.render.clearGroupIndex(PDB.GROUP_MENU_MEASURE), PDB.render.clearGroupIndex(PDB.GROUP_MENU_DRAG), PDB.render.clearGroupIndex(PDB.GROUP_MENU_FRAGMENT)
    }, showMenu: function () {
        PDB.SHOW_MUTATION_WHEN_SWITCH_VR_MENU = 0, PDB.painter.showKeyboard(), PDB.painter.showMenu(PDB.MENU_TYPE_FIRST), menu_panel = new THREE.Object3D, scene.add(menu_panel), menu_panel.add(PDB.GROUP[PDB.GROUP_MENU]), menu_panel.add(PDB.GROUP[PDB.GROUP_KEYBOARD]), menu_panel.add(PDB.GROUP[PDB.GROUP_MENU_MAIN]), menu_panel.add(PDB.GROUP[PDB.GROUP_MENU_LABEL]), menu_panel.add(PDB.GROUP[PDB.GROUP_MENU_EX_HET]), menu_panel.add(PDB.GROUP[PDB.GROUP_MENU_TRAVEL]), menu_panel.add(PDB.GROUP[PDB.GROUP_MENU_SURFACE]), menu_panel.add(PDB.GROUP[PDB.GROUP_MENU_MUTATION]), menu_panel.add(PDB.GROUP[PDB.GROUP_MENU_ROTATION]), menu_panel.add(PDB.GROUP[PDB.GROUP_MENU_DIRECTION]), menu_panel.add(PDB.GROUP[PDB.GROUP_MENU_EXPORT]), menu_panel.add(PDB.GROUP[PDB.GROUP_MENU_SPEECH]), menu_panel.add(PDB.GROUP[PDB.GROUP_MENU_OUTBALL]), menu_panel.add(PDB.GROUP[PDB.GROUP_MENU_EDITING]), menu_panel.add(PDB.GROUP[PDB.GROUP_MENU_DRUG]), menu_panel.add(PDB.GROUP[PDB.GROUP_MENU_DENSITYMAP]), menu_panel.add(PDB.GROUP[PDB.GROUP_MENU_CONSERVATION]), menu_panel.add(PDB.GROUP[PDB.GROUP_MENU_HBOND]), menu_panel.add(PDB.GROUP[PDB.GROUP_MENU_HET]), menu_panel.add(PDB.GROUP[PDB.GROUP_MENU_COLOR]), menu_panel.add(PDB.GROUP[PDB.GROUP_MENU_MEASURE]), menu_panel.add(PDB.GROUP[PDB.GROUP_MENU_DRAG]), menu_panel.add(PDB.GROUP[PDB.GROUP_MENU_FRAGMENT]), menu_panel.add(PDB.GROUP[PDB.GROUP_INPUT]), menu_panel.position.set(0, 0, -3), showMenu = !0, PDB.render.hideStructure()
    }, hideStructure: function () {
        for (var e in PDB.GROUP_STRUCTURE_INDEX) PDB.GROUP[PDB.GROUP_STRUCTURE_INDEX[e]].visible = !1
    }, showStructure: function () {
        for (var e in PDB.GROUP_STRUCTURE_INDEX) PDB.GROUP_STRUCTURE_INDEX[e] !== PDB.GROUP_BOX_HELPER && (PDB.GROUP[PDB.GROUP_STRUCTURE_INDEX[e]].visible = !0)
    }, clearStructure: function () {
        for (var e = 0; e < PDB.GROUP_STRUCTURE_INDEX.length; e++) this.clearGroupIndex(PDB.GROUP_STRUCTURE_INDEX[e]);
        PDB.parent = ""
    }, clearMain: function () {
        for (var e = 0; e < PDB.GROUP_MAIN_INDEX.length; e++) this.clearGroupIndex(PDB.GROUP_MAIN_INDEX[e]);
        PDB.allMainToms = void 0
    }, clearGroup: function (e) {
        void 0 != e && void 0 != e.children && e.children.length > 0 && (e.children = [])
    }, clearGroupIndex0: function (e) {
        void 0 != PDB.GROUP[e] && void 0 != PDB.GROUP[e].children && PDB.GROUP[e].children.length > 0 && (PDB.GROUP[e].children = [])
    }, clearGroupIndex: function (e) {
        if (void 0 != PDB.GROUP[e] && void 0 != PDB.GROUP[e].children && PDB.GROUP[e].children.length > 0) {
            for (var r = PDB.GROUP[e].children, t = 0; t < r.length; t++) if (r[t] instanceof THREE.Mesh) {
                var a = r[t];
                a.geometry && a.geometry.dispose(), a.material && a.material.dispose && a.material.dispose(), delete a, a = void 0
            }
            PDB.GROUP[e].children = []
        }
    }, clear: function (e) {
        switch (THREE.Cache.clear(), e) {
            case 0:
                for (var r in PDB.GROUP_MAIN_INDEX) PDB.render.clearGroupIndex(PDB.GROUP_MAIN_INDEX[r]);
                break;
            case 1:
                PDB.render.clearGroupIndex(PDB.GROUP_HET);
                break;
            case 2:
                for (var r in PDB.GROUP_STRUCTURE_INDEX) PDB.render.clearGroupIndex(PDB.GROUP_STRUCTURE_INDEX[r]);
                PDB.allMainToms = void 0, PDB.TravelGeometry = "", void 0 !== scene && scene.children.length > 0 && scene.children.forEach(function (e) {
                    e instanceof THREE.Mesh && scene.remove(e)
                });
                break;
            case 3:
                PDB.render.clearGroupIndex(PDB.GROUP_SURFACE);
            case 4:
                PDB.render.clearGroupIndex(PDB.GROUP_MUTATION);
                break;
            case 5:
                PDB.render.clearGroupIndex(PDB.GROUP_SLICE), PDB.render.clearGroupIndex(PDB.GROUP_MAP);
                break;
            case 6:
                var t = document.getElementById("rightmenu");
                t && (t.innerHTML = "")
        }
    }, generateRender: function () {
        renderer = new THREE.WebGLRenderer({antialias: !0}), renderer.setPixelRatio(window.devicePixelRatio), renderer.setSize(window.innerWidth, window.innerHeight), renderer.shadowMap.enabled = !0, renderer.gammaInput = !0, renderer.gammaOutput = !0, container.appendChild(renderer.domElement), renderer.vr.enabled = !0, renderer.vr.standing = !0
    }, clearRender: function () {
        if (container.children.length > 0 && container.removeChild(container.childNodes[0]), document.body.childNodes.length > 0) {
            var e = document.body.childNodes[document.body.childNodes.length - 1];
            "ENTER VR" !== e.innerHTML && "EXIT VR" !== e.innerHTML || document.body.removeChild(e)
        }
        if (PDB.parent instanceof THREE.Object3D && PDB.parent.children.length > 0) {
            for (var r = PDB.parent.children.length, t = [], a = 0; a < r; a++) t.push(PDB.parent.children[a]);
            t.forEach(function (e) {
                PDB.parent.remove(e)
            })
        }
    }, removeCamera: function (e) {
        for (var r = e.children.length, t = [], a = 0; a < r; a++) {
            var o = e.children[a];
            o instanceof THREE.PerspectiveCamera && t.push(o), o instanceof THREE.PerspectiveCamera && t.push(o), o instanceof THREE.HemisphereLight && t.push(o), o instanceof THREE.PointLight && t.push(o), o instanceof THREE.ViveController && t.push(o)
        }
        t.forEach(function (r) {
            e.remove(r)
        })
    }, exportToObj: function (e) {
        var r = new THREE.OBJExporter;
        switch (e) {
            case"MainStructure":
                var t = w3m.mol[PDB.pdbId].residueData;
                for (var a in t) {
                    var o = r.parse(PDB.GROUP["chain_" + a]);
                    PDB.tool.saveString(o, PDB.pdbId + "_" + a + ".obj")
                }
                break;
            case"Map":
                var o = r.parse(PDB.GROUP[PDB.GROUP_MAP]);
                PDB.tool.saveString(o, PDB.pdbId + ".obj");
                break;
            case"LigandStructure":
                if (PDB.GROUP[PDB.GROUP_HET]) {
                    var o = r.parse(PDB.GROUP[PDB.GROUP_HET]);
                    PDB.tool.saveString(o, "het.obj")
                }
        }
    }
}, PDB.tool = {
    getValue: function (e, r) {
        return void 0 !== e && null !== e && "" !== e ? e : r
    }, midPoint: function (e, r) {
        return new THREE.Vector3((e.x + r.x) / 2, (e.y + r.y) / 2, (e.z + r.z) / 2)
    }, MaxEdge: function () {
        var e = w3m.global.limit, r = e.x[1] - e.x[0], t = e.y[1] - e.y[0], a = e.z[1] - e.z[0], o = r > t ? r : t;
        return o > a ? o : a
    }, getMainAtom: function (e, r) {
        var t = this, a = w3m.mol[e].atom.main[r];
        if (void 0 !== a) return t.getAtomById(e, a, "main")
    }, rotation0: function (e, r) {
        0 === r ? e.forEach(function (e) {
            var r = PDB.GROUP[e];
            void 0 !== r && (r.rotation.y = r.rotation.y - .005)
        }) : 1 === r && e.forEach(function (e) {
            var r = PDB.GROUP[e];
            void 0 !== r && (r.rotation.y = r.rotation.y + .005)
        })
    }, getMainResAtomsByAtom: function (e) {
        for (var r = e.chainname + "_" + e.resid, t = PDB.pdbId, a = this, o = new Array, n = e.id; n-- && n > 0;) {
            var i = a.getMainAtom(t, n);
            if (void 0 === i) break;
            var s = i.chainname + "_" + i.resid;
            if (r !== s) break;
            o.push(i)
        }
        for (n = e.id, o.push(e); n++ && n < w3m.mol[t].atom.main.length;) {
            var i = a.getMainAtom(t, n);
            if (void 0 === i) break;
            var s = i.chainname + "_" + i.resid;
            if (r !== s) break;
            o.push(i)
        }
        return o
    }, getMainChainAtomsByAtom: function (e) {
        for (var r = e.chainname, t = PDB.pdbId, a = this, o = new Array, n = e.id; n-- && n > 0;) {
            var i = a.getMainAtom(t, n);
            if (void 0 === i) break;
            var s = i.chainname;
            if (r !== s) break;
            o.push(i)
        }
        for (n = e.id, o.push(e); n++ && n < w3m.mol[t].atom.main.length;) {
            var i = a.getMainAtom(t, n);
            if (void 0 === i) break;
            var s = i.chainname;
            if (r !== s) break;
            o.push(i)
        }
        return o
    }, getHetAtom: function (e, r) {
        var t = this, a = w3m.mol[e].atom.het[r];
        return void 0 !== a ? t.getAtomById(e, a, "het") : t.getMainAtom(e, r)
    }, getAtomById: function (e, r, t) {
        var a = this, o = r[1], n = r[2], i = r[3], s = r[4], l = r[5], c = r[6], d = r[7], m = r[8], P = r[9],
            u = w3m.geometry.radius[P], D = new THREE.Vector3(c[0], c[1], c[2]), _ = PDB.GeoCenterOffset;
        return {
            id: o,
            name: n,
            resname: i,
            chainname: s,
            resid: l,
            pos: D,
            pos_centered: new THREE.Vector3(c[0] + _.x, c[1] + _.y, c[2] + _.z),
            bfactor: d,
            coe: m,
            type: P,
            radius: u,
            color: a.getColorByIndex(e, o, t)
        }
    }, equalAtom: function (e, r) {
        return e.id === r.id
    }, getColorByAtomType: function (e) {
        var r = w3m.color.element[e], t = w3m.rgb[r];
        return new THREE.Color(t[0], t[1], t[2])
    }, getColorByIndex: function (e, r, t) {
        var a = w3m.mol[e].color[t][r];
        if (a) {
            var o = w3m.rgb[a][0], n = w3m.rgb[a][1], i = w3m.rgb[a][2];
            return new THREE.Color(o, n, i)
        }
        return new THREE.Color("#ccc")
    }, getColorByColorIndex: function (e) {
        var r = w3m.rgb[e];
        return new THREE.Color(r[0], r[1], r[2])
    }, getMaterialsByAtomId: function (e) {
        var r = (w3m.mol[PDB.pdbId].color.main[e], PDB.tool.getColorByIndex(e, "main"));
        return new THREE.MeshPhongMaterial({color: r})
    }, writeTextFile: function (e, r) {
        var t = new debugout;
        t.logFilename = e, t.log(r), t.downloadLog()
    }, showMask: function () {
        var e = this, r = document.body.scrollHeight, t = document.body.scrollWidth,
            a = document.getElementById("weChatMask");
        a.style.display = "block", a.style.position = "absolute", a.style.display = "block", a.style.zIndex = "8888", a.style.width = t + "px", a.style.height = r + "px", a.style.background = "white", a.style.opacity = "0.5";
        var o = n || window.event, n = e.getMousePos(o), i = document.getElementById("weChatPop");
        i.style.top = n.y - 400 + "px", i.style.left = n.x + 200 + "px", i.style.display = "block", i.style.zIndex = "9999", i.style.opacity = "1"
    }, hideMask: function () {
        var e = document.getElementById("weChatMask"), r = document.getElementById("weChatPop");
        e.style.display = "none", r.style.display = "none"
    }, getFirstAtomIdByChain: function (e) {
        var r = Object.keys(w3m.mol[PDB.pdbId].rep[e])[0];
        return this.getFirstAtomByResidueId(r, e)[0]
    }, getFirstAtomByResidueId: function (e, r) {
        var t = w3m.mol[PDB.pdbId].atom.main, a = [];
        for (var o in t) if (t[o][4] == r) {
            var n = t[o][5];
            if (e == n) {
                a = t[o];
                break
            }
        }
        return a
    }, getLastAtomByResidueId: function (e, r) {
        var t = w3m.mol[PDB.pdbId].atom.main, a = [], o = -1, n = -1;
        for (var i in t) if (t[i][4] == r) {
            if (n = t[i][5], -1 != o && e == o && o != n) {
                a = t[i - 1];
                break
            }
            o = t[i][5]
        }
        return a
    }, getCAAtomByLastAtomId: function (e) {
        var r = w3m.mol[PDB.pdbId].atom.main, t = r[e];
        if ("ca" === t[2]) return t;
        for (; e-- && e > 0 && (void 0 === (t = r[e]) || "ca" != t[2]);) ;
        return t
    }, getCAAtomByStartAtomId: function (e) {
        var r = w3m.mol[PDB.pdbId].atom.main, t = r[e];
        if ("ca" === t[2]) return t;
        for (; e++ && e < Object.keys(r).length - 1 && (void 0 === (t = r[e]) || "ca" != t[2]);) ;
        return t
    }, getCAAtomByResidueId: function (e, r) {
        var t = this, a = w3m.mol[PDB.pdbId].atom.main, o = [];
        for (var n in a) if (a[n][4] == r.toLowerCase() || a[n][4] == r.toUpperCase()) {
            var i = a[n][5];
            if (e == i && "ca" === a[n][2]) {
                o = a[n];
                break
            }
        }
        return t.getMainAtom(PDB.pdbId, o[1])
    }, getMousePos: function (e) {
        var r = e || window.event, t = document.documentElement.scrollLeft || document.body.scrollLeft,
            a = document.documentElement.scrollTop || document.body.scrollTop;
        return {x: r.pageX || r.clientX + t, y: r.pageY || r.clientY + a}
    }, getAngleMeasurement: function (e, r, t) {
        var a = {}, o = vec3.unit(vec3.point(e, r)), n = vec3.unit(vec3.point(e, t)), i = vec3.rad(o, n, !0),
            s = vec3.plus(e, vec3.plus(o, n));
        return a.result = math.rad2degree(i), a.label_xyz = s, a
    }, getMidPoint: function (e, r, t) {
        var a = PDB.GeoCenterOffset, o = w3m.mol[e].atom.main[r], n = w3m.mol[e].atom.main[t];
        if (void 0 != o && void 0 != n) {
            var i = o[6], s = n[6];
            return new THREE.Vector3((i[0] + s[0]) / 2 + a.x, (i[1] + s[1]) / 2 + a.y, (i[2] + s[2]) / 2 + a.z)
        }
    }, getColorForPercentage: function (e) {
        for (var r = [{pct: 0, color: {r: 255, g: 0, b: 0}}, {pct: .5, color: {r: 255, g: 255, b: 0}}, {
            pct: 1,
            color: {r: 0, g: 255, b: 0}
        }], t = 1; t < r.length - 1 && !(e < r[t].pct); t++) ;
        var a = r[t - 1], o = r[t], n = o.pct - a.pct, i = (e - a.pct) / n, s = 1 - i, l = i, c = {
            r: Math.floor(a.color.r * s + o.color.r * l),
            g: Math.floor(a.color.g * s + o.color.g * l),
            b: Math.floor(a.color.b * s + o.color.b * l)
        };
        return new THREE.Color(c.r, c.g, c.b)
    }, colorIntersectObjectRed: function (e, r) {
        if ("Group" === e.type) for (var t in e.children) PDB.tool.colorIntersectObjectRed(e.children[t], r); else void 0 != e && void 0 != e.material && ("object" == typeof e.material && void 0 != e.material.emissive ? e.material.emissive.r = r : void 0 !== e.material.length && e.material.length >= 0 && void 0 != e.material[0].emissive && (e.material[0].emissive.r = r))
    }, colorIntersectObjectBlue: function (e, r) {
        if ("Group" === e.type) for (var t in e.children) PDB.tool.colorIntersectObjectBlue(e.children[t], r); else void 0 != e && void 0 != e.material && ("object" == typeof e.material && void 0 != e.material.emissive ? e.material.emissive.b = r : void 0 !== e.material.length && e.material.length >= 0 && void 0 != e.material[0].emissive && (e.material[0].emissive.b = r))
    }, colorIntersectObjectRed0: function (e, r) {
        if ("Group" === e.type) for (var t in e.children) PDB.tool.colorIntersectObjectRed(e.children[t], r); else void 0 != e && void 0 != e.material && void 0 != e.material.emissive && (e.material.emissive.r = r)
    }, colorIntersectObjectBlue0: function (e, r) {
        if ("Group" === e.type) for (var t in e.children) PDB.tool.colorIntersectObjectBlue(e.children[t], r); else void 0 != e && void 0 != e.material && void 0 != e.material.emissive && (e.material.emissive.b = r)
    }, ajax: function () {
        var e = new XMLHttpRequest, r = 0, t = null;
        return e.timeout = 18e4, e.onprogress = function () {
        }, e.onload = function () {
            200 == this.status ? t(e.responseText) : w3m_isset(PDB.remoteUrl[++r]) ? this.get("", t) : r = 0
        }, e.onabort = function () {
            r = 0
        }, e.ontimeout = function () {
            PDB.tool.showSegmentholder(!1), w3m_isset(PDB.remoteUrl[++r]) ? this.get("", t) : r = 0
        }, e.onerror = function () {
            r = 0
        }, e.get = function (e, r) {
            t = r, this.open("GET", e, !0), this.send()
        }, e
    }(), checkPointOfSpecialPlane: function (e) {
        var r = PDB.PLANE;
        return 0 === r.a * e.x + r.a * e.x + r.b * e.y + r.c * e.z + r.d
    }, generatePlane: function (e, r, t) {
        var a, o, n, i;
        a = (r.y - e.y) * (t.z - e.z) - (r.z - e.z) * (t.y - e.y), o = (r.z - e.z) * (t.x - e.x) - (r.x - e.x) * (t.z - e.z), n = (r.x - e.x) * (t.y - e.y) - (r.y - e.y) * (t.x - e.x), i = 0 - (a * e.x + o * e.y + n * e.z), PDB.PLANE = {
            a: a,
            b: o,
            c: n,
            d: i
        }
    }, isBonded: function (e, r) {
        var t = (r.pos.x - e.pos.x) * (r.pos.x - e.pos.x) + (r.pos.y - e.pos.y) * (r.pos.y - e.pos.y) + (r.pos.z - e.pos.z) * (r.pos.z - e.pos.z);
        return "sg" === e.name && "sg" === r.name && t < 2.2 * 2.2 ? PDB.BOND_TYPE_SSBOND : .25 < t && t < 3.61 ? PDB.BOND_TYPE_COVALENT : "o" === e.name && "n" === r.name && t < 12.25 || "n" === e.name && "o" === r.name && t < 12.25 || "o" === e.name && "o" === r.name && t < 12.25 || "n" === e.name && "n" === r.name && t < 12.25 ? PDB.BOND_TYPE_HBOND : PDB.BOND_TYPE_NONE
    }, backToInitialPositionForVr: function () {
        for (var e in PDB.GROUP_STRUCTURE_INDEX) PDB.GROUP[PDB.GROUP_STRUCTURE_INDEX[e]].position.copy(new THREE.Vector3(0, 0, 0)), PDB.GROUP[PDB.GROUP_STRUCTURE_INDEX[e]].rotation.set(0, 0, 0);
        var r = camera.position;
        for (var t in PDB.residueGroupObject) for (var a in PDB.residueGroupObject[t]) {
            var o = w3m.mol[PDB.pdbId].residueData[t][a].caid, n = PDB.tool.getMainAtom(PDB.pdbId, o).pos_centered;
            PDB.residueGroupObject[t][a].vector = {x: n.x - r.x, y: n.y - r.y, z: n.z - r.z}
        }
        for (var a in w3m.mol[PDB.pdbId].residueData) PDB.GROUP["chain_" + a].position.copy(new THREE.Vector3(0, 0, 0)), PDB.GROUP["chain_" + a].rotation.set(0, 0, 0);
        PDB.painter.repeatPainter()
    }, matchSurfaceAndMainGroupLocationForVR: function (e, r) {
        e instanceof THREE.Group && r instanceof THREE.Group && (e.position.copy(r.position), e.rotation.copy(r.rotation))
    }, generateButton: function (e, r, t, a) {
        var o = document.createElement("button");
        return o.innerHTML = r, o.value = t, o.className = a, e.appendChild(o), o
    }, generateColorPanel: function (e) {
        var r = document.createElement("input");
        r.className = "simple_color", r.value = "#3366cc", e.appendChild(r)
    }, generateLabel: function (e, r, t) {
        var a = document.createElement("label");
        a.innerHTML = r, a.className = t, e.appendChild(a), e.appendChild(document.createElement("br"))
    }, generateLabel_nobr: function (e, r, t) {
        var a = document.createElement("label");
        a.innerHTML = r, a.className = t, e.appendChild(a)
    }, generateTextBox: function (e, r, t, a) {
        var o = document.createElement("input");
        o.id = r, o.setAttribute("value", t), o.className = a, e.appendChild(o)
    }, generateSpan: function (e, r, t) {
        var a = document.createElement("span");
        return a.className = t, a.id = r, e.appendChild(a), e.appendChild(document.createElement("br")), a
    }, generateALink: function (e, r, t, a, o) {
        var n = document.createElement("a"), i = document.createTextNode(t);
        return n.appendChild(i), n.setAttribute("href", a), n.setAttribute("target", "_blank"), n.className = o, n.id = r, e.appendChild(n), n
    }, generateDocklingLink: function (e, r, t, a, o) {
        var n = document.createElement("a"), i = document.createTextNode(t);
        return n.appendChild(i), n.id = r, n.addEventListener("click", function () {
            PDB.tool.showSegmentholder(!0, !0);
            var e = document.getElementById("modelSpan");
            e && (e.innerHTML = ""), PDB.DRUGMOVE = !0, PDB.drugMoveTime = new Date
            ;var r = w3m.global.limit.x[0] + (w3m.global.limit.x[1] - w3m.global.limit.x[0]) / 2,
                t = w3m.global.limit.y[0] + (w3m.global.limit.y[1] - w3m.global.limit.y[0]) / 2,
                o = w3m.global.limit.z[0] + (w3m.global.limit.z[1] - w3m.global.limit.z[0]) / 2,
                n = w3m.global.limit.x[1] - w3m.global.limit.x[0], i = w3m.global.limit.y[1] - w3m.global.limit.y[0],
                s = w3m.global.limit.z[1] - w3m.global.limit.z[0];
            PDB.DRUG_MODE_CONFIG.x_c = r, PDB.DRUG_MODE_CONFIG.y_c = t, PDB.DRUG_MODE_CONFIG.z_c = o, PDB.DRUG_MODE_CONFIG.x_s = n, PDB.DRUG_MODE_CONFIG.y_s = i, PDB.DRUG_MODE_CONFIG.z_s = s;
            var l = PDB.DOCKING_URL + "?pdbid=" + PDB.pdbId.toUpperCase() + "&smolid=" + a.toUpperCase() + "&x_c=" + PDB.DRUG_MODE_CONFIG.x_c + "&y_c=" + PDB.DRUG_MODE_CONFIG.y_c + "&z_c=" + PDB.DRUG_MODE_CONFIG.z_c + "&x_s=" + PDB.DRUG_MODE_CONFIG.x_s + "&y_s=" + PDB.DRUG_MODE_CONFIG.y_s + "&z_s=" + PDB.DRUG_MODE_CONFIG.z_s;
            2 !== ServerType && (l = SERVERURL + "/data/autodock.json"), PDB.tool.ajax.get(l, function (r) {
                PDB.tool.showSegmentholder(!1);
                var t = JSON.parse(r);
                if (void 0 != t.model_list && t.model_list.length > 0) {
                    var a = document.getElementById("menuSpan");
                    void 0 == e ? e = PDB.tool.generateSpan(a, "modelSpan", "rightsubmenu") : e.innerHTML = "", PDB.DRUGMOVE = !1, result_list_title = "<br>Model List &nbsp;&nbsp;Score&nbsp;&nbsp;Download", PDB.tool.generateLabel(e, result_list_title, "");
                    for (var o in t.model_list) if ("" !== t.model_list[o]) {
                        var r = t.model_list[o], r = t.smolid + "_" + (parseInt(o) + 1);
                        PDB.tool.generateButton(e, r, t.model_list[o], "rightLabelPDB").addEventListener("click", function () {
                            var e = this.value.replace(".pdb", "");
                            PDB.config.selectedDrug = e, PDB.DRUBDB_URL.docking = t.outdir + "/", PDB.loader.loadDrug(e, "docking", function () {
                                w3m.mol[e].drug = !0, PDB.render.clearGroupIndex(PDB.GROUP_DOCKING);
                                PDB.painter.showHet(e, !0)
                            })
                        }), PDB.tool.generateLabel_nobr(e, t.scores[o], "docking_score"), PDB.tool.generateALink(e, "link" + o, "Link", t.outdir + "/" + t.model_list[o], ""), e.appendChild(document.createElement("br"))
                    }
                }
                PDB.render.clearGroupIndex(PDB.GROUP_DRUG)
            })
        }), e.appendChild(n), n
    }, setFaceColor: function (e, r) {
        var t = 2 * (r.y * r.width + r.x), a = t + 1;
        e.faces[t].materialIndex = r.colorIndex, e.faces[a].materialIndex = r.colorIndex
    }, toHumanByte: function (e) {
        var r = "";
        r = e < 102.4 ? e.toFixed(2) + "B" : e < 104857.6 ? (e / 1024).toFixed(2) + "KB" : e < 107374182.4 ? (e / 1048576).toFixed(2) + "MB" : (e / 1073741824).toFixed(2) + "GB";
        var t = r + "", a = t.indexOf(".");
        return "00" == t.substr(a + 1, 2) ? t.substring(0, a) + t.substr(a + 3, 2) : t
    }, setProgressBar: function (e, r) {
        var t = document.getElementById("progress");
        "none" == t.style.display && (t.style.display = "inline-block"), t.value = e, t.max = r
    }, printProgress: function (e) {
        document.getElementById("tip").innerHTML = e
    }, getValueByPercent: function (e, r, t) {
        return (r - e) / 100 * t + e
    }, getPercentByValue: function (e, r, t) {
        var a = (r - e) / 100;
        return Math.floor((t - e) / a)
    }, backToInitialPositonForDesktop: function () {
        camera.position.set(PDB.cameraPosition.x, PDB.cameraPosition.y, PDB.cameraPosition.z)
    }, getAtomInfoPosition: function (e, r) {
        var t = (3 * e.x + r.x) / 4, a = (3 * e.y + r.y) / 4, o = (3 * e.z + r.z) / 4;
        return new THREE.Vector3(t, a, o)
    }, isJsonString: function (e) {
        try {
            if ("object" == typeof JSON.parse(e)) return !0
        } catch (e) {
        }
        return !1
    }, createDensityMapMenuForVR: function (e) {
        limit = w3m.global.limit;
        var r = limit.x[1] + PDB.GeoCenterOffset.x, t = limit.z[1] + PDB.GeoCenterOffset.z;
        if (r *= .02, t *= .02, 1 === e.code && void 0 !== e.data) {
            var a = e.data;
            0 === PDB.EMMAP.FIRST_ID && a.length > 0 && (PDB.EMMAP.FIRST_ID = a[0])
        } else PDB.drawer.drawTextKB(PDB.GROUP_MENU_DENSITYMAP, new THREE.Vector3(r, 1.4, t), e.message, e.message, 41797, 135)
    }, createDensityMapPanel: function (e) {
        if (1 === e.code && void 0 !== e.data) {
            var r = this, t = document.getElementById("rightmenu");
            t.innerHTML = "";
            var a = (PDB.tool.generateLabel(t, "Map List", ""), PDB.tool.generateSpan(t, "menuSpan", "rightsubmenu")),
                o = PDB.tool.generateSpan(t, "menuSpan1", "rightsubmenu"), n = e.data, i = e.method;
            0 === PDB.EMMAP.FIRST_ID && n.length > 0 && (PDB.EMMAP.FIRST_ID = n[0]);
            PDB.tool.generateColorPanel(t);
            $(".simple_color").simpleColor({
                onSelect: function (e, r) {
                    var t = PDB.GROUP[PDB.GROUP_MAP];
                    if (void 0 !== t && t.children.length > 0 && t.children[0] instanceof THREE.Mesh && 0 !== PDB.EMMAP.TYPE) {
                        var a = PDB.GROUP[PDB.GROUP_MAP].children[0];
                        void 0 !== a.material && (a.material.color = new THREE.Color("#" + e))
                    }
                }
            });
            for (var s in n) {
                PDB.tool.generateButton(a, i + ": " + n[s], n[s], "rightLabelPDB").addEventListener("click", function () {
                    var e = this.value, t = i;
                    1 == PDB.DEBUG_MODE && (t = "map-local"), PDB.controller.emmapLoad(e, t, function (e) {
                        PDB.render.clearGroupIndex(PDB.GROUP_MAP);
                        var t = document.getElementById("dimension");
                        if (void 0 != t) switch (PDB.DIMENSION = Number(t.value), PDB.DIMENSION) {
                            case PDB.DIMENSION_X:
                                PDB.EMMAP.MAX_SLICE = Number(e.header.NC);
                                break;
                            case PDB.DIMENSION_Y:
                                PDB.EMMAP.MAX_SLICE = Number(e.header.NR);
                                break;
                            case PDB.DIMENSION_Z:
                                PDB.EMMAP.MAX_SLICE = Number(e.header.NS)
                        }
                        if (e) {
                            switch (PDB.EMMAP.TYPE) {
                                case 0:
                                    PDB.painter.showMapSolid(e, e.threshold);
                                    break;
                                case 1:
                                    PDB.painter.showMapSurface(e, e.threshold, !1);
                                    break;
                                case 2:
                                    PDB.painter.showMapSurface(e, e.threshold, !0)
                            }
                            r.changeDensityMapRangeValue(e)
                        }
                    })
                });
                var l = EmMapParser.getURLByType(n[s], i + "-desc");
                PDB.tool.generateALink(a, "mapLink" + s, "Detail", l, ""), a.appendChild(document.createElement("br"))
            }
            o.innerHTML = '<input class="labelPDB" id="solidMap" name="mapType" checked="checked"   type="radio" title="Map Type"/>  <label class="label"  for="solidMap"> Solid </label>   <BR/><input class="labelPDB" id="surfaceMap" name="mapType"  type="radio" title="Map Type"/>  <label class="label"  for="surfaceMap"> Surface </label>   <BR/><input class="labelPDB" id="meshMap" name="mapType"  type="radio" title="Map Type"/>  <label class="label"   for="meshMap"> Mesh </label>   <BR/><input class="labelPDB" type="checkbox" id="showSlice"><label class="label" for="showSlice"  > Show/Hide Slice </label> <BR/><input class="labelPDB" type="checkbox" checked id="showMap"><label class="label" for="showMap" > Show/Hide Map </label> <BR/><BR/><label class="label"> Step Size </label><BR/><input class="labelPDB" id="step1" name="stepOption"  type="radio" title="Map Type"/>  <label class="label" for="threeMode"> 1.x </label><input class="labelPDB" id="step2" name="stepOption"  checked="checked" type="radio" title="Map Type"/>  <label class="label" for="threeMode"> 2.x </label><input class="labelPDB" id="step4" name="stepOption"  type="radio" title="Map Type"/>  <label class="label" for="threeMode"> 4.x </label> <BR/><BR/><label class="label"> Level </label><BR/> <input type="range" id="thresholdRange" title="Change the value of threshold" style="width: 180px;" name="" min="1" max="100" /><BR/><label class="label" id="minThresHold"  style="width: 60px;text-align: left;float: left;"> </label><label class="label" id="currThresHold" style="width: 60px;text-align: center"> </label><label class="label" id="maxThresHold"  style="width: 60px;text-align: right;float: right;"> </label><BR/><label class="label"> Slice Range </label><BR/> <input type="range" id="sliceRange" title="Change the value of slice" style="width: 180px;" name="" /><BR/> <label class="label" id="minSlice"  style="width: 60px;text-align: left;float: left;"></label><label class="label" id="currSlice" style="width: 60px;text-align: center"></label><label class="label" id="maxSlice"  style="width: 60px;text-align: right; float: right" ></label><BR/><label class="label"> Slice Axis </label><BR/> <select id="dimension"> <option value="0" checked>x</option> <option value="1" checked>y</option> <option value="2" checked>z</option> </select> <BR/><label class="label"> Surface Color </label>';
            document.getElementById("solidMap").addEventListener("click", function (e) {
                if (PDB.render.clearGroupIndex(PDB.GROUP_MAP), PDB.EMMAP.TYPE = 0, PDB.map_surface_show = 0, PDB.EMMAP.DATA) {
                    var r = document.getElementById("currThresHold");
                    PDB.painter.showMapSolid(PDB.EMMAP.DATA, Number(r.innerHTML))
                }
            });
            document.getElementById("surfaceMap").addEventListener("click", function (e) {
                if (PDB.EMMAP.TYPE = 1, 0 === PDB.map_surface_show) {
                    if (PDB.render.clearGroupIndex(PDB.GROUP_MAP), PDB.EMMAP.DATA) {
                        var r = document.getElementById("currThresHold");
                        PDB.painter.showMapSurface(PDB.EMMAP.DATA, Number(r.innerHTML), !1)
                    }
                } else {
                    var t = PDB.GROUP[PDB.GROUP_MAP];
                    if (void 0 !== t && t.children.length > 0 && t.children[0] instanceof THREE.Mesh) {
                        var a = PDB.GROUP[PDB.GROUP_MAP].children[0];
                        void 0 !== a.material && (a.material.wireframe = !1)
                    }
                }
                PDB.map_surface_show = 1
            });
            document.getElementById("meshMap").addEventListener("click", function (e) {
                if (PDB.EMMAP.TYPE = 2, 0 === PDB.map_surface_show) {
                    if (PDB.render.clearGroupIndex(PDB.GROUP_MAP), PDB.EMMAP.DATA) {
                        var r = document.getElementById("currThresHold");
                        PDB.painter.showMapSurface(PDB.EMMAP.DATA, Number(r.innerHTML), !0)
                    }
                } else {
                    var t = PDB.GROUP[PDB.GROUP_MAP];
                    if (void 0 !== t && t.children.length > 0 && t.children[0] instanceof THREE.Mesh) {
                        var a = PDB.GROUP[PDB.GROUP_MAP].children[0];
                        void 0 !== a.material && (a.material.wireframe = !0)
                    }
                }
                PDB.map_surface_show = 1
            });
            document.getElementById("step1").addEventListener("click", function (e) {
                PDB.map_step = 1, PDB.tool.showDestinyMap()
            });
            document.getElementById("step2").addEventListener("click", function (e) {
                PDB.map_step = 2, PDB.tool.showDestinyMap()
            });
            document.getElementById("step4").addEventListener("click", function (e) {
                PDB.map_step = 4, PDB.tool.showDestinyMap()
            });
            document.getElementById("showSlice").addEventListener("click", function (e) {
                if (PDB.render.clearGroupIndex(PDB.GROUP_SLICE), e.target.checked && void 0 !== PDB.EMMAP.DATA) {
                    PDB.EMMAP.SHOW_SLICE = !0;
                    var r = Number(document.getElementById("sliceRange").value);
                    document.getElementById("currSlice").innerHTML = r;
                    var t = document.getElementById("currThresHold"), a = Number(t.innerHTML);
                    PDB.painter.showMapSlices(PDB.EMMAP.DATA, a, r, PDB.DIMENSION)
                } else PDB.EMMAP.SHOW_SLICE = !1
            });
            document.getElementById("showMap").addEventListener("click", function (e) {
                if (e.target.checked && void 0 !== PDB.EMMAP.DATA) {
                    PDB.EMMAP.SHOW_MAP = !0;
                    var r = PDB.EMMAP.DATA, t = document.getElementById("currThresHold"), a = Number(t.innerHTML);
                    switch (PDB.EMMAP.TYPE) {
                        case 0:
                            PDB.painter.showMapSolid(r, a);
                            break;
                        case 1:
                            PDB.painter.showMapSurface(r, a, !1);
                            break;
                        case 2:
                            PDB.painter.showMapSurface(r, a, !0)
                    }
                } else PDB.render.clearGroupIndex(PDB.GROUP_MAP), PDB.EMMAP.SHOW_MAP = !1
            });
            document.getElementById("sliceRange").addEventListener("change", function (e) {
                var r = PDB.EMMAP.DATA, t = Number(e.target.value);
                PDB.render.clearGroupIndex(PDB.GROUP_SLICE), document.getElementById("currSlice").innerHTML = t, PDB.EMMAP.SHOW_SLICE && PDB.painter.showMapSlices(r, r.threshold, t, PDB.DIMENSION)
            });
            document.getElementById("thresholdRange").addEventListener("change", function (e) {
                var r = PDB.EMMAP.DATA;
                if (r) {
                    var t = Number(e.target.value), a = PDB.tool.getValueByPercent(r.header.min, r.header.max, t);
                    if (document.getElementById("currThresHold").innerHTML = a.toFixed(3), PDB.EMMAP.SHOW_MAP) switch (PDB.render.clearGroupIndex(PDB.GROUP_MAIN), PDB.EMMAP.TYPE) {
                        case 0:
                            PDB.painter.showMapSolid(r, a);
                            break;
                        case 1:
                            PDB.painter.showMapSurface(r, a, !1);
                            break;
                        case 2:
                            PDB.painter.showMapSurface(r, a, !0)
                    }
                }
            });
            document.getElementById("dimension").addEventListener("change", function (e) {
                var r = e.target.value;
                r && (r = Number(r)), PDB.DIMENSION = r;
                var t = PDB.EMMAP.DATA;
                if (t && PDB.EMMAP.SHOW_SLICE) {
                    PDB.render.clearGroupIndex(PDB.GROUP_SLICE);
                    var a = document.getElementById("sliceRange");
                    switch (a.min = 1, PDB.DIMENSION) {
                        case PDB.DIMENSION_X:
                            a.max = Number(t.header.NC);
                            break;
                        case PDB.DIMENSION_Y:
                            a.max = Number(t.header.NR);
                            break;
                        case PDB.DIMENSION_Z:
                            a.max = Number(t.header.NS)
                    }
                    var a = document.getElementById("sliceRange");
                    a.value = 1;
                    document.getElementById("minSlice").innerHTML = a.min;
                    document.getElementById("maxSlice").innerHTML = a.max;
                    document.getElementById("currSlice").innerHTML = a.value, PDB.painter.showMapSlices(t, t.threshold, 0, PDB.DIMENSION)
                }
            })
        }
    }, showDestinyMap: function () {
        if (0 === PDB.EMMAP.TYPE) {
            if (PDB.render.clearGroupIndex(PDB.GROUP_MAP), PDB.map_surface_show = 0, PDB.EMMAP.DATA) {
                var e = document.getElementById("currThresHold");
                PDB.painter.showMapSolid(PDB.EMMAP.DATA, Number(e.innerHTML))
            }
        } else if (1 === PDB.EMMAP.TYPE) {
            if (PDB.render.clearGroupIndex(PDB.GROUP_MAP), PDB.EMMAP.DATA) {
                var e = document.getElementById("currThresHold");
                PDB.painter.showMapSurface(PDB.EMMAP.DATA, Number(e.innerHTML), !1)
            }
            PDB.map_surface_show = 1
        } else if (2 === PDB.EMMAP.TYPE) {
            if (PDB.render.clearGroupIndex(PDB.GROUP_MAP), PDB.EMMAP.DATA) {
                var e = document.getElementById("currThresHold");
                PDB.painter.showMapSurface(PDB.EMMAP.DATA, Number(e.innerHTML), !0)
            }
            PDB.map_surface_show = 1
        }
    }, changeDensityMapRangeValue: function (e) {
        document.getElementById("thresholdRange").value = PDB.tool.getPercentByValue(e.header.min, e.header.max, e.threshold), document.getElementById("minThresHold").innerHTML = e.header.min.toFixed(3), document.getElementById("maxThresHold").innerHTML = e.header.max.toFixed(3), document.getElementById("currThresHold").innerHTML = e.threshold.toFixed(3);
        var r = document.getElementById("sliceRange");
        r.min = PDB.EMMAP.MIN_SLICE, r.max = PDB.EMMAP.MAX_SLICE, r.value = PDB.EMMAP.MIN_SLICE, document.getElementById("minSlice").innerHTML = PDB.EMMAP.MIN_SLICE, document.getElementById("maxSlice").innerHTML = PDB.EMMAP.MAX_SLICE, document.getElementById("currSlice").innerHTML = PDB.EMMAP.MIN_SLICE;
        var t = document.getElementById("solidMap"), a = document.getElementById("surfaceMap"),
            o = document.getElementById("meshMap");
        switch (PDB.EMMAP.TYPE) {
            case 0:
                t.checked = "checked";
                break;
            case 1:
                a.checked = "checked";
                break;
            case 2:
                o.checked = "checked"
        }
    }, initChainNameFlag: function (e, r, t) {
    }, clearChainNameFlag: function () {
    }, bindAllChainEvent: function (e, r) {
        $(".chainBtn").bind("click", function (r) {
            var t = $("#" + r.target.id).html().split(":"), a = Number(t[0]);
            t[1];
            if (a > PDB.initChainNumThreshold) {
                for (var o = 0; o < a; o++) if (!$($(".chainBtn")[o]).hasClass("chainSelected")) {
                    var n = $(".chainBtn")[o].id, i = n.split("_")[1];
                    PDB.render.clearGroupIndex(n);
                    for (var s in w3m.mol[PDB.pdbId].residueData[i]) PDB.painter.showResidue(i, s, e, !0);
                    $($(".chainBtn")[o]).addClass("chainSelected")
                }
            } else if (a < PDB.initChainNumThreshold) for (var o = PDB.initChainNumThreshold - 1; o > a - 1; o--) if ($($(".chainBtn")[o]).hasClass("chainSelected")) {
                var n = $(".chainBtn")[o].id, i = n.split("_")[1];
                PDB.render.clearGroupIndex(n);
                for (var s in w3m.mol[PDB.pdbId].residueData[i]) PDB.painter.showResidue(i, s, PDB.LINE, !0);
                $($(".chainBtn")[o]).removeClass("chainSelected")
            }
            PDB.initChainNumThreshold = a
        })
    }, getRealVectorForRepeatPainter: function (e) {
        for (var r in PDB.residueGroupObject) for (var t in PDB.residueGroupObject[r]) PDB.residueGroupObject[r][t].vector.x -= e.x, PDB.residueGroupObject[r][t].vector.y -= e.y, PDB.residueGroupObject[r][t].vector.z -= e.z;
        PDB.painter.repeatPainter()
    }, rotateAboutWorldAxis: function (e, r, t) {
        var a = new THREE.Matrix4;
        a.makeRotationAxis(r.normalize(), t);
        var o = new THREE.Vector4(e.x, e.y, e.z, 1), n = o.applyMatrix4(a);
        return new THREE.Vector3(n.x, n.y, n.z)
    }, freshAllResidueGroupObject: function (e) {
        if (PDB.nowRotateAngle = PDB.nowRotateAngle + e, Math.abs(PDB.nowRotateAngle) >= PDB.rotateAngleThreshold) {
            var r, t = this;
            switch (PDB.ROTATION_AXIS) {
                case 1:
                    PDB.rotateAxisAngle.x += e, r = new THREE.Vector3(1, 0, 0);
                    break;
                case 2:
                    PDB.rotateAxisAngle.y += e, r = new THREE.Vector3(0, 1, 0);
                    break;
                case 3:
                    PDB.rotateAxisAngle.z += e, r = new THREE.Vector3(0, 0, 1)
            }
            for (var a in PDB.residueGroupObject) for (var o in PDB.residueGroupObject[a]) {
                var n = camera.position, i = PDB.residueGroupObject[a][o].vector, s = {
                    x: n.x + i.x - PDB.rotateAxis.x,
                    y: n.y + i.y - PDB.rotateAxis.y,
                    z: n.z + i.z - PDB.rotateAxis.z
                }, l = t.rotateAboutWorldAxis(s, r, PDB.nowRotateAngle);
                PDB.residueGroupObject[a][o].vector.x = l.x - n.x + PDB.rotateAxis.x, PDB.residueGroupObject[a][o].vector.y = l.y - n.y + PDB.rotateAxis.y, PDB.residueGroupObject[a][o].vector.z = l.z - n.z + PDB.rotateAxis.z
            }
            PDB.painter.repeatPainter(), PDB.nowRotateAngle = 0
        }
    }, freshOneVector: function (e, r) {
        if (r.x && 0 != r.x) {
            var t = new THREE.Vector3(1, 0, 0);
            e = PDB.tool.rotateAboutWorldAxis(e, t, r.x)
        }
        if (r.y && 0 != r.y) {
            var t = new THREE.Vector3(0, 1, 0);
            e = PDB.tool.rotateAboutWorldAxis(e, t, r.y)
        }
        if (r.z && 0 != r.z) {
            var t = new THREE.Vector3(0, 0, 1);
            e = PDB.tool.rotateAboutWorldAxis(e, t, r.z)
        }
        return e
    }, getVectorLength: function (e) {
        return Math.sqrt(Math.pow(e.x, 2) + Math.pow(e.y, 2) + Math.pow(e.z, 2))
    }, rotation: function (e, r) {
        PDB.tool.rotation_y(e, r)
    }, rotation_x: function (e, r) {
        var t = this;
        0 === r ? (e.forEach(function (e) {
            var r = PDB.GROUP[e];
            void 0 !== r && (r.rotation.x = r.rotation.x - .025)
        }), t.freshAllResidueGroupObject(-.025)) : 1 === r && (e.forEach(function (e) {
            var r = PDB.GROUP[e];
            void 0 !== r && (r.rotation.x = r.rotation.x + .025)
        }), t.freshAllResidueGroupObject(.025))
    }, rotation_y: function (e, r) {
        var t = this;
        0 === r ? (e.forEach(function (e) {
            var r = PDB.GROUP[e];
            void 0 !== r && (r.rotation.y = r.rotation.y - .025)
        }), t.freshAllResidueGroupObject(-.025)) : 1 === r && (e.forEach(function (e) {
            var r = PDB.GROUP[e];
            void 0 !== r && (r.rotation.y = r.rotation.y + .025)
        }), t.freshAllResidueGroupObject(.025))
    }, rotation_z: function (e, r) {
        var t = this;
        0 === r ? (e.forEach(function (e) {
            var r = PDB.GROUP[e];
            void 0 !== r && (r.rotation.z = r.rotation.z - .025)
        }), t.freshAllResidueGroupObject(-.025)) : 1 === r && (e.forEach(function (e) {
            var r = PDB.GROUP[e];
            void 0 !== r && (r.rotation.z = r.rotation.z + .025)
        }), t.freshAllResidueGroupObject(.025))
    }, saveString: function (e, r) {
        var t = new Blob([e], {type: "text/plain"}), a = document.createElement("a");
        a.style.display = "none", document.body.appendChild(a), a.href = URL.createObjectURL(t), a.download = r || "data.obj", a.click()
    }, generateDrugMigrationPath: function (e) {
        function r(e, r) {
            return r.len - e.len
        }

        var t = "";
        if (e) {
            var a = -(e.x[0] + e.x[1]) / 2, o = -(e.y[0] + e.y[1]) / 2, n = -(e.z[0] + e.z[1]) / 2;
            t = new THREE.Vector3(a, o, n)
        } else e = {x: PDB.limit.x, y: PDB.limit.y, z: PDB.limit.z}, t = PDB.GeoCenterOffset;
        var i = e.x[1] - e.x[0], s = e.y[1] - e.y[0], l = e.z[1] - e.z[0], c = Math.PI;
        PDB.DRUGMigrationPaths = [], PDB.DRUGMigrationRotates = [];
        for (var d = 0; d < 50; d++) {
            var m = new THREE.Vector3(Math.random() * i + e.x[0], Math.random() * s + e.y[0], Math.random() * l + e.z[0]);
            m.len = Math.sqrt(Math.pow(m.x, 2) + Math.pow(m.y, 2) + Math.pow(m.z, 2)), PDB.DRUGMigrationPaths.push(m);
            var P = new THREE.Euler(2 * Math.random() * c - c, 2 * Math.random() * c - c, 2 * Math.random() * c - c, "XYZ");
            PDB.DRUGMigrationRotates.push(P)
        }
        PDB.DRUGMigrationPaths.sort(r);
        var u = new THREE.Vector3(0 - t.x, 0 - t.y, 0 - t.z);
        PDB.GROUP[PDB.GROUP_DRUG].position.copy(u)
    }, migrationDrug: function () {
        if (PDB.GROUP[PDB.GROUP_DRUG] && PDB.GROUP[PDB.GROUP_DRUG].children.length > 0) {
            PDB.PathCount || (PDB.PathCount = 0);
            var e = PDB.PathCount % PDB.DRUGMigrationPaths.length;
            if (PDB.DRUGMigrationPaths.length > 0) {
                var r = new THREE.Vector3(PDB.DRUGMigrationPaths[e].x + PDB.rotateAxis.x, PDB.DRUGMigrationPaths[e].y + PDB.rotateAxis.y, PDB.DRUGMigrationPaths[e].z + PDB.rotateAxis.z);
                r = PDB.tool.freshOneVector(r, PDB.rotateAxisAngle), PDB.GROUP[PDB.GROUP_DRUG].position.copy(r)
            }
            if (void 0 != PDB.GROUP[PDB.GROUP_SURFACE_HET]) {
                var t = PDB.GROUP[PDB.GROUP_DRUG].position;
                PDB.GROUP[PDB.GROUP_SURFACE_HET].position.copy(t)
            }
            PDB.PathCount++
        }
    }, showMutationTable: function (e, r) {
        var t = document.getElementById("rightmenu");
        t.innerHTML = "", t.style.overflowY = "auto", t.style.height = document.body.clientHeight - 110 + "px", t.hidden = !e;
        var a = JSON.parse(r);
        if (1 === a.code && void 0 !== a.data) {
            for (var o = (PDB.tool.generateLabel(t, "Mutation info table", ""), a.data.mutations), n = document.createElement("table"), i = document.createElement("tr"), s = ["pos", "p_change", "v_class", "v_type", "disease"], l = 0; l < s.length; l++) {
                var c = document.createElement("td");
                c.innerHTML = s[l], i.appendChild(c)
            }
            n.appendChild(i), n.style.color = "#FFFFFF", n.style.borderColor = "#FFFFFF";
            for (var l = 0; l < o.length; l++) {
                var d = n.insertRow();
                d.id = o[l].pos + o[l].p_change;
                d.insertCell(0).innerHTML = o[l].pos;
                d.insertCell(1).innerHTML = o[l].p_change;
                d.insertCell(2).innerHTML = o[l].v_class;
                d.insertCell(3).innerHTML = o[l].v_type;
                var m = d.insertCell(4);
                o[l].disease && (m.innerHTML = o[l].disease)
            }
            PDB.tool.generateSpan(t, "span", "rightsubmenu").appendChild(n)
        }
    }, showAxis: function (e) {
        if (void 0 !== PDB.GROUP[PDB.GROUP_AXIS] && 0 === PDB.GROUP[PDB.GROUP_AXIS].children.length) {
            var r = Math.max(PDB.limit.x[1], PDB.limit.y[1], PDB.limit.z[1]), t = new THREE.AxisHelper(r);
            PDB.GROUP[PDB.GROUP_AXIS].add(t)
        } else void 0 !== PDB.GROUP[PDB.GROUP_AXIS] && PDB.GROUP[PDB.GROUP_AXIS].children.length > 0 && (PDB.GROUP[PDB.GROUP_AXIS].visible = e)
    }, editingReplace: function (e, r, t, a) {
        if (PDB.GROUP_ONE_RES = PDB.GROUP_COUNT + 1, PDB.GROUP[PDB.GROUP_ONE_RES]) {
            for (var o in PDB.GROUP[PDB.GROUP_ONE_RES].children) PDB.GROUP[PDB.GROUP_ONE_RES].remove(PDB.GROUP[PDB.GROUP_ONE_RES].children[o]);
            PDB.GROUP[PDB.GROUP_ONE_RES].position.copy(new THREE.Vector3(0, 0, 0))
        } else PDB.GROUP[PDB.GROUP_ONE_RES] = new THREE.Group;
        var n = PDB.SPHERE;
        n = Number(n), isNaN(n) && (n = PDB.SPHERE);
        var i, s = "chain_" + e;
        PDB.GROUP[s + "_low"] && (i = s + "_low");
        var l = a;
        if (w3m.mol[l]) {
            PDB.painter.showOneRes(n, l);
            var c = r, d = t, m = new THREE.Vector3(d[0], d[1], d[2]);
            PDB.GROUP[PDB.GROUP_ONE_RES].position.copy(m);
            var P = new THREE.Vector3(0, 0, 0), u = {};
            if (PDB.GROUP[s]) {
                var D = 0;
                for (var o in PDB.GROUP[s].children) if (PDB.GROUP[s].children[o].userData && PDB.GROUP[s].children[o].userData.presentAtom) {
                    var _ = PDB.GROUP[s].children[o].userData.presentAtom.resid;
                    if (_ == c && (D++, P.copy(PDB.GROUP[s].children[o].userData.presentAtom.pos_centered), 1 == D && $.extend(u, PDB.GROUP[s].children[o].userData.presentAtom, !0), PDB.GROUP[s].remove(PDB.GROUP[s].children[o]), D > 7)) break
                }
            }
            var h = new THREE.Group;
            h.copy(PDB.GROUP[PDB.GROUP_ONE_RES]);
            var B = new THREE.Vector3(0, 0, 0);
            for (var o in h.children) if ("ca" == h.children[o].userData.presentAtom.name) if (h.children[o].type = "Line") {
                var p = h.children[o].userData.presentAtom.pos_centered;
                B.copy(new THREE.Vector3(p.x, p.y, p.z))
            } else B.copy(h.children[o].position);
            for (var o in h.children) {
                var E = h.children[o];
                E.position.x = E.position.x - B.x, E.position.y = E.position.y - B.y, E.position.z = E.position.z - B.z
            }
            if (h.userData = {group: s, presentAtom: u}, PDB.GROUP[s].add(h), h.position.copy(P), i && PDB.GROUP[i]) {
                var D = 0;
                for (var o in PDB.GROUP[i].children) if (PDB.GROUP[i].children[o].userData && PDB.GROUP[i].children[o].userData.presentAtom) {
                    var _ = PDB.GROUP[i].children[o].userData.presentAtom.resid;
                    if (_ == c && (D++, PDB.GROUP[i].remove(PDB.GROUP[i].children[o]), D > 7)) break
                }
                var f = new THREE.Group;
                f.copy(h), f.userData = {group: s, presentAtom: u}, PDB.GROUP[i].add(f)
            }
            PDB.GROUP[PDB.GROUP_ONE_RES].children = []
        } else PDB.loader.loadResidue(l, function () {
            PDB.painter.showOneRes(n, l);
            var e = r, a = t, o = new THREE.Vector3(a[0], a[1], a[2]);
            PDB.GROUP[PDB.GROUP_ONE_RES].position.copy(o);
            var c = new THREE.Vector3(0, 0, 0), d = {};
            if (PDB.GROUP[s]) {
                var m = 0;
                for (var P in PDB.GROUP[s].children) if (PDB.GROUP[s].children[P].userData && PDB.GROUP[s].children[P].userData.presentAtom) {
                    var u = PDB.GROUP[s].children[P].userData.presentAtom.resid;
                    if (u == e && (m++, c.copy(PDB.GROUP[s].children[P].userData.presentAtom.pos_centered), 1 == m && $.extend(d, PDB.GROUP[s].children[P].userData.presentAtom, !0), PDB.GROUP[s].remove(PDB.GROUP[s].children[P]), m > 7)) break
                }
            }
            d.resname = l;
            var D = new THREE.Group;
            D.copy(PDB.GROUP[PDB.GROUP_ONE_RES]);
            var _ = new THREE.Vector3(0, 0, 0);
            for (var P in D.children) if ("ca" == D.children[P].userData.presentAtom.name) if (D.children[P].type = "Line") {
                var h = D.children[P].userData.presentAtom.pos_centered;
                _.copy(new THREE.Vector3(h.x, h.y, h.z))
            } else _.copy(D.children[P].position);
            for (var P in D.children) {
                var B = D.children[P];
                B.position.x = B.position.x - _.x, B.position.y = B.position.y - _.y, B.position.z = B.position.z - _.z
            }
            if (D.userData = {group: s, presentAtom: d}, PDB.GROUP[s].add(D), D.position.copy(c), i && PDB.GROUP[i]) {
                var m = 0;
                for (var P in PDB.GROUP[i].children) if (PDB.GROUP[i].children[P].userData && PDB.GROUP[i].children[P].userData.presentAtom) {
                    var u = PDB.GROUP[i].children[P].userData.presentAtom.resid;
                    if (u == e && (m++, PDB.GROUP[i].remove(PDB.GROUP[i].children[P]), m > 7)) break
                }
                var p = new THREE.Group;
                p.copy(D), p.userData = {group: s, presentAtom: d}, PDB.GROUP[i].add(p)
            }
            PDB.GROUP[PDB.GROUP_ONE_RES].children = []
        })
    }, getResidueId: function (e) {
        var r = 0, t = w3m.mol[PDB.pdbId].atom.main;
        for (var a in t) {
            var o = t[a], n = o[2], i = (o[3], o[4]), s = o[5];
            "a" == i && "ca" == n && e.id == o[1] && (r = s)
        }
        return r
    }, updateAllEditResInfo: function (e, r, t, a, o) {
        if (!PDB.allMainToms) {
            PDB.allMainToms = {};
            var n = "-", i = "-", s = {};
            for (var l in w3m.mol[PDB.pdbId].atom.main) {
                var c = w3m.mol[PDB.pdbId].atom.main[l];
                PDB.allMainToms[c[4]] || (PDB.allMainToms[c[4]] = {}), PDB.allMainToms[c[4]][c[5]] ? i = c[4] : PDB.allMainToms[c[4]][c[5]] = {startAtomID: Number(l)}, n != c[5] && "-" != n ? (PDB.allMainToms[i][n].endAtomID = Number(l) - 1, s[c[4]] = 1) : s[c[4]]++, n = c[5]
            }
            for (var l in PDB.allMainToms) {
                var d = Object.keys(PDB.allMainToms[l]);
                PDB.allMainToms[l][d[d.length - 1]].endAtomID = PDB.allMainToms[l][d[d.length - 1]].startAtomID + s[l] - 1
            }
        }
        var m = "-", P = "-";
        for (var l in w3m.mol[PDB.pdbId].atom.main) {
            var c = w3m.mol[PDB.pdbId].atom.main[l];
            if (o == c[4]) {
                if (c[5] == a) {
                    if ("-" != m) continue;
                    m = w3m.structure.enum[t].length - w3m.structure.enum[c[3]].length, PDB.allMainToms[c[4]][c[5]].state = "editRes", PDB.allMainToms[c[4]][c[5]].atoms = [];
                    var u = (PDB.GeoCenterOffset, {x: e.pos.x - r.x, y: e.pos.y - r.y, z: e.pos.z - r.z}),
                        D = PDB.allMainToms[c[4]][c[5]].startAtomID;
                    for (var _ in w3m.mol[t].atom.main) {
                        var h = w3m.mol[t].atom.main[_], B = {};
                        $.extend(B, h, !0), B[6][0] = B[6][0] + u.x, B[6][1] = B[6][1] + u.y, B[6][2] = B[6][2] + u.z, B[4] = o, B[1] = D, PDB.allMainToms[c[4]][c[5]].atoms.push(B), D++
                    }
                    PDB.allMainToms[c[4]][c[5]].endAtomID = D - 1, P = c[5]
                } else if ("-" != m) {
                    if (!P || P == c[5] || "-" == P) continue;
                    PDB.allMainToms[c[4]][c[5]].state || (PDB.allMainToms[c[4]][c[5]].state = "justID"), PDB.allMainToms[c[4]][c[5]].endAtomID = PDB.allMainToms[c[4]][c[5]].endAtomID + Number(m), PDB.allMainToms[c[4]][c[5]].startAtomID = PDB.allMainToms[c[4]][c[5]].startAtomID + Number(m)
                }
                P = c[5]
            } else "-" != m && P && P != c[5] && "-" != P && (PDB.allMainToms[c[4]][c[5]].state || (PDB.allMainToms[c[4]][c[5]].state = "justID"), PDB.allMainToms[c[4]][c[5]].endAtomID = PDB.allMainToms[c[4]][c[5]].endAtomID + Number(m), PDB.allMainToms[c[4]][c[5]].startAtomID = PDB.allMainToms[c[4]][c[5]].startAtomID + Number(m)), P = c[5]
        }
    }, clearTempAtomId: function () {
        for (var e in PDB.allMainToms) for (var r in PDB.allMainToms[e]) PDB.allMainToms[e][r].tempID = void 0
    }, replacePos: function (e, r, t) {
        return e.substr(0, r - 1) + t + e.substring(r, e.length - 1)
    }, replacePosByStartEnd: function (e, r, t, a) {
        var o = t - e.length;
        if (e.length < t) for (var n = 0; n < o; n++) e += " ";
        return e.substr(0, r) + a + e.substring(t, e.length - 1)
    }, fillSpace: function (e, r, t) {
        if (t = t || "qian", e += "", e.length > r) return "";
        for (var a = e.length, o = 0; o < r - a; o++) "hou" == t ? e += " " : e = " " + e;
        return e
    }, initFragmentInfo: function () {
        PDB.fragmentList = {};
        var e = 0;
        if (fragment) for (var r in fragment) {
            var t = fragment[r];
            if (!(t.length < 2) && 2 != t.length) {
                var a, o, n;
                if (4 == t.length && t[1] != t[2]) {
                    if (t[2] < t[1]) {
                        var i = t[2];
                        t[2] = t[1], t[1] = i
                    }
                    a = w3m.mol[PDB.pdbId].residueData[t[0]][t[1]], o = w3m.mol[PDB.pdbId].residueData[t[0]][t[2]], n = t[3]
                } else 3 == t.length && (a = w3m.mol[PDB.pdbId].residueData[t[0]][t[1]], o = w3m.mol[PDB.pdbId].residueData[t[0]][t[1]], n = t[2]);
                var s = {start: a, end: o, issel: !0, reptype: n};
                PDB.fragmentList[e] = s, e++
            }
        }
    }, showDrugMenuForVr: function (e) {
        PDB.tool.ajax.get(e, function (e) {
            var r = JSON.parse(e);
            if (1 === r.code && void 0 !== r.data) {
                PDB.tool.generateDrugMigrationPath(o);
                var t = PDB.GROUP_VR_MENU_DRUG, a = PDB.GROUP[t], o = w3m.global.limit,
                    n = o.x[1] + PDB.GeoCenterOffset.x, i = o.z[1] + PDB.GeoCenterOffset.z;
                n = .02 * n - 2, i = .022 * i - 2.5;
                var s = new THREE.Vector3(n, 1.5, i);
                a.position.copy(s);
                var l = s.clone(), c = l.clone(), d = l.clone();
                c.x = c.x + 1.1, d.x = d.x + 2.4, PDB.drawer.drawTextKB(PDB.GROUP_VR_MENU_SWITCH, c, "MENU ON", "menuOn", 3652927, 135), PDB.drawer.drawTextKB(PDB.GROUP_VR_MENU_SWITCH, d, "MENU OFF", "menuOff", 16662290, 135), PDB.GROUP[PDB.GROUP_VR_MENU_SWITCH].position.copy(l);
                var m = "drugListMenu";
                PDB.drawer.drawTextKB(t, l, "Drug List", "", 8003, 135);
                var P = r.data[0].bindingdb;
                if (void 0 !== P && "" !== P && "null" !== P) {
                    var l = new THREE.Vector3(l.x, l.y - .2, l.z);
                    PDB.drawer.drawTextKB(t, l, "bindingdb", "", 8003, 135), l = PDB.tool.addDrugMenuForVr(t, l, PDB.DRUG_MODE_CONFIG.BINDING_DB, P, 8003, m + "," + PDB.DRUG_MODE_CONFIG.BINDING_DB)
                }
                var u = r.data[0].chembl;
                if (void 0 !== u && "" !== u && "null" !== u) {
                    var l = new THREE.Vector3(l.x, l.y - .2, l.z);
                    PDB.drawer.drawTextKB(t, l, "chembl", "", 8003, 135), l = PDB.tool.addDrugMenuForVr(t, l, PDB.DRUG_MODE_CONFIG.CHEMBL, u, 8003, m + "," + PDB.DRUG_MODE_CONFIG.CHEMBL)
                }
                var D = r.data[0].swisslipids;
                if (void 0 !== D && "" !== D && "null" !== D) {
                    var l = new THREE.Vector3(l.x, l.y - .2, l.z);
                    PDB.drawer.drawTextKB(t, l, "swisslip", "", 8003, 135), l = PDB.tool.addDrugMenuForVr(t, l, PDB.DRUG_MODE_CONFIG.SWISSLIPIDS, D, 8003, m + "," + PDB.DRUG_MODE_CONFIG.SWISSLIPIDS)
                }
                var _ = r.data[0].guidetopharmacology;
                if (void 0 !== _ && "" !== _ && "null" !== _) {
                    var l = new THREE.Vector3(l.x, l.y - .2, l.z);
                    PDB.drawer.drawTextKB(t, l, "guidetopharmacology", "", 8003, 135), l = PDB.tool.addDrugMenuForVr(t, l, PDB.DRUG_MODE_CONFIG.GUIDETOPHARMACOLOGY, _, 8003, m + "," + PDB.DRUG_MODE_CONFIG.GUIDETOPHARMACOLOGY)
                }
                var h = r.data[0].drugbank;
                if (void 0 !== h && "" !== h && "null" !== h) {
                    var l = new THREE.Vector3(l.x, l.y - .2, l.z);
                    PDB.drawer.drawTextKB(t, l, "drugbank", "", 8003, 135), l = PDB.tool.addDrugMenuForVr(t, l, PDB.DRUG_MODE_CONFIG.DRUG_BANK, h, 8003, m + "," + PDB.DRUG_MODE_CONFIG.DRUG_BANK)
                }
            } else PDB.tool.printProgress(r.message)
        })
    }, addDrugMenuForVr: function (e, r, t, a, o, n) {
        if (void 0 !== a && "" !== a && "null" !== a) {
            var i = a.split(";");
            for (var s in i) if ("" !== i[s]) {
                var r = new THREE.Vector3(r.x, r.y - .2, r.z), l = new THREE.Vector3(r.x + 2.5, r.y, r.z);
                PDB.drawer.drawTextKB(e, r, i[s], n, o, 135), PDB.drawer.drawTextKB(e, l, "Docking", "Docking," + i[s], o, 135)
            }
        }
        return r
    }, showDockingMenuForVr: function (e) {
        PDB.DRUGMOVE = !0, PDB.drugMoveTime = new Date;
        var r = w3m.global.limit.x[0] + (w3m.global.limit.x[1] - w3m.global.limit.x[0]) / 2,
            t = w3m.global.limit.y[0] + (w3m.global.limit.y[1] - w3m.global.limit.y[0]) / 2,
            a = w3m.global.limit.z[0] + (w3m.global.limit.z[1] - w3m.global.limit.z[0]) / 2,
            o = w3m.global.limit.x[1] - w3m.global.limit.x[0], n = w3m.global.limit.y[1] - w3m.global.limit.y[0],
            i = w3m.global.limit.z[1] - w3m.global.limit.z[0];
        PDB.DRUG_MODE_CONFIG.x_c = r, PDB.DRUG_MODE_CONFIG.y_c = t, PDB.DRUG_MODE_CONFIG.z_c = a, PDB.DRUG_MODE_CONFIG.x_s = o, PDB.DRUG_MODE_CONFIG.y_s = n, PDB.DRUG_MODE_CONFIG.z_s = i;
        var s = PDB.DOCKING_URL + "?pdbid=" + PDB.pdbId.toUpperCase() + "&smolid=" + e + "&x_c=" + PDB.DRUG_MODE_CONFIG.x_c + "&y_c=" + PDB.DRUG_MODE_CONFIG.y_c + "&z_c=" + PDB.DRUG_MODE_CONFIG.z_c + "&x_s=" + PDB.DRUG_MODE_CONFIG.x_s + "&y_s=" + PDB.DRUG_MODE_CONFIG.y_s + "&z_s=" + PDB.DRUG_MODE_CONFIG.z_s;
        2 !== ServerType && (s = SERVERURL + "/data/autodock.json"), PDB.tool.ajax.get(s, function (e) {
            var r = JSON.parse(e);
            if (void 0 != r.model_list && r.model_list.length > 0) {
                PDB.DRUGMOVE = !1;
                var t = PDB.GROUP[PDB.GROUP_VR_MENU_DOCKING], a = w3m.global.limit, o = a.x[1] + PDB.GeoCenterOffset.x,
                    n = a.z[1] + PDB.GeoCenterOffset.z;
                o *= .02, n = .022 * n - 2.5;
                var i = new THREE.Vector3(o, 1.5, n);
                t.position.copy(i);
                var s = i.clone(), l = "";
                PDB.drawer.drawTextKB(PDB.GROUP_VR_MENU_DOCKING, s, "Docking List", l, 8003, 135);
                for (var c in r.model_list) "" !== r.model_list[c] && (s = new THREE.Vector3(s.x, s.y - .2, s.z), l = "dockingMenu," + r.model_list[c] + "," + r.outdir, PDB.drawer.drawTextKB(PDB.GROUP_VR_MENU_DOCKING, s, r.model_list[c], l, 8003, 135))
            }
        })
    }, showSegmentholder: function (e, r) {
        var t = document.getElementById("segmentholder");
        t.style.display = e ? "table" : "none", r && (t.innerHTML = '<div class="holderClass">Just a moment, please.</div>')
    }, hideGroup: function (e) {
        void 0 !== PDB.GROUP[e] && PDB.GROUP[e].length > 0 && (PDB.GROUP[e].visible = !1)
    }, showGroup: function (e) {
        void 0 !== PDB.GROUP[e] && PDB.GROUP[e].length > 0 && (PDB.GROUP[e].visible = !0)
    }
};
var font, loader = new THREE.FontLoader;
loader.load("js/fonts/helvetiker_bold.typeface.json", function (e) {
    font = e
});
var fontloader = PDB.drawer = {
    drawLabel: function (e, r, t, a) {
        var o = document.createElement("div");
        o.className = "label", o.style.color = "rgb(255,255,255)", o.style.color = "rgb(" + atom[3][0] + "," + atom[3][1] + "," + atom[3][2] + ")", o.textContent = a;
        var n = new THREE.CSS2DObject(o);
        n.position.copy(r), PDB.GROUP[e].add(n)
    }, drawSprite: function (e, r, t) {
        var a, o, n, i = document.createElement("canvas");
        return a = i.getContext("2d"), a.font = t + "px Arial", i.width = a.measureText(e).width, i.height = 6 * t, a.font = t + "px Arial", a.fillStyle = "#" + r.getHexString(), a.fillText(e, 0, t), o = new THREE.Texture(i), o.minFilter = THREE.LinearFilter, o.needsUpdate = !0, n = new THREE.SpriteMaterial({map: o}), new THREE.Sprite(n)
    }, drawTextForDesktop: function (e, r, t, a, o, n) {
        var i = new THREE.TextGeometry(t, {font: font, size: .38, height: .05, curveSegments: 5});
        i.computeBoundingBox();
        var s = new THREE.MeshPhongMaterial({color: 16777215 * Math.random()}), l = new THREE.Mesh(i, s);
        l.name = t, l.position.copy(r), l.lookAt(camera.position), l.userData = {
            type: a,
            name: t,
            group: e
        }, PDB.GROUP[e].add(l)
    }, drawText: function (e, r, t, a, o, n) {
        var i = new THREE.TextGeometry(t, {font: font, size: .38, height: .05, curveSegments: 5});
        i.computeBoundingBox();
        var s = new THREE.MeshPhongMaterial({color: 16777215 * Math.random()}), l = new THREE.Mesh(i, s);
        l.name = t;
        var c = new THREE.Vector3(0, 0, 0);
        camera.getWorldDirection(c), l.userData = {
            type: a,
            name: t,
            group: e
        }, PDB.GROUP[e].position.copy(r), PDB.GROUP[e].lookAt(c), PDB.GROUP[e].add(l)
    }, drawTextForDistance: function (e, r, t, a, o, n) {
        var i = new THREE.TextGeometry(t, {font: font, size: .38, height: .05, curveSegments: 5});
        i.computeBoundingBox();
        var s = new THREE.MeshPhongMaterial({color: 16777215 * Math.random()}), l = new THREE.Mesh(i, s);
        l.name = t, l.userData = {
            type: a,
            name: t,
            group: e
        }, l.position.copy(r), PDB.GROUP[e].add(l), l.lookAt(camera.position)
    }, drawTextKB: function (e, r, t, a, o, n) {
        var i = new THREE.TextGeometry(t, {font: font, size: .18, height: .05, curveSegments: 5});
        i.computeBoundingBox();
        var s = new THREE.MeshPhongMaterial({color: o}), l = new THREE.Mesh(i, s);
        l.name = t, l.position.copy(r), l.userData = {reptype: a, name: t, group: e}, PDB.GROUP[e].add(l);
        var c = i.boundingBox.max.x - i.boundingBox.min.x, d = i.boundingBox.max.y - i.boundingBox.min.y,
            m = new THREE.BoxBufferGeometry(c, d - .01, .05), P = new THREE.MeshBasicMaterial({color: 8421504}),
            u = new THREE.Mesh(m, P);
        P.opacity = 0, u.material.opacity = 0, u.name = t, u.position.set(r.x + c / 2, r.y + d / 2, r.z), u.rotation.copy(l.rotation), u.userData = {
            reptype: a,
            name: t,
            group: e
        }, PDB.GROUP[e].add(l), PDB.GROUP[e].add(u)
    }, drawMergeStickSphereStick: function (e, r, t, a, o) {
        var n = this, i = PDB.tool.midPoint(r.pos_centered, t.pos_centered),
            s = n.drawStick222(e, i, t.pos_centered, t.color, o, t.name, !1),
            l = n.drawSphere222(e, t.pos_centered, t.color, o, t.name, !1),
            c = PDB.tool.midPoint(t.pos_centered, a.pos_centered),
            d = n.drawStick222(e, t.pos_centered, c, t.color, o, t.name, !1), m = PDB.tool.midPoint(i, c),
            P = new THREE.Geometry;
        s.updateMatrix(), P.merge(s.geometry, s.matrix), l.updateMatrix(), P.merge(l.geometry, l.matrix), d.updateMatrix(), P.merge(d.geometry, d.matrix);
        var u = new THREE.MeshPhongMaterial({color: t.color, wireframe: !1}), D = new THREE.Mesh(P, u);
        D.name = t.name, D.position.copy(m), D.userData = {group: e, atom: t}, PDB.GROUP[e].add(D)
    }, drawMergeSphereStick: function (e, r, t, a) {
        var o = this, n = o.drawSphere222(e, r.pos_centered, r.color, a, r.name, !1),
            i = PDB.tool.midPoint(r.pos_centered, t.pos_centered),
            s = o.drawStick222(e, r.pos_centered, i, t.color, a, r.name, !1), l = new THREE.Geometry;
        n.updateMatrix(), l.merge(n.geometry, n.matrix), s.updateMatrix(), l.merge(s.geometry, s.matrix);
        var c = new THREE.MeshPhongMaterial({color: r.color, wireframe: !1}), d = new THREE.Mesh(l, c);
        d.name = r.name, d.position.copy(i), d.userData = {group: e, atom: r}, PDB.GROUP[e].add(d)
    }, drawMergeStickSphere: function (e, r, t, a) {
        var o = this, n = PDB.tool.midPoint(r.pos_centered, t.pos_centered),
            i = o.drawStick222(e, n, t.pos_centered, t.color, a, t.name, !1),
            s = o.drawSphere222(e, t.pos_centered, t.color, a, t.name, !1), l = new THREE.Geometry;
        i.updateMatrix(), l.merge(i.geometry, i.matrix), s.updateMatrix(), l.merge(i.geometry, i.matrix);
        var c = new THREE.MeshPhongMaterial({color: t.color, wireframe: !1}), d = new THREE.Mesh(l, c);
        d.name = t.name, d.position.copy(n), d.userData = {group: e, atom: t}, PDB.GROUP[e].add(d)
    }, drawLine: function (e, r, t, a) {
        var o = new THREE.LineBasicMaterial({color: a}), n = new THREE.Geometry;
        n.vertices.push(r, t);
        var i = new THREE.Line(n, o);
        i.userData = {group: e}, PDB.GROUP[e].add(i)
    }, drawTempLine: function (e, r, t, a, o) {
        var n = new THREE.LineBasicMaterial({color: o}), i = new THREE.Geometry;
        i.vertices.push(t, a);
        var s = new THREE.Line(i, n);
        s.userData = {group: e}, s.name = r, PDB.GROUP[e].add(s)
    }, drawOneResLine: function (e, r, t, a, o, n) {
        var i = new THREE.LineBasicMaterial({color: o}), s = new THREE.Geometry;
        s.vertices.push(t, a);
        var l = new THREE.Line(s, i);
        l.userData = {group: e, presentAtom: n}, l.name = r, PDB.GROUP[e].add(l)
    }, drawWholeLine: function (e, r, t, a, o) {
        o.vertices.push(r, t), o.colors.push(a)
    }, drawDot: function (e, r, t) {
        var a = new THREE.Geometry;
        a.vertices.push(r);
        var o = new THREE.PointsMaterial({color: t}), n = new THREE.Points(a, o);
        PDB.GROUP[e].add(n)
    }, drawMapPoints: function (e, r, t, a) {
        var o = new THREE.BufferGeometry;
        o.addAttribute("position", new THREE.BufferAttribute(r, 3)), o.addAttribute("customColor", new THREE.BufferAttribute(t, 3)), o.addAttribute("opacity", new THREE.BufferAttribute(a, 1)), o.computeBoundingSphere();
        var n = {delta: {value: 1}}, i = new THREE.ShaderMaterial({
            uniforms: n,
            vertexShader: document.getElementById("vertexshader").textContent,
            fragmentShader: document.getElementById("fragmentshader").textContent,
            blending: THREE.AdditiveBlending,
            depthTest: !1,
            transparent: !1
        }), s = new THREE.Points(o, i);
        s.scale = .5, s.rotation.y = -Math.PI / 2, PDB.GROUP[e].add(s), console.log("MapPoints: added in scene!"), PDB.GROUP[PDB.GROUP_MAIN].visible = !0
    }, drawSphere: function (e, r, t, a, o, n, i) {
        var n = PDB.tool.getValue(n, !0), s = Math.pow(2, 5), l = new THREE.Color(.1, .1, .1),
            c = (new THREE.Color).setHSL(.5, .5, .25).multiplyScalar(.9);
        c = t;
        var d = new THREE.MeshPhongMaterial({bumpScale: 1, color: c, specular: l, reflectivity: .5, shininess: s});
        h = i;
        var m = new THREE.SphereBufferGeometry(a, i, h), P = new THREE.Mesh(m, d);
        if (P.name = o.caid, P.position.copy(r), P.userData = {group: e, presentAtom: o}, !n) return P;
        PDB.GROUP[e].add(P)
    }, drawMutation: function (e, r, t, a, o, n, i) {
        var n = PDB.tool.getValue(n, !0), s = Math.pow(2, 5), l = new THREE.Color(.1, .1, .1),
            c = (new THREE.Color).setHSL(.5, .5, .25).multiplyScalar(.9);
        c = t;
        var d = new THREE.MeshPhongMaterial({
                bumpScale: 1,
                color: c,
                specular: l,
                reflectivity: .5,
                shininess: s,
                shading: THREE.SmoothShading
            }), m = new THREE.SphereBufferGeometry(a, PDB.CONFIG.sphere_width, PDB.CONFIG.sphere_height),
            P = new THREE.Mesh(m, d);
        if (P.name = o.pos, P.position.copy(r), P.userData = {group: e, mutation: o, presentAtom: i}, !n) return P;
        PDB.GROUP[e].add(P)
    }, drawSphere222: function (e, r, t, a, o, n) {
        var n = PDB.tool.getValue(n, !0), i = new THREE.SphereGeometry(a, 48, 24),
            s = new THREE.MeshBasicMaterial({color: t}), l = new THREE.Mesh(i, s);
        if (l.name = o, l.position.copy(r), l.userData = {group: e}, !n) return l;
        PDB.GROUP[e].add(l)
    }, drawStick222: function (e, r, t, a, o, n, i) {
        var i = PDB.tool.getValue(i, !0), s = new THREE.MeshBasicMaterial({color: a}), l = r.distanceTo(t),
            c = new THREE.CylinderGeometry(o, o, l, 50, 1, !1);
        c.applyMatrix4((new THREE.Matrix4).makeTranslation(0, l / 2, 0)), c.applyMatrix4((new THREE.Matrix4).makeRotationX(THREE.Math.degToRad(90)));
        var d = new THREE.Mesh(c, s);
        if (d.position.copy(r), d.lookAt(t), d.userData = {group: e}, !i) return d;
        PDB.GROUP[e].add(d)
    }, drawStick: function (e, r, t, a, o, n, i) {
        var i = PDB.tool.getValue(i, !0), s = new THREE.MeshPhongMaterial({color: a, wireframe: !1}),
            l = r.distanceTo(t), c = new THREE.CylinderGeometry(o, o, l, PDB.CONFIG.stick_radius, 1, !1);
        c.applyMatrix4((new THREE.Matrix4).makeTranslation(0, l / 2, 0)), c.applyMatrix4((new THREE.Matrix4).makeRotationX(THREE.Math.degToRad(90)));
        var d = new THREE.Mesh(c, s);
        if (d.name = n.caid, d.position.copy(r), d.lookAt(t), d.userData = {group: e, presentAtom: n}, !i) return d;
        PDB.GROUP[e].add(d)
    }, drawCylinder0: function (e, r, t, a, o) {
        var n = [];
        n.push(r), n.push(t);
        var i = new THREE.CatmullRomCurve3(n), s = {steps: 1500, bevelEnabled: !1, extrudePath: i}, l = new THREE.Shape;
        l.moveTo(0, o), l.quadraticCurveTo(o, o, o, 0), l.quadraticCurveTo(o, -o, 0, -o), l.quadraticCurveTo(-o, -o, -o, 0), l.quadraticCurveTo(-o, o, 0, o);
        var c = new THREE.ExtrudeGeometry(l, s), d = new THREE.MeshLambertMaterial({color: a, wireframe: !1}),
            m = new THREE.Mesh(c, d);
        m.userData = {group: e}, PDB.GROUP[e].add(m)
    }, drawTube: function (e, r, t, a, o, n, i) {
        var s = new THREE.CatmullRomCurve3(r), l = new THREE.TubeGeometry(s, n, a, PDB.CONFIG.tubesegment, !1),
            c = [new THREE.MeshPhongMaterial({color: t})];
        c.side = THREE.FrontSide;
        var d = new THREE.Mesh(l, c), m = PDB.tool.getMainAtom(PDB.pdbId, i[0]);
        d.name = m.id, d.userData = {group: e, presentAtom: m, reptype: "tube"}, PDB.GROUP[e].add(d)
    }, drawTubeByTravel: function (e, r, t) {
        var a = new THREE.CatmullRomCurve3(e),
            o = new THREE.TubeGeometry(a, e.length - 1, t, PDB.CONFIG.tubesegment, !1), n = [], i = {}, s = {};
        for (var l in o.vertices) {
            var c = r[Math.floor(l / PDB.CONFIG.tubesegment)], d = w3m.mol[PDB.pdbId].color.main[c];
            if (void 0 != d && void 0 == s[d]) {
                var m = PDB.tool.getColorByIndex(PDB.pdbId, c, "main"), P = new THREE.MeshPhongMaterial({color: m});
                s[d] = n.length, n.push(P)
            }
            i[l] = s[d]
        }
        for (var l in o.faces) o.faces[l].materialIndex = i[o.faces[l].b];
        var u = new THREE.Mesh(o, n), D = PDB.tool.getMainAtom(PDB.pdbId, r[0]);
        if (u.name = D.id, u.userData = {
            group: group,
            presentAtom: D,
            reptype: "tube"
        }, (PDB.mode === PDB.MODE_TRAVEL_THREE || PDB.mode === PDB.MODE_TRAVEL_VR) && "" === PDB.TravelGeometry) {
            var _ = new THREE.MeshBasicMaterial({color: 0, opacity: .3, wireframe: !1, transparent: !0});
            if (void 0 !== PDB.GROUP[PDB.GROUP_TRAVEL]) {
                PDB.parent.remove(PDB.GROUP[PDB.GROUP_TRAVEL]);
                for (var h in PDB.GROUP[PDB.GROUP_TRAVEL].children) PDB.GROUP[PDB.GROUP_TRAVEL].children[h].geometry.dispose()
            }
            PDB.GROUP[PDB.GROUP_TRAVEL] = THREE.SceneUtils.createMultiMaterialObject(o, [n[0], _]), PDB.TravelGeometry = o, PDB.parent.add(PDB.GROUP[PDB.GROUP_TRAVEL]);
            var B = PDB.TravelScale;
            PDB.GROUP[PDB.GROUP_TRAVEL].scale.set(B, B, B), PDB.render.render()
        }
    }, drawFlat: function (e, r, t, a, o, n, i) {
        var s = new THREE.CatmullRomCurve3(r), l = {
                steps: n,
                bevelEnabled: !0,
                extrudePath: s,
                bevelSegments: 30,
                bevelSize: 1,
                bevelThickness: 1,
                frames: o,
                curveSegments: 6
            }, c = PDB.CONFIG.flat_height, d = PDB.CONFIG.flat_width, m = [], P = new THREE.Vector2(-d, c),
            u = new THREE.Vector2(d, c), D = new THREE.Vector2(d, -c), _ = new THREE.Vector2(-d, -c);
        m.push(P), m.push(u), m.push(D), m.push(_);
        var h = new THREE.Shape(m), B = new THREE.ExtrudeGeometry(h, l), p = 0;
        p = "object" == typeof i || "array" == typeof i ? i[0] : i;
        var E = new THREE.MeshPhongMaterial({color: t}),
            f = (new THREE.MeshPhongMaterial({color: t, wireframe: !1}), new THREE.Mesh(B, E)),
            w = PDB.tool.getMainAtom(PDB.pdbId, p);
        f.name = w.id, f.userData = {group: e, presentAtom: w, reptype: "tube"}, PDB.GROUP[e].add(f)
    }, drawEllipse: function (e, r, t, a, o, n, i) {
        var s = new THREE.CatmullRomCurve3(r), l = {steps: n, bevelEnabled: !0, extrudePath: s, frames: o}, c = a,
            d = PDB.CONFIG.ellipse_radius_multiple, m = new THREE.EllipseCurve(0, 0, d * c, c, 0, 2 * Math.PI, !1, 0),
            P = new THREE.Shape;
        P.curves.push(m);
        var u = new THREE.ExtrudeGeometry(P, l), D = new THREE.MeshPhongMaterial({color: t, wireframe: !1});
        D.side = THREE.FrontSide, D.overdraw = !0;
        var _ = new THREE.Mesh(u, D), h = PDB.tool.getMainAtom(PDB.pdbId, i[0]);
        _.name = h.id, _.userData = {group: e, presentAtom: h, reptype: "tube"}, PDB.GROUP[e].add(_)
    }, drawRectangle: function (e, r, t, a, o, n, i) {
        if (0 != r.length) {
            var s = new THREE.CatmullRomCurve3(r), l = {
                    steps: n,
                    bevelEnabled: !0,
                    extrudePath: s,
                    frames: o,
                    bevelSegments: 100,
                    extrudeMaterial: 0,
                    material: 0,
                    curveSegments: 6
                }, c = PDB.CONFIG.retangle_height, d = PDB.CONFIG.retangle_width, m = [], P = new THREE.Vector2(-d, c),
                u = new THREE.Vector2(d, c), D = new THREE.Vector2(d, -c), _ = new THREE.Vector2(-d, -c);
            m.push(P), m.push(u), m.push(D), m.push(_);
            var h = new THREE.Shape(m), B = new THREE.ExtrudeGeometry(h, l),
                p = new THREE.MeshPhongMaterial({color: t, wireframe: !1});
            p.overdraw = !0;
            var E = new THREE.Mesh(B, p), f = PDB.tool.getMainAtom(PDB.pdbId, i[0]);
            E.name = f.id, E.userData = {group: e, presentAtom: f, reptype: "tube"}, PDB.GROUP[e].add(E)
        }
    }, drawStrip0: function (e, r, t, a) {
        var o = new THREE.CatmullRomCurve3(r), n = {steps: 4e3, bevelEnabled: !0, extrudePath: o}, i = new THREE.Shape;
        i.moveTo(0, a), i.quadraticCurveTo(a, a, a, 0), i.quadraticCurveTo(a, -a, 0, -a), i.moveTo(-6 * a, -a), i.quadraticCurveTo(-7 * a, -a, -7 * a, 0), i.quadraticCurveTo(-7 * a, a, -6 * a, a), i.moveTo(0, a);
        var s = new THREE.ExtrudeGeometry(i, n), l = new THREE.MeshPhongMaterial({color: t, wireframe: !1}),
            c = new THREE.Mesh(s, l);
        c.userData = {group: e}, PDB.GROUP[e].add(c)
    }, drawStrip: function (e, r, t, a, o, n, i) {
        var s = new THREE.CatmullRomCurve3(r),
            l = {steps: n, bevelEnabled: !0, extrudePath: s, frames: o, curveSegments: 6}, c = PDB.CONFIG.strip_ex / 2,
            d = new THREE.Shape;
        d.moveTo(c * a, a), d.absarc(c * a, 0, a, Math.PI / 2, -Math.PI / 2, !0), d.lineTo(-c * a, -a), d.absarc(-c * a, 0, a, -Math.PI / 2, Math.PI / 2, !0), d.lineTo(c * a, a);
        var m = new THREE.ExtrudeGeometry(d, l), P = new THREE.MeshPhongMaterial({color: t, wireframe: !1}),
            u = new THREE.Mesh(m, P), D = PDB.tool.getMainAtom(PDB.pdbId, i[0]);
        u.name = D.id, u.userData = {group: e, presentAtom: D, reptype: "tube"}, PDB.GROUP[e].add(u)
    }, drawRailway: function (e, r, t, a, o, n, i) {
        var s = new THREE.CatmullRomCurve3(r),
            l = {steps: n, bevelEnabled: !0, extrudePath: s, frames: o, curveSegments: 6}, c = new THREE.Shape,
            d = PDB.CONFIG.railway_gui;
        c.moveTo(d * a, 0), c.absarc(d * a, 0, a, 0, 2 * Math.PI, !0), c.lineTo(-d * a, 0), c.absarc(-d * a, 0, a, 0, 2 * Math.PI, !0);
        var m = new THREE.ExtrudeGeometry(c, l), P = new THREE.MeshPhongMaterial({color: t, wireframe: !1}),
            u = new THREE.Mesh(m, P), D = PDB.tool.getMainAtom(PDB.pdbId, i[0]);
        u.name = D.id, u.userData = {group: e, presentAtom: D, reptype: "tube"}, PDB.GROUP[e].add(u)
    }, drawArrow: function (e, r) {
        for (var t in r) {
            var a = r[t], o = a.ids, n = a.paths, i = new THREE.Geometry;
            i.vertices = n;
            var s = [], l = {}, c = {};
            for (var t in i.vertices) {
                var d = o[t], m = w3m.mol[PDB.pdbId].color.main[d];
                if (void 0 == c[m]) {
                    var P = PDB.tool.getColorByIndex(d, "main"),
                        u = new THREE.MeshPhongMaterial({color: P, side: THREE.DoubleSide});
                    c[m] = s.length, s.push(u)
                }
                l[t] = c[m]
            }
            for (var t = 0; t < n.length; t += 4) if (void 0 != n[t + 7]) {
                var D = new THREE.Face3(t, t + 1, t + 4);
                D.materialIndex = l[t + 1];
                var _ = new THREE.Face3(t + 5, t + 2, t + 1);
                _.materialIndex = l[t + 2];
                var h = new THREE.Face3(t + 6, t + 3, t + 2);
                h.materialIndex = l[t + 3];
                var B = new THREE.Face3(t + 7, t, t + 3);
                B.materialIndex = l[t];
                var p = new THREE.Face3(t + 5, t + 4, t + 1);
                p.materialIndex = l[t + 4];
                var E = new THREE.Face3(t + 6, t + 5, t + 2);
                E.materialIndex = l[t + 5];
                var f = new THREE.Face3(t + 7, t + 6, t + 3);
                f.materialIndex = l[t + 6];
                var w = new THREE.Face3(t + 7, t + 4, t);
                w.materialIndex = l[t + 4], i.faces.push(D), i.faces.push(_), i.faces.push(h), i.faces.push(B), i.faces.push(p), i.faces.push(E), i.faces.push(f), i.faces.push(w)
            }
            i.faces.push(new THREE.Face3(0, 1, 2)), i.faces.push(new THREE.Face3(2, 3, 0)), i.faces.push(new THREE.Face3(n.length - 4, n.length - 3, n.length - 2)), i.faces.push(new THREE.Face3(n.length - 2, n.length - 1, n.length - 4)), i.computeFaceNormals(), i.computeFlatVertexNormals(), i.computeBoundingSphere();
            var g = PDB.tool.getMainAtom(PDB.pdbId, o[0]), v = "chain_" + g.chainname, R = new THREE.Mesh(i, s);
            R.userData = {group: v}, PDB.GROUP[v].add(R)
        }
    }, drawArrowByPaths: function (e, r, t, a) {
        var o = new THREE.Geometry;
        o.vertices = r;
        for (var n = new THREE.MeshPhongMaterial({
            color: t,
            side: THREE.DoubleSide
        }), i = 0; i < r.length; i += 4) if (void 0 != r[i + 7]) {
            var s = new THREE.Face3(i, i + 1, i + 4);
            s.materialIndex = 0;
            var l = new THREE.Face3(i + 5, i + 2, i + 1);
            l.materialIndex = 0;
            var c = new THREE.Face3(i + 6, i + 3, i + 2);
            c.materialIndex = 0;
            var d = new THREE.Face3(i + 7, i, i + 3);
            d.materialIndex = 0;
            var m = new THREE.Face3(i + 5, i + 4, i + 1);
            m.materialIndex = 0;
            var P = new THREE.Face3(i + 6, i + 5, i + 2);
            P.materialIndex = 0;
            var u = new THREE.Face3(i + 7, i + 6, i + 3);
            u.materialIndex = 0;
            var D = new THREE.Face3(i + 7, i + 4, i);
            D.materialIndex = 0, o.faces.push(s), o.faces.push(l), o.faces.push(c), o.faces.push(d), o.faces.push(m), o.faces.push(P), o.faces.push(u), o.faces.push(D)
        }
        var _ = new THREE.Face3(0, 1, 2);
        _.materialIndex = 0, o.faces.push(_);
        var h = new THREE.Face3(2, 3, 0);
        h.materialIndex = 0, o.faces.push(h);
        var B = new THREE.Face3(r.length - 4, r.length - 3, r.length - 2);
        B.materialIndex = 0, o.faces.push(B);
        var p = new THREE.Face3(r.length - 2, r.length - 1, r.length - 4);
        p.materialIndex = 0, o.faces.push(p), o.computeFlatVertexNormals(), o.computeBoundingSphere();
        var E = new THREE.Mesh(o, n);
        E.name = a[0];
        var f = PDB.tool.getMainAtom(PDB.pdbId, a[0]);
        E.userData = {group: e, presentAtom: f, reptype: "tube", realtype: "arrow"}, PDB.GROUP[e].add(E)
    }, drawPlane: function (e, r, t, a, o, n, i) {
        var s = new THREE.PlaneGeometry(r, t, r, t), l = new THREE.Mesh(s, PDB.MATERIALLIST);
        switch (o) {
            case PDB.DIMENSION_X:
                l.rotation.x = -Math.PI / 2, l.rotation.y = -Math.PI / 2;
                var c = n;
                if (PDB.mode != PDB.MODE_VR) for (var d = 0; d < i.header.NR; d++) for (var m = 0; m < i.header.NS; m++) {
                    var P = i.data[c][d][m],
                        u = Math.floor((P - i.header.min) / (1 * (i.header.max - i.header.min)) * 100),
                        D = {x: d, y: m, width: i.header.NR, colorIndex: u};
                    PDB.tool.setFaceColor(s, D)
                }
                n += i.center.x, l.position.copy(new THREE.Vector3(n, 0, 0));
                break;
            case PDB.DIMENSION_Y:
                l.rotation.x = -Math.PI / 2;
                var d = n;
                if (PDB.mode != PDB.MODE_VR) for (var c = 0; c < i.header.NC; c++) for (var m = 0; m < i.header.NS; m++) {
                    var P = i.data[c][d][m],
                        u = Math.floor((P - i.header.min) / (1 * (i.header.max - i.header.min)) * 100),
                        D = {x: c, y: m, width: i.header.NR, colorIndex: u};
                    PDB.tool.setFaceColor(s, D)
                }
                n += i.center.y, l.position.copy(new THREE.Vector3(0, n, 0));
                break;
            case PDB.DIMENSION_Z:
                var m = n;
                if (PDB.mode != PDB.MODE_VR) for (var c = 0; c < i.header.NC; c++) for (var d = 0; d < i.header.NR; d++) {
                    var P = i.data[c][d][m],
                        u = Math.floor((P - i.header.min) / (1 * (i.header.max - i.header.min)) * 100),
                        D = {x: c, y: d, width: i.header.NR, colorIndex: u};
                    PDB.tool.setFaceColor(s, D)
                }
                n += i.center.y, l.position.copy(new THREE.Vector3(0, 0, n))
        }
        PDB.GROUP[e].add(l)
    }
};
PDB.painter = {
    calculateGroupPosition: function () {
        var e = w3m.global.limit, r = e.z[1] + PDB.GeoCenterOffset.z;
        PDB.GROUP[PDB.GROUP_MAIN].position.z += r + 3, PDB.GROUP[PDB.GROUP_HET].position.z += r + 3
    }, zoomin: function () {
        var e = PDB.GROUP[PDB.GROUP_MAIN].scale;
        e.set(2 * e.x, 2 * e.y, 2 * e.z), PDB.GROUP[PDB.GROUP_MAIN].scale.set(e)
    }, zoomout: function () {
        var e = PDB.GROUP[PDB.GROUP_MAIN].scale;
        e.set(.5 * e.x, .5 * e.y, .5 * e.z), PDB.GROUP[PDB.GROUP_MAIN].scale.set(e)
    }, near0: function () {
        for (var e in PDB.GROUP_STRUCTURE_INDEX) {
            var r = PDB.GROUP[PDB.GROUP_STRUCTURE_INDEX[e]].position.z;
            r -= PDB.ZOOM_STEP, PDB.GROUP[PDB.GROUP_STRUCTURE_INDEX[e]].position.z = r
        }
        PDB.painter.repeatPainter()
    }, far0: function () {
        for (var e in PDB.GROUP_STRUCTURE_INDEX) {
            var r = PDB.GROUP[PDB.GROUP_STRUCTURE_INDEX[e]].position.z;
            r += PDB.ZOOM_STEP, PDB.GROUP[PDB.GROUP_STRUCTURE_INDEX[e]].position.z = r
        }
        PDB.painter.repeatPainter()
    }, near: function () {
        for (var e in PDB.GROUP_STRUCTURE_INDEX) switch (PDB.MOVE_AXIS) {
            case 1:
                PDB.GROUP[PDB.GROUP_STRUCTURE_INDEX[e]].position.y = PDB.GROUP[PDB.GROUP_STRUCTURE_INDEX[e]].position.y - PDB.ZOOM_STEP * PDB.ZOOM_TIMES;
                break;
            case 2:
                PDB.GROUP[PDB.GROUP_STRUCTURE_INDEX[e]].position.x = PDB.GROUP[PDB.GROUP_STRUCTURE_INDEX[e]].position.x - PDB.ZOOM_STEP * PDB.ZOOM_TIMES;
                break;
            case 3:
                PDB.GROUP[PDB.GROUP_STRUCTURE_INDEX[e]].position.z = PDB.GROUP[PDB.GROUP_STRUCTURE_INDEX[e]].position.z - PDB.ZOOM_STEP * PDB.ZOOM_TIMES
        }
        switch (PDB.MOVE_AXIS) {
            case 1:
                for (var r in PDB.residueGroupObject) for (var t in PDB.residueGroupObject[r]) PDB.residueGroupObject[r][t].vector.y = PDB.residueGroupObject[r][t].vector.y - PDB.ZOOM_STEP * PDB.ZOOM_TIMES;
                PDB.rotateAxis.y = PDB.rotateAxis.y - PDB.ZOOM_STEP * PDB.ZOOM_TIMES;
                break;
            case 2:
                for (var r in PDB.residueGroupObject) for (var t in PDB.residueGroupObject[r]) PDB.residueGroupObject[r][t].vector.x = PDB.residueGroupObject[r][t].vector.x - PDB.ZOOM_STEP * PDB.ZOOM_TIMES;
                PDB.rotateAxis.x = PDB.rotateAxis.x - PDB.ZOOM_STEP * PDB.ZOOM_TIMES;
                break;
            case 3:
                for (var r in PDB.residueGroupObject) for (var t in PDB.residueGroupObject[r]) PDB.residueGroupObject[r][t].vector.z = PDB.residueGroupObject[r][t].vector.z - PDB.ZOOM_STEP * PDB.ZOOM_TIMES;
                PDB.rotateAxis.z = PDB.rotateAxis.z - PDB.ZOOM_STEP * PDB.ZOOM_TIMES
        }
        PDB.painter.repeatPainter()
    }, far: function () {
        for (var e in PDB.GROUP_STRUCTURE_INDEX) switch (PDB.MOVE_AXIS) {
            case 1:
                PDB.GROUP[PDB.GROUP_STRUCTURE_INDEX[e]].position.y = PDB.GROUP[PDB.GROUP_STRUCTURE_INDEX[e]].position.y + PDB.ZOOM_STEP * PDB.ZOOM_TIMES;
                break;
            case 2:
                PDB.GROUP[PDB.GROUP_STRUCTURE_INDEX[e]].position.x = PDB.GROUP[PDB.GROUP_STRUCTURE_INDEX[e]].position.x + PDB.ZOOM_STEP * PDB.ZOOM_TIMES;
                break;
            case 3:
                PDB.GROUP[PDB.GROUP_STRUCTURE_INDEX[e]].position.z = PDB.GROUP[PDB.GROUP_STRUCTURE_INDEX[e]].position.z + PDB.ZOOM_STEP * PDB.ZOOM_TIMES
        }
        switch (PDB.MOVE_AXIS) {
            case 1:
                for (var r in PDB.residueGroupObject) for (var t in PDB.residueGroupObject[r]) PDB.residueGroupObject[r][t].vector.y = PDB.residueGroupObject[r][t].vector.y + PDB.ZOOM_STEP * PDB.ZOOM_TIMES;
                PDB.rotateAxis.y = PDB.rotateAxis.y + PDB.ZOOM_STEP * PDB.ZOOM_TIMES;
                break;
            case 2:
                for (var r in PDB.residueGroupObject) for (var t in PDB.residueGroupObject[r]) PDB.residueGroupObject[r][t].vector.x = PDB.residueGroupObject[r][t].vector.x + PDB.ZOOM_STEP * PDB.ZOOM_TIMES;
                PDB.rotateAxis.x = PDB.rotateAxis.x + PDB.ZOOM_STEP * PDB.ZOOM_TIMES;
                break;
            case 3:
                for (var r in PDB.residueGroupObject) for (var t in PDB.residueGroupObject[r]) PDB.residueGroupObject[r][t].vector.z = PDB.residueGroupObject[r][t].vector.z + PDB.ZOOM_STEP * PDB.ZOOM_TIMES;
                PDB.rotateAxis.z = PDB.rotateAxis.z + PDB.ZOOM_STEP * PDB.ZOOM_TIMES
        }
        PDB.painter.repeatPainter()
    }, rotate: function () {
        switch (PDB.ROTATION_AXIS) {
            case 1:
                PDB.tool.rotation_x(PDB.GROUP_STRUCTURE_INDEX, PDB.ROTATION_DIRECTION);
                break;
            case 2:
                PDB.tool.rotation_y(PDB.GROUP_STRUCTURE_INDEX, PDB.ROTATION_DIRECTION);
                break;
            case 3:
                PDB.tool.rotation_z(PDB.GROUP_STRUCTURE_INDEX, PDB.ROTATION_DIRECTION)
        }
    }, showInput: function (e) {
        "<--" == e ? PDB.pdbVrId.length > 0 && (PDB.pdbVrId = PDB.pdbVrId.substring(0, PDB.pdbVrId.length - 1)) : PDB.pdbVrId = PDB.pdbVrId + e, PDB.pdbVrId.length >= 5 && (PDB.pdbVrId = ""), console.log("showInput:" + PDB.pdbVrId), PDB.render.clearGroupIndex(PDB.GROUP_INPUT);
        var r = w3m.global.limit, t = r.x[1] + PDB.GeoCenterOffset.x, a = r.z[1] + PDB.GeoCenterOffset.z,
            o = new THREE.Vector3(.02 * t, 3, .02 * a);
        PDB.drawer.drawTextKB(PDB.GROUP_INPUT, o, "PDB: " + PDB.pdbVrId, PDB.pdbVrId, 62277, 135), 4 == PDB.pdbVrId.length && (PDB.controller.requestRemote(PDB.pdbVrId), PDB.isShowMenu = !1, PDB.render.hideMenu())
    }, showKeyboard: function () {
        console.log("showKeyboard");
        for (var e = w3m.global.limit, r = e.x[1] + PDB.GeoCenterOffset.x, t = e.z[1] + PDB.GeoCenterOffset.z, a = new THREE.Vector3(.02 * r, 2.8, .02 * t), o = [["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"], ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J"], ["K", "L", "M", "N", "O", "P", "Q", "R", "S", "T"], ["U", "V", "W", "X", "Y", "Z", "", "", "<--", "", ""]], n = 0; n < o.length; n++) for (var i = 0; i < o[n].length; i++) {
            var s = new THREE.Vector3(a.x + .2 * i, a.y - .2 * n, a.z);
            PDB.drawer.drawTextKB(PDB.GROUP_KEYBOARD, s, o[n][i], "", 8003, 135)
        }
    }, showMenu: function (e) {
        console.log("showMenu");
        limit = w3m.global.limit;
        var r = limit.x[1] + PDB.GeoCenterOffset.x, t = limit.z[1] + PDB.GeoCenterOffset.z;
        r *= .02, t *= .022;
        switch (e) {
            case PDB.MENU_TYPE_FIRST:
                for (var a = [["Main Structure", PDB.MENU_TYPE_MAIN], ["Ligand", PDB.MENU_TYPE_LIGAND], ["Show Others", PDB.MENU_TYPE_EX_HET], ["Surface", PDB.MENU_TYPE_SURFACE], ["Label", PDB.MENU_TYPE_LABEL], ["Color", PDB.MENU_TYPE_COLOR], ["Measure", PDB.MENU_TYPE_MEASURE], ["Drag", PDB.MENU_TYPE_DRAG], ["Fragment", PDB.MENU_TYPE_FRAGMENT], ["Editing", PDB.MENU_TYPE_EDITING], ["Mutation", PDB.MENU_TYPE_MUTATION], ["Transition", PDB.MENU_TYPE_DIRECTION], ["Rotation", PDB.MENU_TYPE_ROTATION], ["Bond", PDB.MENU_TYPE_HBOND], ["Density Map", PDB.MENU_TYPE_DENSITYMAP], ["Drugs & Docking", PDB.MENU_TYPE_DRUG], ["Export", PDB.MENU_TYPE_EXPORT], ["Speech", PDB.MENU_TYPE_SPEECH], ["Spherical View", PDB.MENU_TYPE_OUTBALL]], o = 0; o < a.length; o++) PDB.drawer.drawTextKB(PDB.GROUP_MENU, new THREE.Vector3(r - 2, 2 - .22 * o, t), a[o][0], a[o][1], 41973, 135);
                for (var n = w3m.mol[PDB.pdbId].info, i = [["PDB : " + n.id], ["Cat : " + n.classification], ["Exp : " + n.expdata], ["Res : " + n.resolution], ["Src : " + n.source], ["Aur : " + n.author], ["Jol : " + n.journal], ["Doi : " + n.doi]], o = 0; o < i.length; o++) PDB.drawer.drawTextKB(PDB.GROUP_MENU, new THREE.Vector3(r + 3, 2 - .2 * o, t), i[o][0], "", 16737996, 135);
                break;
            case PDB.MENU_TYPE_MAIN:
                for (var s = [["Hide", PDB.HIDE], ["Line", PDB.LINE], ["Backbone", PDB.BACKBONE], ["Sphere", PDB.SPHERE], ["Stick", PDB.STICK], ["Ball Rod", PDB.BALL_AND_ROD], ["Tube", PDB.TUBE], ["R-Flat", PDB.RIBBON_FLAT], ["R-Ellipse", PDB.RIBBON_ELLIPSE], ["R-Rectangle", PDB.RIBBON_RECTANGLE], ["R-Strip", PDB.RIBBON_STRIP], ["R-Railway", PDB.RIBBON_RAILWAY], ["R-SS", PDB.CARTOON_SSE]], o = 0; o < s.length; o++) PDB.drawer.drawTextKB(PDB.GROUP_MENU_MAIN, new THREE.Vector3(r, 2 - .2 * o, t), s[o][0], s[o][1], 41797, 135);
                break;
            case PDB.MENU_TYPE_LIGAND:
                for (var l = [["Hide", PDB.HIDE], ["Line", PDB.HET_LINE], ["Sphere", PDB.HET_SPHERE], ["Stick", PDB.HET_STICK], ["Ball Rod", PDB.HET_BALL_ROD]], o = 0; o < l.length; o++) PDB.drawer.drawTextKB(PDB.GROUP_MENU_HET, new THREE.Vector3(r, 2 - .2 * o, t), l[o][0], l[o][1], 41797, 135);
                break;
            case PDB.MENU_TYPE_EX_HET:
                for (var c = [["Show/Hide Water", 1], ["Show/Hide Axis", 2]], o = 0; o < c.length; o++) PDB.drawer.drawTextKB(PDB.GROUP_MENU_EX_HET, new THREE.Vector3(r, 2 - .2 * o, t), c[o][0], c[o][1], 41797, 135);
                break;
            case PDB.MENU_TYPE_LABEL:
                for (var d = [["By Models", PDB.SELECTION_MODEL], ["By Chain", PDB.SELECTION_CHAIN], ["By Residue", PDB.SELECTION_RESIDUE], ["By Atom", PDB.SELECTION_ATOM], ["By Drug List", PDB.SELECTION_DRUG_LIST]], o = 0; o < d.length; o++) PDB.drawer.drawTextKB(PDB.GROUP_MENU_LABEL, new THREE.Vector3(r, 2 - .2 * o, t), d[o][0], d[o][1], 41797, 135);
                break;
            case PDB.MENU_TYPE_COLOR:
                for (var m = [["By Element", 601], ["By Residue", 602], ["By Second Stru.", 603], ["By Chain", 604], ["By Representat.", 605], ["By B-Factor", 606], ["By Spectrum", 607], ["By ChainSpectrum", 608], ["By Hydrophobicity", 609], ["By Conservation", "Conservation"]], o = 0; o < m.length; o++) PDB.drawer.drawTextKB(PDB.GROUP_MENU_COLOR, new THREE.Vector3(r, 2 - .2 * o, t), m[o][0], m[o][1], 41797, 135);
                break;
            case PDB.MENU_TYPE_DRAG:
                for (var P = [["Exit this mode", "exit"], ["Reset Position", 0], ["Drag Ligand", PDB.SELECTION_HET], ["Drag Chain", PDB.SELECTION_CHAIN], ["Drag Residue", PDB.SELECTION_RESIDUE], ["Drag Drug", PDB.SELECTION_DRUG]], o = 0; o < P.length; o++) PDB.drawer.drawTextKB(PDB.GROUP_MENU_DRAG, new THREE.Vector3(r, 2 - .2 * o, t), P[o][0], P[o][1], 41797, 135);
                break;
            case PDB.MENU_TYPE_MEASURE:
                for (var u = [["Distance", PDB.TRIGGER_EVENT_DISTANCE], ["Angle", PDB.TRIGGER_EVENT_ANGLE]], o = 0; o < u.length; o++) PDB.drawer.drawTextKB(PDB.GROUP_MENU_MEASURE, new THREE.Vector3(r, 2 - .2 * o, t), u[o][0], u[o][1], 41797, 135);
                break;
            case PDB.MENU_TYPE_FRAGMENT:
                for (var D = [["Exit this mode", "exit"], ["Line", "Line"], ["Backbone", "Backbone"], ["Sphere", "Sphere"], ["Sticks", "Sticks"], ["Ball & Rod", "BallRod"], ["Tube", "Tube"], ["R-FLAT", "Flat"], ["R-ELLIPSE", "Ellipse"], ["R-RECTANGLE", "Rectangle"], ["R-STRIP", "Strip"], ["R-RAILWAY", "Railway"], ["R-SS", "SSE"]], o = 0; o < D.length; o++) PDB.drawer.drawTextKB(PDB.GROUP_MENU_FRAGMENT, new THREE.Vector3(r, 2 - .2 * o, t), D[o][0], D[o][1], 41797, 135);
                break;
            case PDB.MENU_TYPE_EDITING:
                for (var _ = [["Exit this mode", "exit"], ["ala", "ala"], ["gly", "gly"], ["ile", "ile"], ["leu", "leu"], ["pro", "pro"], ["val", "val"], ["phe", "phe"], ["trp", "trp"], ["tyr", "tyr"], ["asp", "asp"], ["glu", "glu"], ["arg", "arg"], ["his", "his"], ["lys", "lys"], ["ser", "ser"], ["thr", "thr"], ["cys", "cys"], ["met", "met"], ["asn", "asn"], ["gln", "gln"]], o = 0; o < _.length; o++) PDB.drawer.drawTextKB(PDB.GROUP_MENU_EDITING, new THREE.Vector3(r, 2 - .2 * o, t), _[o][0], _[o][1], 41797, 135);
                break;
            case PDB.MENU_TYPE_SURFACE:
                for (var h = [["Hide", 0], ["Van der Waals", 1], ["Solvent excluded", 2], ["Solvent accessible", 3], ["Molecular", 4], ["Opacity 1.0", 5], ["Opacity 0.9", 6], ["Opacity 0.8", 7], ["Opacity 0.7", 8], ["Opacity 0.6", 9], ["Opacity 0.5", 10], ["Wireframe", 11]], o = 0; o < h.length; o++) PDB.drawer.drawTextKB(PDB.GROUP_MENU_SURFACE, new THREE.Vector3(r, 2 - .2 * o, t), h[o][0], h[o][1], 41797, 135);
                break;
            case PDB.MENU_TYPE_MUTATION:
                for (var B = [["Hide", 1], ["TCGA", 2], ["CCLE", 3], ["ExAC", 4]], o = 0; o < B.length; o++) PDB.drawer.drawTextKB(PDB.GROUP_MENU_MUTATION, new THREE.Vector3(r, 2 - .2 * o, t), B[o][0], B[o][1], 41797, 135);
                break;
            case PDB.MENU_TYPE_ROTATION:
                for (var p = [["Rotate by x axis", 1], ["Rotate by y axis", 2], ["Rotate by z axis", 3]], o = 0; o < p.length; o++) PDB.drawer.drawTextKB(PDB.GROUP_MENU_ROTATION, new THREE.Vector3(r, 2 - .2 * o, t), p[o][0], p[o][1], 41797, 135);
                break;
            case PDB.MENU_TYPE_DRUG:
                for (var E = [["Hide Drug", 1], ["Load Drug", 2], ["Drug Random Migration", 3], ["Show/Hide Box Helper", 4]], o = 0; o < E.length; o++) PDB.drawer.drawTextKB(PDB.GROUP_MENU_DRUG, new THREE.Vector3(r, 2 - .2 * o, t), E[o][0], E[o][1], 41797, 135);
                break;
            case PDB.MENU_TYPE_DENSITYMAP:
                for (var f = [["Hide", 4], ["Solid", 1], ["Surface", 2], ["Mesh", 3]], o = 0; o < f.length; o++) PDB.drawer.drawTextKB(PDB.GROUP_MENU_DENSITYMAP, new THREE.Vector3(r, 2 - .2 * o, t), f[o][0], f[o][1], 41797, 135);
                break;
            case PDB.MENU_TYPE_EXPORT:
                for (var w = [["Export PDB", 1]], o = 0; o < w.length; o++) PDB.drawer.drawTextKB(PDB.GROUP_MENU_EXPORT, new THREE.Vector3(r, 2 - .2 * o, t), w[o][0], w[o][1], 41797, 135);
                break;
            case PDB.MENU_TYPE_SPEECH:
                for (var g = [["Voice", 1], ["Chiness Voice", 2], ["English Voice", 3]], o = 0; o < g.length; o++) PDB.drawer.drawTextKB(PDB.GROUP_MENU_SPEECH, new THREE.Vector3(r, 2 - .2 * o, t), g[o][0], g[o][1], 41797, 135);
                break;
            case PDB.MENU_TYPE_HBOND:
                for (var v = [["Hide Bond", PDB.BOND_TYPE_NONE], ["Show HBond", PDB.BOND_TYPE_HBOND], ["Show SSBond", PDB.BOND_TYPE_SSBOND], ["Show Covalent", PDB.BOND_TYPE_COVALENT]], o = 0; o < v.length; o++) PDB.drawer.drawTextKB(PDB.GROUP_MENU_HBOND, new THREE.Vector3(r, 2 - .2 * o, t), v[o][0], v[o][1], 41797, 135);
                break;
            case PDB.MENU_TYPE_DIRECTION:
                for (var R = [["Move along the X axis", 2], ["Move along the Y axis", 1], ["Move along the Z axis", 3], ["1 times speed", 4], ["2 times speed", 5], ["4 times speed", 6]], o = 0; o < R.length; o++) PDB.drawer.drawTextKB(PDB.GROUP_MENU_DIRECTION, new THREE.Vector3(r, 2 - .2 * o, t), R[o][0], R[o][1], 41797, 135);
                break;
            case PDB.MENU_TYPE_OUTBALL:
                for (var b = [["SHOW", PDB.MENU_TYPE_OUTSHOW], ["HIDE", PDB.MENU_TYPE_OUTHIDE]], o = 0; o < b.length; o++) PDB.drawer.drawTextKB(PDB.GROUP_MENU_OUTBALL, new THREE.Vector3(r, 2 - .2 * o, t), b[o][0], b[o][1], 41797, 135)
        }
    }, showAtomInfo: function (e) {
        var r = e.chainname.toUpperCase() + "." + e.resname.substring(0, 1).toUpperCase() + e.resname.substring(1) + "." + e.resid + "." + e.name.substring(0, 1).toUpperCase() + e.name.substring(1),
            t = PDB.tool.getAtomInfoPosition(e.pos_curr, camera.position);
        PDB.drawer.drawText(PDB.GROUP_INFO, t, r, "", e.color, 180)
    }, showAtomInfoPos: function (e, r) {
        var t = new THREE.Vector3;
        t.x = r.x + .5, t.y = r.y + .5, t.z = r.z - .5;
        var a = e.chainname.toUpperCase() + "." + e.resname.substring(0, 1).toUpperCase() + e.resname.substring(1) + "." + e.resid + "." + e.name.substring(0, 1).toUpperCase() + e.name.substring(1);
        PDB.drawer.drawText(PDB.GROUP_INFO, t, a, "", e.color, 180)
    }, showMutation: function (e) {
        var r = JSON.parse(e);
        if (1 === r.code && void 0 !== r.data) {
            PDB.tool.printProgress("");
            var e = r.data.mutations;
            r.data.chains.forEach(function (r) {
                var t = r;
                e.forEach(function (e) {
                    var r = PDB.tool.getCAAtomByResidueId(e.pos, t);
                    void 0 !== r && PDB.drawer.drawMutation(PDB.GROUP_MUTATION, r.pos_centered, r.color, r.radius, e, void 0, r)
                })
            })
        } else PDB.tool.printProgress(r.message)
    }, showConservation: function (e) {
        var r = JSON.parse(e);
        if (1 === r.code && void 0 !== r.data) {
            var t = r.data;
            0 == t.length ? PDB.tool.printProgress("Conservation information is missing.") : t.forEach(function (e) {
                for (var r = (e.resname, e.resid), t = e.chain.toLowerCase(), a = (e.score, e.color), o = w3m.mol[PDB.pdbId].residueData[t][r], n = o.faid; n <= o.laid; n++) void 0 != w3m.mol[PDB.pdbId].color.main[n] && (w3m.mol[PDB.pdbId].color.main[n] = 1200 + Number(a))
            })
        } else PDB.tool.printProgress(r.message)
    }, showResidueInfo0: function (e) {
        var r = e.chainname.toUpperCase() + "." + e.resname.substring(0, 1).toUpperCase() + e.resname.substring(1) + "." + e.resid,
            t = PDB.tool.getAtomInfoPosition(e.pos_curr, camera.position);
        PDB.drawer.drawText(PDB.GROUP_INFO, t, r, "", e.color, 180)
    }, showResidueInfo: function (e) {
        var r = e.chainname.toUpperCase() + "." + e.resname.substring(0, 1).toUpperCase() + e.resname.substring(1) + "." + e.resid,
            t = PDB.tool.getAtomInfoPosition(e.pos_curr, camera.position);
        PDB.drawer.drawText(PDB.GROUP_INFO, t, r, "", e.color, 180)
    }, showResidueInfoPos: function (e, r) {
        var t = e.chainname.toUpperCase() + "." + e.resname.substring(0, 1).toUpperCase() + e.resname.substring(1) + "." + e.resid,
            a = PDB.tool.getAtomInfoPosition(r, camera.position);
        PDB.drawer.drawText(PDB.GROUP_INFO, a, t, "", e.color, 180)
    }, showChainInfo: function (e) {
        var r, t = e.chainname.toUpperCase();
        console.log(e.pos), r = e.pos ? e.pos : PDB.tool.getAtomInfoPosition(e.pos_centered, camera.position), PDB.drawer.drawText(PDB.GROUP_INFO, r, t, "", e.color, 180)
    }, showLine: function () {
        for (var e = 0; e < PDB.linkedAtomIdArray.length; e++) {
            var r = PDB.linkedAtomIdArray[e], t = PDB.tool.getMainAtom(PDB.pdbId, r[0]),
                a = PDB.tool.getMainAtom(PDB.pdbId, r[1]), o = PDB.tool.midPoint(t.pos_centered, a.pos_centered),
                n = "chain_" + a.chainname;
            PDB.drawer.drawLine(n, t.pos_centered, o, t.color), PDB.drawer.drawLine(n, o, a.pos_centered, a.color)
        }
    }, showLineByStartEnd: function (e, r, t) {
        if (t) for (var a = 0; a < PDB.linkedAtomIdArray.length; a++) {
            var o = PDB.linkedAtomIdArray[a];
            if (!(o[0] < e && o[1] < e)) {
                if (o[0] > r && o[1] > r) break;
                var n = PDB.tool.getMainAtom(PDB.pdbId, o[0]), i = PDB.tool.getMainAtom(PDB.pdbId, o[1]),
                    s = PDB.tool.midPoint(n.pos_centered, i.pos_centered), l = "chain_" + i.chainname;
                PDB.drawer.drawLine(l, n.pos_centered, s, n.color), PDB.drawer.drawLine(l, s, i.pos_centered, i.color)
            }
        } else for (var a = 0; a < PDB.linkedAtomIdArray.length; a++) {
            var o = PDB.linkedAtomIdArray[a];
            if (!(o[0] < e && o[1] < e)) {
                if (o[0] > r && o[1] > r) break;
                var n = PDB.tool.getMainAtom(PDB.pdbId, o[0]), i = PDB.tool.getMainAtom(PDB.pdbId, o[1]),
                    s = PDB.tool.midPoint(n.pos_centered, i.pos_centered), l = "chain_" + i.chainname;
                PDB.drawer.drawLine(l, n.pos_centered, s, new THREE.Color("#CCC")), PDB.drawer.drawLine(l, s, i.pos_centered, new THREE.Color("#CCC"))
            }
        }
    }, showLineByResdue: function (e, r, t, a, o) {
        a = void 0 != a && a, o = void 0 == o || o;
        var n = new THREE.Color("#CCC"), i = w3m.mol[PDB.pdbId].residueData[e][r];
        atomIdArray = i.lines;
        for (var s = 0; s < atomIdArray.length; s++) {
            var l = PDB.tool.getMainAtom(PDB.pdbId, atomIdArray[s][0]),
                c = PDB.tool.getMainAtom(PDB.pdbId, atomIdArray[s][1]),
                d = PDB.tool.midPoint(l.pos_centered, c.pos_centered), m = "chain_" + c.chainname + (a ? "_low" : "");
            PDB.drawer.drawTempLine(m, i.caid, l.pos_centered, d, t ? l.color : n), PDB.GROUP[m].children[PDB.GROUP[m].children.length - 1].visible = o, PDB.drawer.drawTempLine(m, i.caid, d, c.pos_centered, t ? c.color : n), PDB.GROUP[m].children[PDB.GROUP[m].children.length - 1].visible = o
        }
    }, showDot: function () {
        for (var e in w3m.mol) {
            var r = w3m.mol[e].atom.main;
            for (var t in r) {
                var a = PDB.tool.getMainAtom(e, t), o = "chain_" + a.chainname;
                PDB.drawer.drawDot(o, a.pos_centered, a.color)
            }
        }
    }, showDotByResdue: function (e, r, t, a, o) {
        a = void 0 != a && a, o = void 0 == o || o;
        var n = w3m.mol[PDB.pdbId].residueData[e][r], i = new THREE.Color("#CCC");
        for (var s in w3m.mol) for (var l = w3m.mol[s].atom.main, c = n.faid; c <= n.laid; c++) {
            var d = l[c];
            if (void 0 != d) {
                var m = PDB.tool.getMainAtom(s, d[1]), P = "chain_" + m.chainname + (a ? "_low" : "");
                PDB.drawer.drawDot(P, m.pos_centered, t ? m.color : i), PDB.GROUP[P].children[PDB.GROUP[P].children.length - 1].visible = o
            }
        }
    }, showDotByStartEnd: function (e, r, t) {
        if (t) for (var a in w3m.mol) {
            var o = w3m.mol[a].atom.main;
            for (var n in o) if (!(n < e)) {
                if (n > r) break;
                var i = PDB.tool.getMainAtom(a, n), s = "chain_" + i.chainname;
                PDB.drawer.drawDot(s, i.pos_centered, i.color)
            }
        } else for (var a in w3m.mol) {
            var o = w3m.mol[a].atom.main;
            for (var n in o) if (!(n < e)) {
                if (n > r) break;
                var i = PDB.tool.getMainAtom(a, n), s = "chain_" + i.chainname;
                PDB.drawer.drawDot(s, i.pos_centered, new THREE.Color("#CCC"))
            }
        }
    }, showBackbone: function () {
        for (var e = PDB.CONFIG.stick_sphere_w, r = 0; r < PDB.backboneAtomIdArray.length; r++) for (var t = PDB.backboneAtomIdArray[r], a = 0; a < t.length; a++) {
            var o = PDB.tool.getMainAtom(PDB.pdbId, t[a]), n = "chain_" + o.chainname;
            if (PDB.drawer.drawSphere(n, o.pos_centered, o.color, .3, o, void 0, e), a > 0) {
                var i = PDB.tool.midPoint(startAtom.pos_centered, o.pos_centered);
                PDB.drawer.drawStick(n, startAtom.pos_centered, i, startAtom.color, .3, startAtom), PDB.drawer.drawStick(n, i, o.pos_centered, o.color, .3, o)
            }
            startAtom = o
        }
    }, showBackboneByResdue: function (e, r, t, a, o) {
        var n = PDB.CONFIG.stick_sphere_w, i = new THREE.Color("#CCC"), s = w3m.mol[PDB.pdbId].residueData[e][r],
            l = s.bbond, c = w3m.mol[PDB.pdbId].residueData[e][r - 1];
        void 0 != c && (l = [c.bbond[c.bbond.length - 1]].concat(l));
        for (var d = 0; d < l.length; d++) {
            var m = PDB.tool.getMainAtom(PDB.pdbId, l[d]);
            m.caid = s.caid;
            var P = "chain_" + m.chainname + (a ? "_low" : "");
            if (PDB.drawer.drawSphere(P, m.pos_centered, t ? m.color : i, .3, m, void 0, n), PDB.GROUP[P].children[PDB.GROUP[P].children.length - 1].visible = o, d > 0) {
                var u = PDB.tool.midPoint(startAtom.pos_centered, m.pos_centered);
                PDB.drawer.drawStick(P, startAtom.pos_centered, u, t ? startAtom.color : i, .3, startAtom), PDB.GROUP[P].children[PDB.GROUP[P].children.length - 1].visible = o, PDB.drawer.drawStick(P, u, m.pos_centered, t ? m.color : i, .3, m), PDB.GROUP[P].children[PDB.GROUP[P].children.length - 1].visible = o
            }
            startAtom = m
        }
    }, showBackboneByStartEnd: function (e, r, t) {
        var a = PDB.CONFIG.stick_sphere_w, o = "";
        if (t) {
            for (var n = 0; n < PDB.backboneAtomIdArray.length; n++) for (var i = PDB.backboneAtomIdArray[n], s = 0; s < i.length; s++) if (!(i[s] < e)) {
                if (i[s] > r) break;
                var l = PDB.tool.getMainAtom(PDB.pdbId, i[s]), c = "chain_" + l.chainname;
                if (PDB.drawer.drawSphere(c, l.pos_centered, l.color, .3, l, void 0, a), "" !== o) {
                    var d = PDB.tool.midPoint(o.pos_centered, l.pos_centered);
                    PDB.drawer.drawStick(c, o.pos_centered, d, o.color, .3, o), PDB.drawer.drawStick(c, d, l.pos_centered, l.color, .3, l)
                }
                o = l
            }
        } else for (var n = 0; n < PDB.backboneAtomIdArray.length; n++) for (var i = PDB.backboneAtomIdArray[n], s = 0; s < i.length; s++) if (!(i[s] < e)) {
            if (i[s] > r) break;
            var l = PDB.tool.getMainAtom(PDB.pdbId, i[s]), c = "chain_" + l.chainname;
            if (PDB.drawer.drawSphere(c, l.pos_centered, new THREE.Color("#CCC"), .3, l, void 0, a), "" !== o) {
                var d = PDB.tool.midPoint(o.pos_centered, l.pos_centered);
                PDB.drawer.drawStick(c, o.pos_centered, d, new THREE.Color("#CCC"), .3, o), PDB.drawer.drawStick(c, d, l.pos_centered, new THREE.Color("#CCC"), .3, l)
            }
            o = l
        }
    }, showBackbone1: function () {
        for (var e = 0; e < PDB.backboneAtomIdArray.length; e++) {
            var r = PDB.backboneAtomIdArray[e], t = PDB.tool.getMainAtom(PDB.pdbId, r[0]),
                a = PDB.tool.getMainAtom(PDB.pdbId, r[1]);
            PDB.drawer.drawMergeSphereStick(PDB.GROUP_MAIN, t, a, .3);
            for (var o = 1; o < r.length - 1; o++) {
                var t = PDB.tool.getMainAtom(PDB.pdbId, r[o - 1]), a = PDB.tool.getMainAtom(PDB.pdbId, r[o]),
                    n = PDB.tool.getMainAtom(PDB.pdbId, r[o + 1]);
                PDB.drawer.drawMergeStickSphereStick(PDB.GROUP_MAIN, t, a, n, .3)
            }
            var t = PDB.tool.getMainAtom(PDB.pdbId, r[r.length - 2]),
                a = PDB.tool.getMainAtom(PDB.pdbId, r[r.length - 1]);
            PDB.drawer.drawMergeStickSphere(PDB.GROUP_MAIN, t, a, .3)
        }
    }, showSphere: function () {
        var e = PDB.CONFIG.sphere_width;
        for (var r in w3m.mol) {
            var t = w3m.mol[r].atom.main;
            for (var a in t) {
                var o = PDB.tool.getMainAtom(r, a), n = "chain_" + o.chainname;
                PDB.drawer.drawSphere(n, o.pos_centered, o.color, o.radius, o, void 0, e)
            }
        }
    }, showSphereByResdue: function (e, r, t, a, o) {
        a = void 0 != a && a, o = void 0 == o || o;
        var n = PDB.CONFIG.sphere_width, i = new THREE.Color("#CCC"), s = w3m.mol[PDB.pdbId].residueData[e][r];
        for (var l in w3m.mol) for (var c = (w3m.mol[l].atom.main, s.faid); c <= s.laid; c++) {
            var d = PDB.tool.getMainAtom(l, c);
            if (d.caid = s.caid, void 0 != d) {
                var m = "chain_" + d.chainname + (a ? "_low" : "");
                PDB.drawer.drawSphere(m, d.pos_centered, t ? d.color : i, d.radius, d, void 0, n), PDB.GROUP[m].children[PDB.GROUP[m].children.length - 1].visible = o
            }
        }
    }, showSphereByStartEnd: function (e, r, t) {
        var a = PDB.CONFIG.sphere_width;
        if (t) for (var o in w3m.mol) {
            var n = w3m.mol[o].atom.main;
            for (var i in n) if (!(i < e)) {
                if (i > r) break;
                var s = PDB.tool.getMainAtom(o, i), l = "chain_" + s.chainname;
                PDB.drawer.drawSphere(l, s.pos_centered, s.color, s.radius, s, void 0, a)
            }
        } else for (var o in w3m.mol) {
            var n = w3m.mol[o].atom.main;
            for (var i in n) if (!(i < e)) {
                if (i > r) break;
                var s = PDB.tool.getMainAtom(o, i), l = "chain_" + s.chainname;
                PDB.drawer.drawSphere(l, s.pos_centered, new THREE.Color("#CCC"), s.radius, s, void 0, a)
            }
        }
    }, showSticks: function () {
        for (var e = {}, r = 0; r < PDB.linkedAtomIdArray.length; r++) {
            var t = PDB.linkedAtomIdArray[r], a = PDB.tool.getMainAtom(PDB.pdbId, t[0]),
                o = PDB.tool.getMainAtom(PDB.pdbId, t[1]), n = "chain_" + o.chainname;
            void 0 == e[a.id] ? (PDB.drawer.drawSphere(n, a.pos_centered, a.color, .2, a, addgroup, w), e[a.id] = 1) : void 0 == e[o.id] && (PDB.drawer.drawSphere(n, o.pos_centered, o.color, .2, o, addgroup, w), e[o.id] = 1);
            var i = PDB.tool.midPoint(a.pos_centered, o.pos_centered);
            PDB.drawer.drawStick(n, a.pos_centered, i, a.color, .2, a), PDB.drawer.drawStick(n, i, o.pos_centered, o.color, .2, o)
        }
    }, showSticksByResdue: function (e, r, t, a, o) {
        a = void 0 != a && a, o = void 0 == o || o;
        var n = PDB.CONFIG.stick_sphere_w, i = new THREE.Color("#CCC"), s = w3m.mol[PDB.pdbId].residueData[e][r],
            l = s.lines, c = {};
        for (var d in l) {
            var m = l[d], P = PDB.tool.getMainAtom(PDB.pdbId, m[0]), u = PDB.tool.getMainAtom(PDB.pdbId, m[1]);
            P.caid = s.caid, u.caid = s.caid;
            var D = "chain_" + u.chainname + (a ? "_low" : "");
            void 0 === c[P.id] && (PDB.drawer.drawSphere(D, P.pos_centered, t ? P.color : i, .2, P, void 0, n), PDB.GROUP[D].children[PDB.GROUP[D].children.length - 1].visible = o, c[P.id] = 1), void 0 === c[u.id] && (PDB.drawer.drawSphere(D, u.pos_centered, t ? u.color : i, .2, u, void 0, n), PDB.GROUP[D].children[PDB.GROUP[D].children.length - 1].visible = o, c[u.id] = 1);
            var _ = PDB.tool.midPoint(P.pos_centered, u.pos_centered);
            PDB.drawer.drawStick(D, P.pos_centered, _, t ? P.color : i, .2, P), PDB.GROUP[D].children[PDB.GROUP[D].children.length - 1].visible = o, PDB.drawer.drawStick(D, _, u.pos_centered, t ? u.color : i, .2, u), PDB.GROUP[D].children[PDB.GROUP[D].children.length - 1].visible = o
        }
    }, showSticksByStartEnd: function (e, r, t) {
        var a = PDB.CONFIG.stick_sphere_w;
        if (t) for (var o = .2, n = {}, i = 0; i < PDB.linkedAtomIdArray.length; i++) {
            var s = PDB.linkedAtomIdArray[i];
            if (!(s[0] < e && s[1] < e)) {
                if (s[0] > r && s[1] > r) break;
                var l = PDB.tool.getMainAtom(PDB.pdbId, s[1]), c = "chain_" + l.chainname,
                    d = PDB.tool.getMainAtom(PDB.pdbId, s[0]), l = PDB.tool.getMainAtom(PDB.pdbId, s[1]);
                void 0 == n[d.id] ? (PDB.drawer.drawSphere(c, d.pos_centered, d.color, o, d, void 0, a), n[d.id] = 1) : void 0 == n[l.id] && (PDB.drawer.drawSphere(c, l.pos_centered, l.color, o, l, void 0, a), n[l.id] = 1);
                var m = PDB.tool.midPoint(d.pos_centered, l.pos_centered);
                PDB.drawer.drawStick(c, d.pos_centered, m, d.color, o, d), PDB.drawer.drawStick(c, m, l.pos_centered, l.color, o, l)
            }
        } else for (var o = .2, n = {}, i = 0; i < PDB.linkedAtomIdArray.length; i++) {
            var s = PDB.linkedAtomIdArray[i];
            if (!(s[0] < e && s[1] < e)) {
                if (s[0] > r && s[1] > r) break;
                var d = PDB.tool.getMainAtom(PDB.pdbId, s[0]), l = PDB.tool.getMainAtom(PDB.pdbId, s[1]),
                    c = "chain_" + l.chainname;
                void 0 == n[d.id] ? (PDB.drawer.drawSphere(c, d.pos_centered, new THREE.Color("#CCC"), o, d, void 0, a), n[d.id] = 1) : void 0 == n[l.id] && (PDB.drawer.drawSphere(c, l.pos_centered, new THREE.Color("#CCC"), o, l, void 0, a), n[l.id] = 1);
                var m = PDB.tool.midPoint(d.pos_centered, l.pos_centered);
                PDB.drawer.drawStick(c, d.pos_centered, m, new THREE.Color("#CCC"), o, d), PDB.drawer.drawStick(c, m, l.pos_centered, new THREE.Color("#CCC"), o, l)
            }
        }
    }, showBallRod: function () {
        for (var e = {}, r = PDB.CONFIG.stick_sphere_w, t = 0; t < PDB.linkedAtomIdArray.length; t++) {
            var a = PDB.linkedAtomIdArray[t], o = PDB.tool.getMainAtom(PDB.pdbId, a[0]),
                n = PDB.tool.getMainAtom(PDB.pdbId, a[1]), i = "chain_" + n.chainname;
            void 0 == e[o.id] ? (PDB.drawer.drawSphere(i, o.pos_centered, o.color, .2 * o.radius, o, void 0, r), e[o.id] = 1) : void 0 == e[n.id] && (PDB.drawer.drawSphere(i, n.pos_centered, n.color, .2 * n.radius, n, void 0, r), e[n.id] = 1);
            var s = PDB.tool.midPoint(o.pos_centered, n.pos_centered);
            PDB.drawer.drawStick(i, o.pos_centered, s, o.color, .1, o), PDB.drawer.drawStick(i, s, n.pos_centered, n.color, .1, n)
        }
    }, showBallRodByResdue: function (e, r, t, a, o) {
        a = void 0 != a && a, o = void 0 == o || o;
        for (var n = PDB.CONFIG.stick_sphere_w, i = new THREE.Color("#CCC"), s = w3m.mol[PDB.pdbId].residueData[e][r], l = s.lines, c = {}, d = 0; d < l.length; d++) {
            var m = l[d], P = PDB.tool.getMainAtom(PDB.pdbId, m[0]), u = PDB.tool.getMainAtom(PDB.pdbId, m[1]);
            P.caid || (P.caid = s.caid, u.caid = s.caid);
            var D = "chain_" + u.chainname + (a ? "_low" : "");
            void 0 == c[P.id] && (PDB.drawer.drawSphere(D, P.pos_centered, t ? P.color : i, .2 * P.radius, P, void 0, n), PDB.GROUP[D].children[PDB.GROUP[D].children.length - 1].visible = o, c[P.id] = 1), void 0 == c[u.id] && (PDB.drawer.drawSphere(D, u.pos_centered, t ? u.color : i, .2 * u.radius, u, void 0, n), PDB.GROUP[D].children[PDB.GROUP[D].children.length - 1].visible = o, c[u.id] = 1);
            var _ = PDB.tool.midPoint(P.pos_centered, u.pos_centered);
            PDB.drawer.drawStick(D, P.pos_centered, _, t ? P.color : i, .1, P), PDB.GROUP[D].children[PDB.GROUP[D].children.length - 1].visible = o, PDB.drawer.drawStick(D, _, u.pos_centered, t ? u.color : i, .1, u), PDB.GROUP[D].children[PDB.GROUP[D].children.length - 1].visible = o
        }
    }, showBallRodByStartEnd: function (e, r, t) {
        var a = PDB.CONFIG.stick_sphere_w, o = {};
        if (t) for (var n = 0; n < PDB.linkedAtomIdArray.length; n++) {
            var i = PDB.linkedAtomIdArray[n];
            if (!(i[0] < e && i[1] < e)) {
                if (i[0] > r && i[1] > r) break;
                var s = PDB.tool.getMainAtom(PDB.pdbId, i[0]), l = PDB.tool.getMainAtom(PDB.pdbId, i[1]),
                    c = "chain_" + l.chainname;
                void 0 == o[s.id] ? (PDB.drawer.drawSphere(c, s.pos_centered, s.color, .2 * s.radius, s, void 0, a), o[s.id] = 1) : void 0 == o[l.id] && (PDB.drawer.drawSphere(c, l.pos_centered, l.color, .2 * l.radius, l, void 0, a), o[l.id] = 1);
                var d = PDB.tool.midPoint(s.pos_centered, l.pos_centered);
                PDB.drawer.drawStick(c, s.pos_centered, d, s.color, .1, s), PDB.drawer.drawStick(c, d, l.pos_centered, l.color, .1, l)
            }
        } else for (var n = 0; n < PDB.linkedAtomIdArray.length; n++) {
            var i = PDB.linkedAtomIdArray[n];
            if (!(i[0] < e && i[1] < e)) {
                if (i[0] > r && i[1] > r) break;
                var s = PDB.tool.getMainAtom(PDB.pdbId, i[0]), l = PDB.tool.getMainAtom(PDB.pdbId, i[1]),
                    c = "chain_" + l.chainname;
                void 0 == o[s.id] ? (PDB.drawer.drawSphere(c, s.pos_centered, new THREE.Color("#CCC"), .2 * s.radius, s, void 0, a), o[s.id] = 1) : void 0 == o[l.id] && (PDB.drawer.drawSphere(c, l.pos_centered, new THREE.Color("#CCC"), .2 * l.radius, l, void 0, a), o[l.id] = 1);
                var d = PDB.tool.midPoint(s.pos_centered, l.pos_centered);
                PDB.drawer.drawStick(c, s.pos_centered, d, new THREE.Color("#CCC"), .1, s), PDB.drawer.drawStick(c, d, l.pos_centered, new THREE.Color("#CCC"), .1, l)
            }
        }
    }, showTubeByResdue: function (e, r, t, a, o) {
        a = void 0 != a && a, o = void 0 == o || o;
        var n = PDB.CONFIG.stick_sphere_w, i = PDB.CONFIG.tube_radius, s = w3m.mol[PDB.pdbId].residueData, l = s[e][r],
            c = l.path, d = PDB.tool.getMainAtom(PDB.pdbId, l.caid);
        if (d.caid = l.caid, void 0 == s[e][Number(r) - 1]) {
            var m = a ? "chain_" + d.chainname + "_low" : "chain_" + d.chainname;
            s[e][r].path.length > 0 && (PDB.drawer.drawSphere(m, s[e][r].path[0], t ? d.color : P, i, d, void 0, n), PDB.GROUP[m].children[PDB.GROUP[m].children.length - 1].visible = o)
        }
        var P = new THREE.Color("#CCC"), u = w3m.mol[PDB.pdbId].residueData[e][r - 1];
        void 0 != u && u.path && u.path.length > 0 && (c = [u.path[u.path.length - 1]].concat(c));
        var m = a ? "chain_" + d.chainname + "_low" : "chain_" + d.chainname;
        if (c.length > 0) {
            var D = PDB.structureSizeLevel >= 3 && Math.floor(c.length / 4) >= 2 ? Math.floor(c.length / 4) : c.length - 1,
                _ = PDB.structureSizeLevel <= 1 ? D : 3;
            PDB.drawer.drawTube(m, c, t ? d.color : P, i, {}, a ? _ : D, [l.caid]), PDB.GROUP[m].children[PDB.GROUP[m].children.length - 1].visible = o
        }
        if (void 0 == s[e][Number(r) + 1] && c.length - 1 > 0) {
            var m = a ? "chain_" + d.chainname + "_low" : "chain_" + d.chainname;
            PDB.drawer.drawSphere(m, c[c.length - 1], t ? d.color : P, i, d, void 0, n), PDB.GROUP[m].children[PDB.GROUP[m].children.length - 1].visible = o
        }
    }, showTubeByResdueHEAD: function (e, r, t, a, o) {
        a = void 0 != a && a, o = void 0 == o || o;
        var n = w3m.mol[PDB.pdbId].residueData[e][r], i = n.path.slice(0, n.path.length / 2 + 1),
            s = new THREE.Color("#CCC"), l = w3m.mol[PDB.pdbId].residueData[e][r - 1];
        void 0 != l && (i = [l.path[l.path.length - 1]].concat(i));
        var c = PDB.CONFIG.tube_radius, d = PDB.tool.getMainAtom(PDB.pdbId, n.caid),
            m = a ? "chain_" + d.chainname + "_low" : "chain_" + d.chainname;
        if (i.length > 0) {
            var P = PDB.structureSizeLevel >= 3 ? Math.floor(i.length / 4) : i.length - 1,
                u = PDB.structureSizeLevel <= 1 ? P : 3;
            PDB.drawer.drawTube(m, i, t ? d.color : s, c, {}, a ? u : P, [n.caid]), PDB.GROUP[m].children[PDB.GROUP[m].children.length - 1].visible = o
        }
    }, showTubeByResdueFOOT: function (e, r, t, a, o) {
        a = void 0 != a && a, o = void 0 == o || o;
        var n = w3m.mol[PDB.pdbId].residueData[e][r], i = n.path.slice(n.path.length / 2 - 1, n.path.length),
            s = new THREE.Color("#CCC"), l = PDB.CONFIG.tube_radius, c = PDB.tool.getMainAtom(PDB.pdbId, n.caid),
            d = a ? "chain_" + c.chainname + "_low" : "chain_" + c.chainname;
        if (i.length > 0) {
            var m = PDB.structureSizeLevel >= 3 ? Math.floor(i.length / 4) : i.length - 1,
                P = PDB.structureSizeLevel <= 1 ? m : 3;
            PDB.drawer.drawTube(d, i, t ? c.color : s, l, {}, a ? P : m, [n.caid]), PDB.GROUP[d].children[PDB.GROUP[d].children.length - 1].visible = o
        }
    }, showRibbon_Flat: function () {
        for (var e in PDB.cubeData.path) {
            var r = PDB.cubeData.path[e], t = PDB.cubeData.ids[e], a = -1, o = -1, n = [], i = [], s = [], l = [];
            for (var c in t) if (o = t[c], n.push(r[c]), i.push(PDB.cubeData.binormals[e][c]), s.push(PDB.cubeData.normals[e][c]), l.push(PDB.cubeData.tangents[e][c]), o != a) {
                if (0 != c) {
                    var d = PDB.tool.getColorByIndex(a, "main"), m = {binormals: i, normals: s, tangents: l},
                        P = PDB.tool.getMainAtom(PDB.pdbId, t[1]), u = "chain_" + P.chainname;
                    PDB.drawer.drawFlat(u, n, d, 0, m, n.length - 1, [a]), n = [], i = [], s = [], l = [], n.push(r[c]), i.push(PDB.cubeData.binormals[e][c]), s.push(PDB.cubeData.normals[e][c]), l.push(PDB.cubeData.tangents[e][c])
                }
                a = t[c]
            }
        }
    }, showRibbon_FlatByResdue: function (e, r, t, a, o) {
        a = void 0 != a && a, o = void 0 == o || o;
        var n = w3m.mol[PDB.pdbId].residueData[e][r], i = {};
        i.tangents = n.tangents, i.normals = n.normals, i.binormals = n.binormals;
        var s = n.path, l = new THREE.Color("#CCC"), c = w3m.mol[PDB.pdbId].residueData[e][r - 1];
        if (void 0 != c && (s = [c.path[c.path.length - 1]].concat(s), i.tangents = [c.tangents[c.tangents.length - 1]].concat(i.tangents), i.normals = [c.normals[c.normals.length - 1]].concat(i.normals), i.binormals = [c.binormals[c.binormals.length - 1]].concat(i.binormals)), a) i.tangents = [i.tangents[0], i.tangents[Math.floor(i.tangents.length / 4)], i.tangents[Math.floor(i.tangents.length / 2)], i.tangents[Math.floor(3 * i.tangents.length / 4)], i.tangents[i.tangents.length - 1]], i.normals = [i.normals[0], i.normals[Math.floor(i.normals.length / 4)], i.normals[Math.floor(i.normals.length / 2)], i.normals[Math.floor(3 * i.normals.length / 4)], i.normals[i.normals.length - 1]], i.binormals = [i.binormals[0], i.binormals[Math.floor(i.binormals.length / 4)], i.binormals[Math.floor(i.binormals.length / 2)], i.binormals[Math.floor(3 * i.binormals.length / 4)], i.binormals[i.binormals.length - 1]]; else if (!a && PDB.loadType == PDB.bigmodel && PDB.structureSizeLevel >= 3) {
            for (var d = [], m = [], P = [], u = 0; u < i.tangents.length; u++) u % 2 == 0 && (d.push(i.tangents[u]), m.push(i.normals[u]), P.push(i.binormals[u]));
            i = {tangents: d, normals: m, binormals: P}
        }
        var D = PDB.tool.getMainAtom(PDB.pdbId, n.caid), _ = "chain_" + D.chainname + (a ? "_low" : "");
        PDB.drawer.drawFlat(_, s, t ? D.color : l, 0, i, a ? 4 : i.tangents.length - 1, [n.caid]), PDB.GROUP[_].children[PDB.GROUP[_].children.length - 1].visible = o
    }, showRibbon_Ellipse: function () {
        var e = PDB.CONFIG.ellipse_radius;
        for (var r in PDB.cubeData.path) {
            var t = PDB.cubeData.path[r], a = PDB.cubeData.ids[r], o = -1, n = -1, i = [], s = [], l = [], c = [];
            for (var d in a) if (n = a[d], i.push(t[d]), s.push(PDB.cubeData.binormals[r][d]), l.push(PDB.cubeData.normals[r][d]), c.push(PDB.cubeData.tangents[r][d]), n != o) {
                if (0 != d) {
                    var m = PDB.tool.getColorByIndex(o, "main"), P = {binormals: s, normals: l, tangents: c},
                        u = PDB.tool.getMainAtom(PDB.pdbId, a[1]), D = "chain_" + u.chainname;
                    PDB.drawer.drawEllipse(D, i, m, e, P, i.length - 1, [o]), i = [], s = [], l = [], c = [], i.push(t[d]), s.push(PDB.cubeData.binormals[r][d]), l.push(PDB.cubeData.normals[r][d]), c.push(PDB.cubeData.tangents[r][d])
                }
                o = a[d]
            }
        }
    }, showRibbon_EllipseByResdue: function (e, r, t, a, o) {
        a = void 0 != a && a, o = void 0 == o || o;
        var n = w3m.mol[PDB.pdbId].residueData[e][r], i = {};
        i.tangents = n.tangents, i.normals = n.normals, i.binormals = n.binormals;
        var s = n.path, l = new THREE.Color("#CCC"), c = w3m.mol[PDB.pdbId].residueData[e][r - 1];
        if (void 0 != c && (s = [c.path[c.path.length - 1]].concat(s), i.tangents = [c.tangents[c.tangents.length - 1]].concat(i.tangents), i.normals = [c.normals[c.normals.length - 1]].concat(i.normals), i.binormals = [c.binormals[c.binormals.length - 1]].concat(i.binormals)), a) i.tangents = [i.tangents[0], i.tangents[Math.floor(i.tangents.length / 4)], i.tangents[Math.floor(i.tangents.length / 2)], i.tangents[Math.floor(3 * i.tangents.length / 4)], i.tangents[i.tangents.length - 1]], i.normals = [i.normals[0], i.normals[Math.floor(i.normals.length / 4)], i.normals[Math.floor(i.normals.length / 2)], i.normals[Math.floor(3 * i.normals.length / 4)], i.normals[i.normals.length - 1]], i.binormals = [i.binormals[0], i.binormals[Math.floor(i.binormals.length / 4)], i.binormals[Math.floor(i.binormals.length / 2)], i.binormals[Math.floor(3 * i.binormals.length / 4)], i.binormals[i.binormals.length - 1]]; else if (!a && PDB.loadType == PDB.bigmodel && PDB.structureSizeLevel >= 3) {
            for (var d = [], m = [], P = [], u = 0; u < i.tangents.length; u++) u % 2 == 0 && (d.push(i.tangents[u]), m.push(i.normals[u]), P.push(i.binormals[u]));
            i = {tangents: d, normals: m, binormals: P}
        }
        var D = PDB.CONFIG.ellipse_radius, _ = PDB.tool.getMainAtom(PDB.pdbId, n.caid),
            h = "chain_" + _.chainname + (a ? "_low" : "");
        PDB.drawer.drawEllipse(h, s, t ? _.color : l, D, i, a ? 4 : i.tangents.length - 1, [n.caid]), PDB.GROUP[h].children[PDB.GROUP[h].children.length - 1].visible = o
    }, showRibbon_EllipseByResdueHEAD: function (e, r, t, a, o) {
        a = void 0 != a && a, o = void 0 == o || o;
        var n = w3m.mol[PDB.pdbId].residueData[e][r], i = n.path.slice(0, n.path.length / 2), s = {};
        s.tangents = n.tangents.slice(0, n.tangents.length / 2), s.normals = n.normals.slice(0, n.normals.length / 2), s.binormals = n.binormals.slice(0, n.binormals.length / 2);
        var l = new THREE.Color("#CCC"), c = w3m.mol[PDB.pdbId].residueData[e][r - 1];
        if (void 0 != c && (i = [c.path[c.path.length - 1]].concat(i), s.tangents = [c.tangents[c.tangents.length - 1]].concat(s.tangents), s.normals = [c.normals[c.normals.length - 1]].concat(s.normals), s.binormals = [c.binormals[c.binormals.length - 1]].concat(s.binormals)), a) s.tangents = [s.tangents[0], s.tangents[Math.floor(s.tangents.length / 4)], s.tangents[Math.floor(s.tangents.length / 2)], s.tangents[Math.floor(3 * s.tangents.length / 4)], s.tangents[s.tangents.length - 1]], s.normals = [s.normals[0], s.normals[Math.floor(s.normals.length / 4)], s.normals[Math.floor(s.normals.length / 2)], s.normals[Math.floor(3 * s.normals.length / 4)], s.normals[s.normals.length - 1]], s.binormals = [s.binormals[0], s.binormals[Math.floor(s.binormals.length / 4)], s.binormals[Math.floor(s.binormals.length / 2)], s.binormals[Math.floor(3 * s.binormals.length / 4)], s.binormals[s.binormals.length - 1]]; else if (!a && PDB.loadType == PDB.bigmodel && PDB.structureSizeLevel >= 3) {
            for (var d = [], m = [], P = [], u = 0; u < s.tangents.length; u++) u % 2 == 0 && (d.push(s.tangents[u]), m.push(s.normals[u]), P.push(s.binormals[u]));
            s = {tangents: d, normals: m, binormals: P}
        }
        var D = PDB.CONFIG.ellipse_radius, _ = PDB.tool.getMainAtom(PDB.pdbId, n.caid),
            h = "chain_" + _.chainname + (a ? "_low" : "");
        PDB.drawer.drawEllipse(h, i, t ? _.color : l, D, s, a ? 4 : s.tangents.length - 1, [n.caid]), PDB.GROUP[h].children[PDB.GROUP[h].children.length - 1].visible = o
    }, showRibbon_EllipseByResdueFOOT: function (e, r, t, a, o) {
        a = void 0 != a && a, o = void 0 == o || o;
        var n = w3m.mol[PDB.pdbId].residueData[e][r], i = n.path.slice(n.path.length / 2 - 1, n.path.length), s = {};
        if (s.tangents = n.tangents.slice(n.tangents.length / 2 - 1, n.tangents.length), s.normals = n.normals.slice(n.normals.length / 2 - 1, n.normals.length), s.binormals = n.binormals.slice(n.binormals.length / 2 - 1, n.binormals.length), a) s.tangents = [s.tangents[0], s.tangents[Math.floor(s.tangents.length / 4)], s.tangents[Math.floor(s.tangents.length / 2)], s.tangents[Math.floor(3 * s.tangents.length / 4)], s.tangents[s.tangents.length - 1]], s.normals = [s.normals[0], s.normals[Math.floor(s.normals.length / 4)], s.normals[Math.floor(s.normals.length / 2)], s.normals[Math.floor(3 * s.normals.length / 4)], s.normals[s.normals.length - 1]], s.binormals = [s.binormals[0], s.binormals[Math.floor(s.binormals.length / 4)], s.binormals[Math.floor(s.binormals.length / 2)], s.binormals[Math.floor(3 * s.binormals.length / 4)], s.binormals[s.binormals.length - 1]]; else if (!a && PDB.loadType == PDB.bigmodel && PDB.structureSizeLevel >= 3) {
            for (var l = [], c = [], d = [], m = 0; m < s.tangents.length; m++) m % 2 == 0 && (l.push(s.tangents[m]), c.push(s.normals[m]), d.push(s.binormals[m]));
            s = {tangents: l, normals: c, binormals: d}
        }
        var P = new THREE.Color("#CCC"), u = PDB.CONFIG.ellipse_radius, D = PDB.tool.getMainAtom(PDB.pdbId, n.caid),
            _ = "chain_" + D.chainname + (a ? "_low" : "");
        PDB.drawer.drawEllipse(_, i, t ? D.color : P, u, s, a ? 4 : s.tangents.length - 1, [n.caid]), PDB.GROUP[_].children[PDB.GROUP[_].children.length - 1].visible = o
    }, showRibbon_Rectangle: function () {
        for (var e in PDB.cubeData.path) {
            var r = PDB.cubeData.path[e], t = PDB.cubeData.ids[e], a = -1, o = [], n = [], i = [], s = [];
            for (var l in t) {
                if (t[l] != a) {
                    if (0 != l) {
                        o.push(r[l]), n.push(PDB.cubeData.binormals[e][l]), i.push(PDB.cubeData.normals[e][l]), s.push(PDB.cubeData.tangents[e][l]);
                        var c = PDB.tool.getColorByIndex(a, "main"), d = {binormals: n, normals: i, tangents: s},
                            m = PDB.tool.getMainAtom(PDB.pdbId, t[0]), P = "chain_" + m.chainname;
                        PDB.drawer.drawRectangle(P, o, c, 0, d, o.length - 1, [a]), o = [], n = [], i = [], s = []
                    }
                    a = t[l]
                }
                o.push(r[l]), n.push(PDB.cubeData.binormals[e][l]), i.push(PDB.cubeData.normals[e][l]), s.push(PDB.cubeData.tangents[e][l])
            }
        }
    }, showRibbon_RectangleByResdue: function (e, r, t, a, o) {
        a = void 0 != a && a, o = void 0 == o || o;
        var n = w3m.mol[PDB.pdbId].residueData[e][r], i = {};
        i.tangents = n.tangents, i.normals = n.normals, i.binormals = n.binormals;
        var s = n.path, l = new THREE.Color("#CCC"), c = w3m.mol[PDB.pdbId].residueData[e][r - 1];
        if (void 0 != c && (s = [c.path[c.path.length - 1]].concat(s), i.tangents = [c.tangents[c.tangents.length - 1]].concat(i.tangents), i.normals = [c.normals[c.normals.length - 1]].concat(i.normals), i.binormals = [c.binormals[c.binormals.length - 1]].concat(i.binormals)), a) i.tangents = [i.tangents[0], i.tangents[Math.floor(i.tangents.length / 4)], i.tangents[Math.floor(i.tangents.length / 2)], i.tangents[Math.floor(3 * i.tangents.length / 4)], i.tangents[i.tangents.length - 1]], i.normals = [i.normals[0], i.normals[Math.floor(i.normals.length / 4)], i.normals[Math.floor(i.normals.length / 2)], i.normals[Math.floor(3 * i.normals.length / 4)], i.normals[i.normals.length - 1]], i.binormals = [i.binormals[0], i.binormals[Math.floor(i.binormals.length / 4)], i.binormals[Math.floor(i.binormals.length / 2)], i.binormals[Math.floor(3 * i.binormals.length / 4)], i.binormals[i.binormals.length - 1]]; else if (!a && PDB.loadType == PDB.bigmodel && PDB.structureSizeLevel >= 3) {
            for (var d = [], m = [], P = [], u = 0; u < i.tangents.length; u++) u % 2 == 0 && (d.push(i.tangents[u]), m.push(i.normals[u]), P.push(i.binormals[u]));
            i = {tangents: d, normals: m, binormals: P}
        }
        var D = PDB.tool.getMainAtom(PDB.pdbId, n.caid), _ = "chain_" + D.chainname + (a ? "_low" : "");
        PDB.drawer.drawRectangle(_, s, t ? D.color : l, 0, i, a ? 4 : i.tangents.length - 1, [n.caid]), PDB.GROUP[_].children[PDB.GROUP[_].children.length - 1].visible = o
    }, showRibbon_Strip: function () {
        var e = PDB.CONFIG.strip_radius;
        for (var r in PDB.cubeData.path) {
            var t = PDB.cubeData.path[r], a = PDB.cubeData.ids[r], o = -1, n = [], i = [], s = [], l = [];
            for (var c in a) {
                if (a[c] != o) {
                    if (0 != c) {
                        n.push(t[c]), i.push(PDB.cubeData.binormals[r][c]), s.push(PDB.cubeData.normals[r][c]), l.push(PDB.cubeData.tangents[r][c]);
                        var d = PDB.tool.getColorByIndex(o, "main"), m = {binormals: i, normals: s, tangents: l},
                            P = PDB.tool.getMainAtom(PDB.pdbId, a[1]), u = "chain_" + P.chainname;
                        PDB.drawer.drawStrip(u, n, d, e, m, n.length - 1, [o]), n = [], i = [], s = [], l = []
                    }
                    o = a[c]
                }
                n.push(t[c]), i.push(PDB.cubeData.binormals[r][c]), s.push(PDB.cubeData.normals[r][c]), l.push(PDB.cubeData.tangents[r][c])
            }
        }
    }, showRibbon_StripByResdue: function (e, r, t, a, o) {
        a = void 0 != a && a, o = void 0 == o || o;
        var n = w3m.mol[PDB.pdbId].residueData[e][r], i = {};
        i.tangents = n.tangents, i.normals = n.normals, i.binormals = n.binormals;
        var s = n.path, l = new THREE.Color("#CCC"), c = w3m.mol[PDB.pdbId].residueData[e][r - 1];
        if (void 0 != c && (s = [c.path[c.path.length - 1]].concat(s), i.tangents = [c.tangents[c.tangents.length - 1]].concat(i.tangents), i.normals = [c.normals[c.normals.length - 1]].concat(i.normals), i.binormals = [c.binormals[c.binormals.length - 1]].concat(i.binormals)), a) i.tangents = [i.tangents[0], i.tangents[Math.floor(i.tangents.length / 4)], i.tangents[Math.floor(i.tangents.length / 2)], i.tangents[Math.floor(3 * i.tangents.length / 4)], i.tangents[i.tangents.length - 1]], i.normals = [i.normals[0], i.normals[Math.floor(i.normals.length / 4)], i.normals[Math.floor(i.normals.length / 2)], i.normals[Math.floor(3 * i.normals.length / 4)], i.normals[i.normals.length - 1]], i.binormals = [i.binormals[0], i.binormals[Math.floor(i.binormals.length / 4)], i.binormals[Math.floor(i.binormals.length / 2)], i.binormals[Math.floor(3 * i.binormals.length / 4)], i.binormals[i.binormals.length - 1]]; else if (!a && PDB.loadType == PDB.bigmodel && PDB.structureSizeLevel >= 3) {
            for (var d = [], m = [], P = [], u = 0; u < i.tangents.length; u++) u % 2 == 0 && (d.push(i.tangents[u]), m.push(i.normals[u]), P.push(i.binormals[u]));
            i = {tangents: d, normals: m, binormals: P}
        }
        var D = PDB.tool.getMainAtom(PDB.pdbId, n.caid), _ = "chain_" + D.chainname + (a ? "_low" : ""),
            h = PDB.CONFIG.strip_radius;
        PDB.drawer.drawStrip(_, s, t ? D.color : l, h, i, a ? 4 : i.tangents.length - 1, [n.caid]), PDB.GROUP[_].children[PDB.GROUP[_].children.length - 1].visible = o
    }, showRibbon_Railway: function () {
        var e = PDB.CONFIG.railway_radius;
        for (var r in PDB.cubeData.path) {
            var t = PDB.cubeData.path[r], a = PDB.cubeData.ids[r], o = -1, n = [], i = [], s = [], l = [];
            for (var c in a) {
                if (a[c] != o) {
                    if (0 != c) {
                        n.push(t[c]), i.push(PDB.cubeData.binormals[r][c]), s.push(PDB.cubeData.normals[r][c]), l.push(PDB.cubeData.tangents[r][c]);
                        var d = PDB.tool.getColorByIndex(o, "main"), m = {binormals: i, normals: s, tangents: l},
                            P = PDB.tool.getMainAtom(PDB.pdbId, a[0]), u = "chain_" + P.chainname;
                        PDB.drawer.drawRailway(u, n, d, e, m, n.length - 1, [o]), n = [], i = [], s = [], l = []
                    }
                    o = a[c]
                }
                n.push(t[c]), i.push(PDB.cubeData.binormals[r][c]), s.push(PDB.cubeData.normals[r][c]), l.push(PDB.cubeData.tangents[r][c])
            }
        }
    }, showRibbon_RailwayByResdue: function (e, r, t, a, o) {
        a = void 0 != a && a, o = void 0 == o || o;
        var n = w3m.mol[PDB.pdbId].residueData[e][r], i = {};
        i.tangents = n.tangents, i.normals = n.normals, i.binormals = n.binormals;
        var s = n.path, l = new THREE.Color("#CCC"), c = w3m.mol[PDB.pdbId].residueData[e][r - 1];
        if (void 0 != c && (s = [c.path[c.path.length - 1]].concat(s), i.tangents = [c.tangents[c.tangents.length - 1]].concat(i.tangents), i.normals = [c.normals[c.normals.length - 1]].concat(i.normals), i.binormals = [c.binormals[c.binormals.length - 1]].concat(i.binormals)), a) i.tangents = [i.tangents[0], i.tangents[Math.floor(i.tangents.length / 4)], i.tangents[Math.floor(i.tangents.length / 2)], i.tangents[Math.floor(3 * i.tangents.length / 4)], i.tangents[i.tangents.length - 1]], i.normals = [i.normals[0], i.normals[Math.floor(i.normals.length / 4)], i.normals[Math.floor(i.normals.length / 2)], i.normals[Math.floor(3 * i.normals.length / 4)], i.normals[i.normals.length - 1]], i.binormals = [i.binormals[0], i.binormals[Math.floor(i.binormals.length / 4)], i.binormals[Math.floor(i.binormals.length / 2)], i.binormals[Math.floor(3 * i.binormals.length / 4)], i.binormals[i.binormals.length - 1]]; else if (!a && PDB.loadType == PDB.bigmodel && PDB.structureSizeLevel >= 3) {
            for (var d = [], m = [], P = [], u = 0; u < i.tangents.length; u++) u % 2 == 0 && (d.push(i.tangents[u]), m.push(i.normals[u]), P.push(i.binormals[u]));
            i = {tangents: d, normals: m, binormals: P}
        }
        var D = PDB.CONFIG.railway_radius, _ = PDB.tool.getMainAtom(PDB.pdbId, n.caid),
            h = "chain_" + _.chainname + (a ? "_low" : "");
        PDB.drawer.drawRailway(h, s, t ? _.color : l, D, i, a ? 4 : i.tangents.length - 1, [n.caid]), PDB.GROUP[h].children[PDB.GROUP[h].children.length - 1].visible = o
    }, showCartoon_SSE0: function () {
        for (var e = "", r = 0; r < PDB.tubeArray.length; r++) {
            for (var t = PDB.tubeArray[r], a = [], o = 0; o < t.length; o++) a.push(new THREE.Vector3(t[o].x + offset.x, t[o].y + offset.y, t[o].z + offset.z)), atom = PDB.tool.getMainAtom(PDB.pdbId, t[o].id), resid = atom.resid, e = getColorByIndex(t[o].c);
            e = 41797;
            PDB.drawer.drawTube(PDB.GROUP_MAIN, a, e, .2, 3e3)
        }
        e = 41797;
        for (var o = 0; o < PDB.arrowArray.length; o++) {
            var n = PDB.arrowArray[o];
            drawArrow(PDB.GROUP_MAIN, n, e, 1)
        }
    }, showCartoon_SSE: function () {
        var e = PDB.CONFIG.ellipse_radius, r = PDB.cartoonHLObj.helix;
        for (var t in r) for (var a = r[t], o = a[0], n = a[1], i = a[3], s = a[4], l = a[5], c = -1, d = -1, m = [], P = [], u = [], D = [], _ = 0; _ < o.length; _++) {
            if (d = o[_], m.push(n[_]), P.push(l[_]), u.push(s[_]), D.push(i[_]), -1 != c && c != d) {
                var h = {binormals: P, normals: u, tangents: D}, B = PDB.tool.getColorByIndex(c, "main"),
                    p = PDB.tool.getMainAtom(PDB.pdbId, c), E = "chain_" + p.chainname;
                PDB.drawer.drawEllipse(E, m, B, e, h, m.length - 1, [c]), m = [], P = [], u = [], D = [], m.push(n[_]), P.push(l[_]), u.push(s[_]), D.push(i[_])
            } else if (_ == o.length - 1) {
                var h = {binormals: P, normals: u, tangents: D}, B = PDB.tool.getColorByIndex(c, "main"),
                    p = PDB.tool.getMainAtom(PDB.pdbId, c), E = "chain_" + p.chainname;
                PDB.drawer.drawEllipse(E, m, B, e, h, m.length - 1, [c])
            }
            c = o[_]
        }
        var f = PDB.cartoonHLObj.loop;
        e = PDB.CONFIG.tube_radius, c = -1;
        for (var t in f) for (var n = f[t][1], o = f[t][0], c = -1, d = -1, m = [], _ = 0; _ < o.length; _++) {
            if (d = o[_], m.push(n[_]), -1 != c && c != d) {
                var B = PDB.tool.getColorByIndex(c, "main"), p = PDB.tool.getMainAtom(PDB.pdbId, c),
                    E = "chain_" + p.chainname;
                PDB.drawer.drawTube(E, m, B, e, {}, m.length - 1, [c]), m = [], m.push(n[_ - 1]), m.push(n[_])
            } else if (_ == o.length - 1) {
                var B = PDB.tool.getColorByIndex(c, "main"), p = PDB.tool.getMainAtom(PDB.pdbId, c),
                    E = "chain_" + p.chainname;
                PDB.drawer.drawTube(E, m, B, e, {}, m.length - 1, [c])
            }
            c = o[_]
        }
        var w = PDB.cartoonSheetArray.head;
        for (var t in w) for (var n = w[t].paths, o = w[t].ids, c = -1, d = -1, m = [], _ = 0; _ < o.length; _ += 4) {
            if (d = o[_], m.push(n[_]), m.push(n[_ + 1]), m.push(n[_ + 2]), m.push(n[_ + 3]), -1 != c && c != d) {
                var B = PDB.tool.getColorByIndex(c, "main"), p = PDB.tool.getMainAtom(PDB.pdbId, c),
                    E = "chain_" + p.chainname;
                PDB.drawer.drawArrowByPaths(E, m, B, [c]), m = [], m.push(n[_ - 8]), m.push(n[_ - 7]), m.push(n[_ - 6]), m.push(n[_ - 5]), m.push(n[_ - 4]), m.push(n[_ - 3]), m.push(n[_ - 2]), m.push(n[_ - 1]), m.push(n[_]), m.push(n[_ + 1]), m.push(n[_ + 2]), m.push(n[_ + 3])
            } else if (-1 != c && _ == o.length - 4) {
                var B = PDB.tool.getColorByIndex(c, "main"), p = PDB.tool.getMainAtom(PDB.pdbId, c),
                    E = "chain_" + p.chainname;
                PDB.drawer.drawArrowByPaths(E, m, B, [c]), PDB.drawer.drawArrowByPaths(E, m, B, [c])
            }
            c = o[_]
        }
        var g = PDB.cartoonSheetArray.tail;
        for (var t in g) for (var n = g[t].paths, o = g[t].ids, c = -1, d = -1, m = [], _ = 0; _ < o.length; _ += 4) {
            if (d = o[_], m.push(n[_]), m.push(n[_ + 1]), m.push(n[_ + 2]), m.push(n[_ + 3]), -1 != c && c != d) {
                var B = PDB.tool.getColorByIndex(c, "main"), p = PDB.tool.getMainAtom(PDB.pdbId, c),
                    E = "chain_" + p.chainname;
                PDB.drawer.drawArrowByPaths(E, m, B, [c]), m = [], m.push(n[_ - 8]), m.push(n[_ - 7]), m.push(n[_ - 6]), m.push(n[_ - 5]), m.push(n[_ - 4]), m.push(n[_ - 3]), m.push(n[_ - 2]), m.push(n[_ - 1]), m.push(n[_]), m.push(n[_ + 1]), m.push(n[_ + 2]), m.push(n[_ + 3])
            } else if (-1 != c && _ == o.length - 4) {
                var B = PDB.tool.getColorByIndex(c, "main"), p = PDB.tool.getMainAtom(PDB.pdbId, c),
                    E = "chain_" + p.chainname;
                PDB.drawer.drawArrowByPaths(E, m, B, [c])
            }
            c = o[_]
        }
    }, showCartoon_SSEByStartEnd: function (e, r, t) {
        var a = PDB.tool.getCAAtomByLastAtomId(r);
        a.length > 0 && (r = a[1]), a = PDB.tool.getCAAtomByStartAtomId(e), a.length > 0 && (e = a[1]);
        var o = PDB.CONFIG.ellipse_radius, n = PDB.cartoonHLObj.helix;
        for (var i in n) for (var s = n[i], l = s[0], c = s[1], d = s[3], m = s[4], P = s[5], u = -1, D = -1, _ = [], h = [], B = [], p = [], E = 0; E < l.length; E++) if (!(l[E] < e)) {
            if (l[E] > r) break;
            if (D = l[E], _.push(c[E]), h.push(P[E]), B.push(m[E]), p.push(d[E]), -1 != u && u != D) {
                var f, w = {binormals: h, normals: B, tangents: p};
                f = t ? PDB.tool.getColorByIndex(u, "main") : new THREE.Color("#CCC");
                var g = PDB.tool.getMainAtom(PDB.pdbId, u), v = "chain_" + g.chainname;
                PDB.drawer.drawEllipse(v, _, f, o, w, _.length - 1, [u]), _ = [], h = [], B = [], p = [], _.push(c[E]), h.push(P[E]), B.push(m[E]), p.push(d[E])
            } else if (E == l.length - 1 || 0 != E && u == D && E != l.length - 1 && l[E] == r && l[E + 1] != r) {
                E < l.length - 1 && (_.push(c[E + 1]), h.push(P[E + 1]), B.push(m[E + 1]), p.push(d[E + 1]));
                var f, w = {binormals: h, normals: B, tangents: p};
                f = t ? PDB.tool.getColorByIndex(u, "main") : new THREE.Color("#CCC");
                var g = PDB.tool.getMainAtom(PDB.pdbId, u), v = "chain_" + g.chainname;
                PDB.drawer.drawEllipse(v, _, f, o, w, _.length - 1, [u])
            }
            u = l[E]
        }
        var R = PDB.cartoonHLObj.loop;
        o = PDB.CONFIG.tube_radius;
        for (var i in R) for (var c = R[i][1], l = R[i][0], u = -1, D = -1, _ = [], E = 0; E < l.length; E++) if (!(l[E] < e)) {
            if (l[E] > r) break;
            if (D = l[E], _.push(c[E]), -1 != u && u != D) {
                var f
                ;f = t ? PDB.tool.getColorByIndex(u, "main") : new THREE.Color("#CCC");
                var g = PDB.tool.getMainAtom(PDB.pdbId, u), v = "chain_" + g.chainname;
                PDB.drawer.drawTube(v, _, f, o, {}, _.length - 1, [u]), _ = [], _.push(c[E - 1]), _.push(c[E])
            } else if (E == l.length - 1 || 0 != E && u == D && E != l.length - 1 && l[E] == r && l[E + 1] != r) {
                E < l.length - 1 && _.push(c[E + 1]);
                var f;
                f = t ? PDB.tool.getColorByIndex(u, "main") : new THREE.Color("#CCC");
                var g = PDB.tool.getMainAtom(PDB.pdbId, u), v = "chain_" + g.chainname;
                PDB.drawer.drawTube(v, _, f, o, {}, _.length - 1, [u])
            }
            u = l[E]
        }
        var b = PDB.cartoonSheetArray.head;
        for (var i in b) for (var c = b[i].paths, l = b[i].ids, u = -1, D = -1, _ = [], E = 0; E < l.length; E += 4) if (!(l[E] < e)) {
            if (l[E] > r) break;
            if (D = l[E], _.push(c[E]), _.push(c[E + 1]), _.push(c[E + 2]), _.push(c[E + 3]), -1 != u && u != D) {
                var f;
                f = t ? PDB.tool.getColorByIndex(u, "main") : new THREE.Color("#CCC");
                var g = PDB.tool.getMainAtom(PDB.pdbId, u), v = "chain_" + g.chainname;
                PDB.drawer.drawArrowByPaths(v, _, f, [u]), _ = [], _.push(c[E]), _.push(c[E + 1]), _.push(c[E + 2]), _.push(c[E + 3])
            } else if (-1 != u && E == l.length - 4) {
                var f;
                f = t ? PDB.tool.getColorByIndex(u, "main") : new THREE.Color("#CCC");
                var g = PDB.tool.getMainAtom(PDB.pdbId, u), v = "chain_" + g.chainname;
                PDB.drawer.drawArrowByPaths(v, _, f, [u]), PDB.drawer.drawArrowByPaths(v, _, f, [u])
            }
            u = l[E]
        }
        var O = PDB.cartoonSheetArray.tail;
        for (var i in O) for (var c = O[i].paths, l = O[i].ids, u = -1, D = -1, _ = [], E = 0; E < l.length; E += 4) if (!(l[E] < e)) {
            if (l[E] > r) break;
            if (D = l[E], _.push(c[E]), _.push(c[E + 1]), _.push(c[E + 2]), _.push(c[E + 3]), -1 != u && u != D) {
                var f;
                f = t ? PDB.tool.getColorByIndex(u, "main") : new THREE.Color("#CCC");
                var g = PDB.tool.getMainAtom(PDB.pdbId, u), v = "chain_" + g.chainname;
                PDB.drawer.drawArrowByPaths(v, _, f, [u]), _ = [], _.push(c[E]), _.push(c[E + 1]), _.push(c[E + 2]), _.push(c[E + 3])
            } else if (-1 != u && E == l.length - 4) {
                var f;
                f = t ? PDB.tool.getColorByIndex(u, "main") : new THREE.Color("#CCC");
                var g = PDB.tool.getMainAtom(PDB.pdbId, u), v = "chain_" + g.chainname;
                PDB.drawer.drawArrowByPaths(v, _, f, [u])
            }
            u = l[E]
        }
    }, showDNABond: function (e, r, t) {
        var a = PDB.CONFIG.stick_sphere_w, o = new THREE.Color("#CCC"), n = w3m.mol[PDB.pdbId].residueData[e][r],
            i = n.dnaStick, s = PDB.CONFIG.tube_radius;
        if (i && 2 == i[0].length) {
            var l = PDB.tool.getMainAtom(PDB.pdbId, i[0][0].id);
            l.pos_centered = i[0][0].xyz;
            var c = PDB.tool.getMainAtom(PDB.pdbId, i[0][1].id);
            c.pos_centered = i[0][1].xyz;
            var d = PDB.tool.midPoint(i[0][0].xyz, i[0][1].xyz);
            PDB.drawer.drawStick("chain_" + l.chainname, i[0][0].xyz, d, t ? l.color : o, s, l), PDB.drawer.drawStick("chain_" + c.chainname, d, i[0][1].xyz, t ? c.color : o, s, c), PDB.drawer.drawSphere("chain_" + c.chainname, i[0][1].xyz, t ? c.color : o, s, c, void 0, a)
        }
    }, showRibbon_Arrow: function (e, r, t, a, o) {
        a = void 0 != a && a, o = void 0 == o || o;
        var n = w3m.mol[PDB.pdbId].residueData[e][r], i = n.arrow;
        if (0 != i.length) {
            var s = new THREE.Color("#CCC"), l = w3m.mol[PDB.pdbId].residueData[e][r - 1];
            void 0 != l && void 0 != l.arrow && l.arrow.length > 0 && (i = [l.arrow[l.arrow.length - 1]].concat(i), i = [l.arrow[l.arrow.length - 2]].concat(i), i = [l.arrow[l.arrow.length - 3]].concat(i), i = [l.arrow[l.arrow.length - 4]].concat(i));
            var c = PDB.tool.getMainAtom(PDB.pdbId, n.caid), d = "chain_" + c.chainname + (a ? "_low" : "");
            PDB.drawer.drawArrowByPaths(d, i, t ? c.color : s, [n.caid]), PDB.GROUP[d].children[PDB.GROUP[d].children.length - 1].visible = o
        }
    }, showCartoon_SSEByResdue: function (e, r, t, a, o) {
        switch (w3m.mol[PDB.pdbId].residueData[e][r].sse) {
            case w3m.HELIX_HEAD:
                this.showTubeByResdueHEAD(e, r, t, a, o), this.showRibbon_EllipseByResdueFOOT(e, r, t, a, o);
                break;
            case w3m.HELIX_BODY:
                this.showRibbon_EllipseByResdue(e, r, t, a, o);
                break;
            case w3m.HELIX_FOOT:
                this.showRibbon_EllipseByResdueHEAD(e, r, t, a, o), this.showTubeByResdueFOOT(e, r, t, a, o);
                break;
            case w3m.SHEET_HEAD:
                this.showTubeByResdueHEAD(e, r, t, a, o), this.showRibbon_Arrow(e, r, t, a, o);
                break;
            case w3m.SHEET_BODY:
                this.showRibbon_Arrow(e, r, t, a, o);
                break;
            case w3m.SHEET_FOOT:
                this.showRibbon_Arrow(e, r, t, a, o), this.showTubeByResdueFOOT(e, r, t, a, o);
                break;
            case w3m.LOOP_HEAD:
            case w3m.LOOP_BODY:
            case w3m.LOOP_FOOT:
                this.showTubeByResdue(e, r, t, a, o)
        }
    }, showSurface0: function () {
        var e = PDB.tool.MaxEdge(), r = PDB.GeoCenterOffset, t = r.x + limit.x[0], a = r.y + limit.y[0],
            o = r.z + limit.z[0], n = new THREE.MeshPhongMaterial({color: 0, specular: 8947848, shininess: 250}),
            i = new THREE.MarchingCubes(100, n, !0, !0);
        i.position.set(0, 0, 0), i.scale.set(30, 30, 30), i.isolation = 500, i.enableUvs = !1, i.enableColors = !1, i.material.color.setHSL(.9, .8, .9);
        var s, l, c, d, m, P;
        for (var s in w3m.mol) {
            var u = w3m.mol[s].atom.main;
            numblobs = u.length, m = 12, P = 1.2 / ((Math.sqrt(numblobs) - 1) / 4 + 1);
            for (var D in u) {
                var _ = PDB.tool.getMainAtom(s, D), h = _.pos_centered, l = (h.x - t) / e, c = (h.y - a) / e,
                    d = (h.z - o) / e;
                l = .85 * l + .1, c = .85 * c + .1, d = .85 * d + .1, i.addBall(l, c, d, P, m)
            }
        }
        PDB.GROUP[PDB.GROUP_MAIN].add(i), PDB.GROUP[PDB.GROUP_HET].visible = !1
    }, showSurface1: function () {
        var e = (PDB.tool.MaxEdge(), PDB.GeoCenterOffset), r = e.x + limit.x[0], t = e.y + limit.y[0],
            a = e.z + limit.z[0], o = e.x + limit.x[1], n = e.y + limit.y[1], i = e.z + limit.z[1],
            s = (new THREE.MeshPhongMaterial({color: 0, specular: 8947848, shininess: 250}), {});
        for (var l in w3m.mol) {
            var c = w3m.mol[l].atom.main;
            numblobs = c.length, subtract = 12, strength = 1.2 / ((Math.sqrt(numblobs) - 1) / 4 + 1);
            for (var d in c) {
                var m = PDB.tool.getMainAtom(l, d), P = m.pos_centered, u = {
                    coord: P,
                    name: m.name,
                    serial: m.id,
                    elem: m.type,
                    resn: m.resname,
                    resi: m.resid,
                    color: m.color
                };
                s[m.id] = u
            }
        }
        console.log(s.length);
        var D = ProteinSurface({min: {x: r, y: t, z: a}, max: {x: o, y: n, z: i}, atoms: s, type: PDB.SURFACE_TYPE}),
            _ = D.verts, h = D.faces, B = new THREE.Geometry;
        B.vertices = _.map(function (e) {
            var r = new THREE.Vector3(e.x, e.y, e.z);
            return r.atomid = e.atomid, r
        }), B.faces = h.map(function (e) {
            return new THREE.Face3(e.a, e.b, e.c)
        }), B.computeFaceNormals(), B.computeVertexNormals(!1);
        var p = B.clone();
        p.faces.forEach(function (e) {
            e.vertexColors = ["a", "b", "c"].map(function (r) {
                return s[B.vertices[e[r]].atomid].color
            })
        });
        var E = new THREE.Mesh(p, new THREE.MeshLambertMaterial({
            vertexColors: THREE.VertexColors,
            wireframe: PDB.SURFACE_WIREFRAME,
            opacity: PDB.SURFACE_OPACITY,
            transparent: !0
        }));
        PDB.GROUP[PDB.GROUP_SURFACE].add(E)
    }, showSurface: function (e, r, t) {
        e = PDB.tool.getValue(e, 1), r = PDB.tool.getValue(r, w3m.mol[PDB.pdbId].atom.main.length), t = PDB.tool.getValue(t, !0);
        var a = (PDB.tool.MaxEdge(), PDB.GeoCenterOffset), o = a.x + limit.x[0], n = a.y + limit.y[0],
            i = a.z + limit.z[0], s = a.x + limit.x[1], l = a.y + limit.y[1], c = a.z + limit.z[1], d = {};
        for (var m in w3m.mol) {
            var P = w3m.mol[m].atom.main;
            numblobs = P.length, subtract = 12, strength = 1.2 / ((Math.sqrt(numblobs) - 1) / 4 + 1);
            for (var u in P) {
                var D = parseInt(u);
                if (!(D < e)) {
                    if (D > r) break;
                    var _, h = PDB.tool.getMainAtom(m, u), B = h.pos_centered;
                    _ = t ? h.color : new THREE.Color("#CCC");
                    var p = {
                        coord: B,
                        name: h.name,
                        serial: h.id,
                        elem: h.type,
                        resn: h.resname,
                        resi: h.resid,
                        color: _
                    };
                    d[h.id] = p
                }
            }
        }
        var E = ProteinSurface({min: {x: o, y: n, z: i}, max: {x: s, y: l, z: c}, atoms: d, type: PDB.SURFACE_TYPE}),
            f = E.verts, w = E.faces, g = new THREE.Geometry;
        g.vertices = f.map(function (e) {
            var r = new THREE.Vector3(e.x, e.y, e.z);
            return r.atomid = e.atomid, r
        }), g.faces = w.map(function (e) {
            return new THREE.Face3(e.a, e.b, e.c)
        }), g.computeFaceNormals(), g.computeVertexNormals(!1);
        var v = g.clone();
        v.faces.forEach(function (e) {
            e.vertexColors = ["a", "b", "c"].map(function (r) {
                return d[g.vertices[e[r]].atomid].color
            })
        });
        var R = new THREE.Mesh(v, new THREE.MeshPhongMaterial({
            vertexColors: THREE.VertexColors,
            wireframe: PDB.SURFACE_WIREFRAME,
            opacity: PDB.SURFACE_OPACITY,
            transparent: !0,
            specular: 8947848,
            shininess: 250
        }));
        PDB.GROUP[PDB.GROUP_SURFACE].add(R), PDB.GROUP[PDB.GROUP_SURFACE].visible = !0
    }, showSurfaceByResdue: function (e, r, t) {
        var a = w3m.mol[PDB.pdbId].residueData[e][r];
        isSelected = PDB.tool.getValue(t, !0);
        var o = (PDB.tool.MaxEdge(), PDB.GeoCenterOffset), n = o.x + limit.x[0], i = o.y + limit.y[0],
            s = o.z + limit.z[0], l = o.x + limit.x[1], c = o.y + limit.y[1], d = o.z + limit.z[1],
            m = (new THREE.MeshPhongMaterial({color: 0, specular: 8947848, shininess: 250}), {});
        for (var P in w3m.mol) {
            var u = w3m.mol[P].atom.main;
            numblobs = u.length, subtract = 12, strength = 1.2 / ((Math.sqrt(numblobs) - 1) / 4 + 1);
            for (var D = a.faid; D <= a.laid; D++) {
                var _, h = (parseInt(D), PDB.tool.getMainAtom(P, D)), B = h.pos_centered;
                _ = isSelected ? h.color : new THREE.Color("#CCC");
                var p = {coord: B, name: h.name, serial: h.id, elem: h.type, resn: h.resname, resi: h.resid, color: _};
                m[h.id] = p
            }
        }
        console.log(Object.keys(m).length);
        var E = ProteinSurface({min: {x: n, y: i, z: s}, max: {x: l, y: c, z: d}, atoms: m, type: PDB.SURFACE_TYPE}),
            f = E.verts, w = E.faces, g = new THREE.Geometry;
        g.vertices = f.map(function (e) {
            var r = new THREE.Vector3(e.x, e.y, e.z);
            return r.atomid = e.atomid, r
        }), g.faces = w.map(function (e) {
            return new THREE.Face3(e.a, e.b, e.c)
        }), g.computeFaceNormals(), g.computeVertexNormals(!1);
        var v = g.clone();
        v.faces.forEach(function (e) {
            e.vertexColors = ["a", "b", "c"].map(function (r) {
                return m[g.vertices[e[r]].atomid].color
            })
        });
        var R = new THREE.Mesh(v, new THREE.MeshLambertMaterial({
            vertexColors: THREE.VertexColors,
            wireframe: PDB.SURFACE_WIREFRAME,
            opacity: PDB.SURFACE_OPACITY,
            transparent: !0
        }));
        PDB.GROUP[PDB.GROUP_SURFACE].add(R), PDB.GROUP[PDB.GROUP_SURFACE].visible = !0
    }, showWater: function () {
        var e = PDB.CONFIG.water_sphere_w;
        if (!PDB.isShowWater || void 0 !== PDB.GROUP[PDB.GROUP_WATER] && 0 != PDB.GROUP[PDB.GROUP_WATER].children.length) PDB.isShowWater || PDB.render.clearGroupIndex(PDB.GROUP_WATER); else {
            for (var r in w3m.mol) {
                var t = w3m.mol[r].single;
                for (var a in t) {
                    var o = PDB.tool.getHetAtom(r, a);
                    "hoh" === o.resname && PDB.drawer.drawSphere(PDB.GROUP_WATER, o.pos_centered, o.color, .1 * o.radius, o, void 0, e)
                }
            }
        }
    }, showRes_Line: function (e) {
        var r = PDB.GROUP_ONE_RES, t = w3m.mol[e].residueData.a[1];
        atomIdArray = t.lines;
        for (var a = 0; a < atomIdArray.length; a++) {
            var o = PDB.tool.getMainAtom(e, atomIdArray[a][0]), n = PDB.tool.getMainAtom(e, atomIdArray[a][1]),
                i = PDB.tool.midPoint(o.pos_centered, n.pos_centered);
            PDB.drawer.drawOneResLine(r, t.caid, o.pos_centered, i, o.color, o), PDB.drawer.drawOneResLine(r, t.caid, i, n.pos_centered, n.color, n)
        }
    }, showHet_Line: function (e, r) {
        this.showWater();
        var t = PDB.GROUP_HET;
        w3m.mol[e].drug && (t = PDB.GROUP_DRUG), r && 1 == r && (t = PDB.GROUP_DOCKING);
        for (var a in w3m.mol[e].connect) for (j in w3m.mol[e].connect[a]) {
            var o = PDB.tool.getHetAtom(e, a);
            void 0 == o && (o = PDB.tool.getMainAtom(e, a));
            var n = PDB.tool.getHetAtom(e, w3m.mol[e].connect[a][j]);
            void 0 == n && (n = PDB.tool.getMainAtom(e, a));
            var i = PDB.tool.midPoint(o.pos_centered, n.pos_centered);
            PDB.drawer.drawLine(t, o.pos_centered, i, o.color), PDB.drawer.drawLine(t, i, n.pos_centered, n.color)
        }
    }, showHet_Sphere: function (e, r) {
        var t = PDB.CONFIG.stick_sphere_w;
        this.showWater();
        PDB.GROUP_HET;
        w3m.mol[e].drug && PDB.GROUP_DRUG, r && 1 == r && PDB.GROUP_DOCKING;
        var a = w3m.mol[e].atom.het;
        for (var o in a) {
            var n = PDB.tool.getHetAtom(e, o);
            void 0 == n && (n = PDB.tool.getMainAtom(e, o)), n.caid = n.id, "hoh" !== n.resname && PDB.drawer.drawSphere(PDB.GROUP_HET, n.pos_centered, n.color, .9 * n.radius, n, void 0, t)
        }
    }, showHet_Stick: function (e, r) {
        var t = PDB.CONFIG.stick_sphere_w;
        this.showWater();
        var a = {}, o = PDB.GROUP_HET;
        w3m.mol[e].drug && (o = PDB.GROUP_DRUG), r && 1 == r && (o = PDB.GROUP_DOCKING);
        for (var n in w3m.mol[e].connect) for (j in w3m.mol[e].connect[n]) {
            var i = PDB.tool.getHetAtom(e, n);
            void 0 == i && (i = PDB.tool.getMainAtom(e, n));
            var s = PDB.tool.getHetAtom(e, w3m.mol[e].connect[n][j]);
            void 0 == s && (s = PDB.tool.getMainAtom(e, n)), s.caid = s.id, void 0 == a[i.id] && (PDB.drawer.drawSphere(o, i.pos_centered, i.color, .201, i, void 0, t), a[i.id] = 1), void 0 == a[s.id] && (PDB.drawer.drawSphere(o, s.pos_centered, s.color, .201, s, void 0, t), a[s.id] = 1);
            var l = PDB.tool.midPoint(i.pos_centered, s.pos_centered);
            PDB.drawer.drawStick(o, i.pos_centered, l, i.color, .2, i), PDB.drawer.drawStick(o, l, s.pos_centered, s.color, .2, s)
        }
    }, showRes_Sphere: function (e) {
        PDB.CONFIG = PDB.CONFIG_HIGH;
        var r = PDB.CONFIG.stick_sphere_w, t = PDB.GROUP_ONE_RES, a = w3m.mol[e].atom.main;
        for (var o in a) {
            var n = PDB.tool.getHetAtom(e, o);
            void 0 == n && (n = PDB.tool.getMainAtom(e, o)), n.caid = n.id, "hoh" !== n.resname && PDB.drawer.drawSphere(t, n.pos_centered, n.color, .9 * n.radius, n, void 0, r)
        }
    }, showRes_Stick: function (e) {
        var r = PDB.CONFIG.stick_sphere_w, t = w3m.mol[e].residueData.a[1], a = t.lines, o = {}, n = PDB.GROUP_ONE_RES;
        for (var i in a) {
            var s = a[i], l = PDB.tool.getMainAtom(e, s[0]), c = PDB.tool.getMainAtom(e, s[1]);
            l.caid = t.caid, c.caid = t.caid, void 0 === o[l.id] && (PDB.drawer.drawSphere(n, l.pos_centered, l.color, .2, l, void 0, r), o[l.id] = 1), void 0 === o[c.id] && (PDB.drawer.drawSphere(n, c.pos_centered, c.color, .2, c, void 0, r), o[c.id] = 1);
            var d = PDB.tool.midPoint(l.pos_centered, c.pos_centered);
            PDB.drawer.drawStick(n, l.pos_centered, d, l.color, .2, l), PDB.drawer.drawStick(n, d, c.pos_centered, c.color, .2, c)
        }
    }, showRes_Ball_Rod: function (e, r) {
        for (var t = PDB.CONFIG.stick_sphere_w, a = w3m.mol[e].residueData.a[1], o = a.lines, n = {}, i = PDB.GROUP_ONE_RES, s = 0; s < o.length; s++) {
            var l = o[s], c = PDB.tool.getMainAtom(e, l[0]), d = PDB.tool.getMainAtom(e, l[1]);
            c.caid || (c.caid = a.caid, d.caid = a.caid), void 0 == n[c.id] && (PDB.drawer.drawSphere(i, c.pos_centered, c.color, .2 * c.radius, c, void 0, t), n[c.id] = 1), void 0 == n[d.id] && (PDB.drawer.drawSphere(i, d.pos_centered, d.color, .2 * d.radius, d, void 0, t), n[d.id] = 1);
            var m = PDB.tool.midPoint(c.pos_centered, d.pos_centered);
            PDB.drawer.drawStick(i, c.pos_centered, m, c.color, .1, c), PDB.drawer.drawStick(i, m, d.pos_centered, d.color, .1, d)
        }
    }, showHet_Ball_Rod: function (e, r) {
        var t = PDB.CONFIG.stick_sphere_w;
        this.showWater();
        var a = {}, o = PDB.GROUP_HET;
        w3m.mol[e].drug && (o = PDB.GROUP_DRUG), r && 1 == r && (o = PDB.GROUP_DOCKING);
        for (var n in w3m.mol[e].connect) for (j in w3m.mol[e].connect[n]) {
            var i = PDB.tool.getHetAtom(e, n);
            void 0 == i && (i = PDB.tool.getMainAtom(e, n));
            var s = PDB.tool.getHetAtom(e, w3m.mol[e].connect[n][j]);
            if (void 0 == s && (s = PDB.tool.getMainAtom(e, n)), s.caid = s.id, void 0 != i) {
                void 0 == a[i.id] ? (PDB.drawer.drawSphere(o, i.pos_centered, i.color, .2 * i.radius, i, void 0, t), a[i.id] = 1) : void 0 == a[s.id] && (PDB.drawer.drawSphere(o, s.pos_centered, s.color, .2 * s.radius, s, void 0, t), a[s.id] = 1);
                var l = PDB.tool.midPoint(i.pos_centered, s.pos_centered);
                PDB.drawer.drawStick(o, i.pos_centered, l, i.color, .1, i), PDB.drawer.drawStick(o, l, s.pos_centered, s.color, .1, s)
            }
        }
        for (var n in w3m.mol[e].connect) for (j in w3m.mol[e].connect[n]) {
            var s = PDB.tool.getHetAtom(e, w3m.mol[e].connect[n][j]);
            s.id && !a[s.id] && PDB.drawer.drawSphere(o, s.pos_centered, s.color, .2 * s.radius, s, void 0, t)
        }
    }, showLabel: function (e) {
        console.log("show label");
        switch (e) {
            case PDB.LABEL_ATOM_NAME:
                var r = w3m.mol[PDB.pdbId].atom.main;
                for (var t in r) {
                    var a = PDB.tool.getMainAtom(PDB.pdbId, t);
                    PDB.drawer.drawLabel(PDB.GROUP_LABEL, a.pos_centered, a.color, a.name)
                }
                var o = w3m.mol[PDB.pdbId].atom.het;
                for (var t in o) {
                    var a = PDB.tool.getMainAtom(PDB.pdbId, t);
                    PDB.drawer.drawLabel(PDB.GROUP_LABEL, a.pos_centered, a.color, a.name)
                }
                break;
            case PDB.LABEL_RESIDUE_NAME:
                var r = w3m.mol[PDB.pdbId].atom.main;
                for (var t in r) {
                    var a = PDB.tool.getMainAtom(PDB.pdbId, t);
                    "ca" == a.name && PDB.drawer.drawLabel(PDB.GROUP_LABEL, a.pos_centered, a.color, a.resname)
                }
                break;
            case PDB.LABEL_CHAIN_ID:
                var r = w3m.mol[PDB.pdbId].chain;
                for (var n in r) {
                    var i = w3m.mol[PDB.pdbId].tree.main[n][1].n, a = PDB.tool.getMainAtom(PDB.pdbId, i);
                    PDB.drawer.drawLabel(PDB.GROUP_LABEL, a.pos_centered, a.color, n.toUpperCase())
                }
        }
    }, showDistance: function (e, r) {
        var t = {
            x: e.pos_curr.x - PDB.rotateAxis.x,
            y: e.pos_curr.y - PDB.rotateAxis.y,
            z: e.pos_curr.z - PDB.rotateAxis.z
        };
        t = new THREE.Vector3(t.x, t.y, t.z);
        var a = new THREE.Vector3(1, 0, 0);
        t = PDB.tool.rotateAboutWorldAxis(t, a, -PDB.rotateAxisAngle.x), a = new THREE.Vector3(0, 1, 0), t = PDB.tool.rotateAboutWorldAxis(t, a, -PDB.rotateAxisAngle.y), a = new THREE.Vector3(0, 0, 1), t = PDB.tool.rotateAboutWorldAxis(t, a, -PDB.rotateAxisAngle.z);
        var o = {
            x: r.pos_curr.x - PDB.rotateAxis.x,
            y: r.pos_curr.y - PDB.rotateAxis.y,
            z: r.pos_curr.z - PDB.rotateAxis.z
        };
        o = new THREE.Vector3(o.x, o.y, o.z), a = new THREE.Vector3(1, 0, 0), o = PDB.tool.rotateAboutWorldAxis(o, a, -PDB.rotateAxisAngle.x), a = new THREE.Vector3(0, 1, 0), o = PDB.tool.rotateAboutWorldAxis(o, a, -PDB.rotateAxisAngle.y), a = new THREE.Vector3(0, 0, 1), o = PDB.tool.rotateAboutWorldAxis(o, a, -PDB.rotateAxisAngle.z);
        var n = e.pos_curr.distanceTo(r.pos_curr), i = Number(n).toFixed(2) + "A", s = new THREE.Color(.5, .5, .5);
        PDB.drawer.drawLine(PDB.GROUP_MAIN, t, o, s), PDB.drawer.drawTextForDistance(PDB.GROUP_MAIN, PDB.tool.midPoint(t, o), i, "", e.color, 180)
    }, showSegmentByStartEnd: function (e, r, t, a) {
        var o = !1, n = !1, i = "", s = PDB.CONFIG.tube_radius;
        switch (PDB.config.mainMode) {
            case PDB.CARTOON_SSE:
                i = "SSE";
                break;
            case PDB.LINE:
                i = "Line";
                break;
            case PDB.DOT:
                i = "Dot";
                break;
            case PDB.BALL_AND_ROD:
                i = "BallRod";
                break;
            case PDB.STICK:
                i = "Sticks";
                break;
            case PDB.SPHERE:
                i = "Sphere";
                break;
            case PDB.TUBE:
                i = "Tube", s = PDB.CONFIG.tube_radius;
                break;
            case PDB.RIBBON_FLAT:
                i = "Flat", s = 0;
                break;
            case PDB.RIBBON_ELLIPSE:
                i = "Ellipse", s = PDB.CONFIG.ellipse_radius;
                break;
            case PDB.RIBBON_RECTANGLE:
                i = "Rectangle", s = 0;
                break;
            case PDB.RIBBON_STRIP:
                i = "Strip", s = PDB.CONFIG.strip_radius;
                break;
            case PDB.RIBBON_RAILWAY:
                i = "Railway", s = PDB.CONFIG.railway_radius;
                break;
            default:
                i = "Tube"
        }
        var l = new THREE.Color("#CCC");
        for (var c in PDB.cubeData.path) {
            var d = PDB.cubeData.path[c], m = PDB.cubeData.ids[c], P = -1, u = -1, D = [], _ = [], h = [], B = [];
            for (var p in m) {
                if (u = m[p], D.push(d[p]), _.push(PDB.cubeData.binormals[c][p]), h.push(PDB.cubeData.normals[c][p]), B.push(PDB.cubeData.tangents[c][p]), (u != P || p == m.length - 1) && 0 != p) {
                    var E = PDB.tool.getMainAtom(PDB.pdbId, P), f = "chain_" + E.chainname,
                        w = {binormals: _, normals: h, tangents: B};
                    if (P >= e && P <= r) "Sphere" === t ? o || (PDB.painter.showSphereByStartEnd(e, r, !0), o = !0) : "Sticks" === t ? o || (PDB.painter.showSticksByStartEnd(e, r, !0), o = !0) : "BallRod" === t ? o || (PDB.painter.showBallRodByStartEnd(e, r, !0), o = !0) : "Line" === t ? o || (PDB.painter.showLineByStartEnd(e, r, !0), o = !0) : "Dot" === t ? o || (PDB.painter.showDotByStartEnd(e, r, !0), o = !0) : "Backbone" === t ? o || (PDB.painter.showBackboneByStartEnd(e, r, !0), o = !0) : "SSE" === t ? o || (PDB.painter.showCartoon_SSEByStartEnd(e, r, !0), o = !0) : (color = PDB.tool.getColorByIndex(P, "main"), PDB.drawer["draw" + t](f, D, color, a, w, D.length - 1, [P])); else if (color = l, "Sphere" === i) {
                        if (!n) {
                            PDB.painter.showSphereByStartEnd(1, e, !1);
                            var g = PDB.cubeData.ids[PDB.cubeData.ids.length - 1];
                            g = g[g.length - 1], PDB.painter.showSphereByStartEnd(r, g, !1), n = !0
                        }
                    } else if ("Sticks" === i) {
                        if (!n) {
                            PDB.painter.showSticksByStartEnd(1, e, !1);
                            var g = PDB.cubeData.ids[PDB.cubeData.ids.length - 1];
                            g = g[g.length - 1], PDB.painter.showSticksByStartEnd(r, g, !1), n = !0
                        }
                    } else if ("BallRod" === i) {
                        if (!n) {
                            PDB.painter.showBallRodByStartEnd(1, e, !1);
                            var g = PDB.cubeData.ids[PDB.cubeData.ids.length - 1];
                            g = g[g.length - 1], PDB.painter.showBallRodByStartEnd(r, g, !1), n = !0
                        }
                    } else if ("Line" === i) {
                        if (!n) {
                            PDB.painter.showLineByStartEnd(1, e, !1);
                            var g = PDB.cubeData.ids[PDB.cubeData.ids.length - 1];
                            g = g[g.length - 1], PDB.painter.showLineByStartEnd(r, g, !1), n = !0
                        }
                    } else if ("Dot" === i) {
                        if (!n) {
                            PDB.painter.showDotByStartEnd(1, e, !1);
                            var g = PDB.cubeData.ids[PDB.cubeData.ids.length - 1];
                            g = g[g.length - 1], PDB.painter.showDotByStartEnd(r, g, !1), n = !0
                        }
                    } else if ("Backbone" === i) {
                        if (!n) {
                            PDB.painter.showBackboneByStartEnd(1, e, !1);
                            var g = PDB.cubeData.ids[PDB.cubeData.ids.length - 1];
                            g = g[g.length - 1], PDB.painter.showBackboneByStartEnd(r, g, !1), n = !0
                        }
                    } else if ("SSE" === i) {
                        if (!n) {
                            PDB.painter.showCartoon_SSEByStartEnd(1, e, !1);
                            var g = PDB.cubeData.ids[PDB.cubeData.ids.length - 1];
                            g = g[g.length - 1], PDB.painter.showCartoon_SSEByStartEnd(r, g, !1), n = !0
                        }
                    } else PDB.drawer["draw" + i](f, D, color, s, w, D.length - 1, [P]);
                    D = [], _ = [], h = [], B = [], ("Tube" == i && (P < e || P > r) || "Tube" == t && P >= e && P <= r) && (D.push(d[p - 1]), _.push(PDB.cubeData.binormals[c][p - 1]), h.push(PDB.cubeData.normals[c][p - 1]), B.push(PDB.cubeData.tangents[c][p - 1])), D.push(d[p]), _.push(PDB.cubeData.binormals[c][p]), h.push(PDB.cubeData.normals[c][p]), B.push(PDB.cubeData.tangents[c][p])
                }
                P = m[p]
            }
        }
    }, showMapSolid: function (e, r) {
        for (var t = chroma.scale(["green", "red"]), a = 0; a < e.header.NS; a += PDB.map_step) for (var o = 0; o < e.header.NR; o += PDB.map_step) for (var n = 0; n < e.header.NC; n += PDB.map_step) {
            var i = e.data[a][o][n];
            if (i > r) {
                var s = new THREE.Vector3(e.center.x + a, e.center.y + o, e.center.z + n),
                    l = (i - r) / (1 * (e.header.max - r)), c = t(l).hex();
                PDB.drawer.drawDot(PDB.GROUP_MAP, s, c)
            }
        }
        var d = new THREE.Vector3(e.header.a / e.header.NC, e.header.b / e.header.NR, e.header.c / e.header.NS);
        PDB.GROUP[PDB.GROUP_MAP].scale.set(d.x, d.y, d.z)
    }, showMapSolid00000: function (e, r) {
        console.log("map: " + new Date + " Prepare color and position! threshold:" + r);
        var t = (chroma.scale(["green", "red"]), new Float32Array(e.header.NC * e.header.NR * e.header.NS * 3)),
            a = new Float32Array(e.header.NC * e.header.NR * e.header.NS * 3),
            o = new Float32Array(e.header.NC * e.header.NR * e.header.NS), n = new THREE.Color;
        n = new THREE.Color("#567856");
        for (var i = new THREE.Color("#ffffff"), s = 0; s < e.header.NC; s++) for (var l = 0; l < e.header.NR; l++) for (var c = 0; c < e.header.NS; c++) {
            var d = e.data[s][l][c], m = s * e.header.NS * e.header.NR + l * e.header.NS + c, P = 3 * m;
            t[P] = e.center.x + s, t[P + 1] = e.center.y + l, t[P + 2] = e.center.z + c, o[m] = 1, d < r && (n = i, o[m] = 0), a[P] = n.r, a[P + 1] = n.g, a[P + 2] = n.b
        }
        console.log("map: " + new Date + "  position, color is ready!"), PDB.drawer.drawMapPoints(PDB.GROUP_MAP, t, a, o)
    }, showMapSolid00: function (e, r) {
        var t = new Date;
        console.log("MapSolid: " + t + " Prepare color and position! threshold:" + r);
        for (var a = (chroma.scale(["green", "red"]), new Float32Array(e.header.NC * e.header.NR * e.header.NS * 3)), o = new Float32Array(e.header.NC * e.header.NR * e.header.NS * 3), n = new Float32Array(e.header.NC * e.header.NR * e.header.NS), i = [], s = 1e3; s < 1100; s++) {
            var l = new THREE.Color(w3m.rgb[s][0], w3m.rgb[s][1], w3m.rgb[s][2]);
            i.push(l)
        }
        for (var l = new THREE.Color("#FFFFFF"), c = e.header.max - e.header.min, s = 0; s < e.header.NS; s += PDB.map_step) for (var d = 0; d < e.header.NR; d += PDB.map_step) for (var m = 0; m < e.header.NC; m += PDB.map_step) {
            var P = e.data[s][d][m], u = s * e.header.NC * e.header.NR + d * e.header.NC + m, D = 3 * u;
            a[D] = e.center.x + s, a[D + 1] = e.center.y + d, a[D + 2] = e.center.z + m, n[u] = 1, P <= r && (n[u] = 0);
            var _ = Math.floor((P - e.header.min) / (1 * c) * 99);
            l = i[_], o[D] = l.r, o[D + 1] = l.g, o[D + 2] = l.b
        }
        var h = new Date;
        console.log("MapSolid: " + h + "  position, color is ready!"), PDB.drawer.drawMapPoints(PDB.GROUP_MAP, a, o, n, Number(e.header.NS)), console.log("MapSolid time(ms):" + (new Date - t))
    }, showMapSolid2: function (e, r) {
        console.log("map: " + new Date + " Prepare color and position! threshold:" + r);
        var t = (chroma.scale(["green", "red"]), new Float32Array(e.header.NC * e.header.NR * e.header.NS * 3)),
            a = new Float32Array(e.header.NC * e.header.NR * e.header.NS * 3),
            o = new Float32Array(e.header.NC * e.header.NR * e.header.NS), n = new THREE.Color;
        n = new THREE.Color("#ffffff");
        for (var i = 0; i < e.mapdata.length; i++) {
            var s = (e.mapdata[i], 3 * i);
            t[s] = e.center.x + i, t[s + 1] = e.center.y + i, t[s + 2] = e.center.z + i, n = new THREE.Color(rgb), a[s] = n.r, a[s + 1] = n.g, a[s + 2] = n.b
        }
        console.log("map: " + new Date + "  position, color is ready!"), PDB.drawer.drawMapPoints(PDB.GROUP_MAP, t, a, o)
    }, showMapSolid3: function (e, r) {
        var t = new THREE.ParticleBasicMaterial;
        t.map = THREE.ImageUtils.loadTexture(SERVERURL + "/assets/textures/particles/particle.png"), t.blending = THREE.AdditiveBlending, t.transparent = !0, t.size = 8, t.vertexColors = !0;
        var a = new THREE.Geometry, o = new THREE.ParticleSystem(a, t);
        o.name = "ps", PDB.GROUP[PDB.GROUP_MAIN].add(o), console.log("map: " + new Date + " Prepare color and position! threshold:" + r);
        for (var n = chroma.scale(["blue", "green", "red"]), i = [], s = 1e3; s < 1100; s++) {
            var l = new THREE.Color(n(.01 * (s - 1e3)).hex());
            i.push(l)
        }
        for (var l = new THREE.Color("#FFFFFF"), c = e.header.max - e.header.min, s = 0; s < e.header.NC; s++) for (var d = 0; d < e.header.NR; d++) for (var m = 0; m < e.header.NS; m++) {
            var P = e.data[s][d][m];
            if (!(P < r)) {
                var u = Math.floor((P - e.header.min) / (1 * c) * 99);
                l = i[u];
                var D = (e.header.NS, e.header.NR, e.header.NS, new THREE.Vector3(e.center.x + s, e.center.y + d, e.center.z + m));
                a.vertices.push(D), a.colors.push(l)
            }
        }
        console.log("map: " + new Date + "  position, color is ready!"), PDB.drawer.drawMapPoints(PDB.GROUP_MAP, positions, colors, alphas, Number(e.header.NS))
    }, showMapSurface: function (e, r, t) {
        for (var a = new Date, o = new THREE.Vector3(e.header.a / e.header.NC, e.header.b / e.header.NR, e.header.c / e.header.NS), n = PDB.tool.getValue(t, !1), i = (PDB.GeoCenterOffset, e.center.x), s = e.center.y, l = e.center.z, c = e.center.x + e.header.NC, d = e.center.y + e.header.NR, m = e.center.z + e.header.NS, P = (new THREE.MeshPhongMaterial({
            color: 0,
            specular: 8947848,
            shininess: 250
        }), {}), u = new THREE.Color("#3366cc"), D = 0, _ = e.header.max - e.header.min, h = 0; h < e.header.NS; h += PDB.map_step) for (var B = 0; B < e.header.NR; B += PDB.map_step) for (var p = 0; p < e.header.NC; p += PDB.map_step) {
            var E = h * e.header.NC * e.header.NR + B * e.header.NC + p, f = e.data[h][B][p];
            if (!(f < r)) {
                D += 1;
                var w = (Math.floor((f - e.header.min) / (1 * _) * 99), new THREE.Vector3(e.center.x + h, e.center.y + B, e.center.z + p)),
                    g = w, v = {coord: g, name: "c", serial: E, elem: "c", resn: "ala", resi: 1, color: u};
                P[E] = v
            }
        }
        subtract = 12, strength = 1.2 / ((Math.sqrt(D) - 1) / 4 + 1);
        var R = ProteinSurface({min: {x: i, y: s, z: l}, max: {x: c, y: d, z: m}, atoms: P, type: PDB.SURFACE_TYPE}),
            b = R.verts, O = R.faces, T = new THREE.Geometry;
        T.vertices = b.map(function (e) {
            var r = new THREE.Vector3(e.x, e.y, e.z);
            return r.atomid = e.atomid, r
        }), T.faces = O.map(function (e) {
            return new THREE.Face3(e.a, e.b, e.c)
        }), T.computeFaceNormals(), T.computeVertexNormals(!1);
        var M = T.clone();
        M.faces.forEach(function (e) {
            e.vertexColors = ["a", "b", "c"].map(function (r) {
                return P[T.vertices[e[r]].atomid].color
            })
        });
        var I = new THREE.Mesh(M, new THREE.MeshLambertMaterial({
            vertexColors: THREE.VertexColors,
            wireframe: n,
            opacity: PDB.SURFACE_OPACITY,
            transparent: !0
        }));
        I.scale.set(o.x, o.y, o.z), PDB.GROUP[PDB.GROUP_MAP].add(I), PDB.GROUP[PDB.GROUP_MAP].visible = !0, PDB.GROUP[PDB.GROUP_MAP].scale.set(o.x, o.y, o.z), console.log("time(ms):" + (new Date - a))
    }, showMapSurface1: function (e, r, t) {
        for (var a = new THREE.Vector3(e.header.c / e.header.NS, e.header.b / e.header.NR, e.header.a / e.header.NC), o = PDB.tool.getValue(t, !1), n = (PDB.GeoCenterOffset, e.center.x), i = e.center.y, s = e.center.z, l = e.center.x + e.header.NS, c = e.center.y + e.header.NR, d = e.center.z + e.header.NC, m = (new THREE.MeshPhongMaterial({
            color: 0,
            specular: 8947848,
            shininess: 250
        }), {}), P = 0, u = chroma.scale(["green", "red"]), D = [], _ = 1e3; _ < 1100; _++) {
            var h = new THREE.Color(u(.01 * (_ - 1e3)).hex());
            D.push(h)
        }
        for (var B = e.header.max - e.header.min, _ = 0; _ < e.header.NC; _++) for (var p = 0; p < e.header.NR; p++) for (var E = 0; E < e.header.NS; E++) {
            var f = _ * e.header.NS * e.header.NR + p * e.header.NS + E, w = e.data[_][p][E];
            if (!(w < r)) {
                P += 1;
                var g = Math.floor((w - e.header.min) / (1 * B) * 99);
                h = D[g];
                var v = new THREE.Vector3(e.center.x + _, e.center.y + p, e.center.z + E), R = v, h = D[g],
                    b = {coord: R, name: "c", serial: f, elem: "c", resn: "ala", resi: 1, color: h};
                m[f] = b
            }
        }
        subtract = 12, strength = 1.2 / ((Math.sqrt(P) - 1) / 4 + 1);
        var O = ProteinSurface({min: {x: n, y: i, z: s}, max: {x: l, y: c, z: d}, atoms: m, type: PDB.SURFACE_TYPE}),
            T = O.verts, M = O.faces, I = new THREE.Geometry;
        I.vertices = T.map(function (e) {
            var r = new THREE.Vector3(e.x, e.y, e.z);
            return r.atomid = e.atomid, r
        }), I.faces = M.map(function (e) {
            return new THREE.Face3(e.a, e.b, e.c)
        }), I.computeFaceNormals(), I.computeVertexNormals(!1);
        var A = I.clone();
        A.faces.forEach(function (e) {
            e.vertexColors = ["a", "b", "c"].map(function (r) {
                return m[I.vertices[e[r]].atomid].color
            })
        });
        var y = new THREE.Mesh(A, new THREE.MeshLambertMaterial({
            vertexColors: THREE.VertexColors,
            wireframe: o,
            opacity: PDB.SURFACE_OPACITY,
            transparent: !0
        }));
        y.scale.set(a.x, a.y, a.z), PDB.GROUP[PDB.GROUP_MAP].add(y), PDB.GROUP[PDB.GROUP_MAP].visible = !0
    }, showMapSlices: function (e, r, t, a) {
        var o = new Date;
        chroma.scale(["green", "red"]);
        switch (a) {
            case PDB.DIMENSION_X:
                var n = t;
                PDB.drawer.drawPlane(PDB.GROUP_SLICE, e.header.NR, e.header.NS, "", PDB.DIMENSION_X, n, e);
                break;
            case PDB.DIMENSION_Y:
                var n = t;
                PDB.drawer.drawPlane(PDB.GROUP_SLICE, e.header.NC, e.header.NS, "", PDB.DIMENSION_Y, n, e);
                break;
            case PDB.DIMENSION_Z:
                var n = t;
                PDB.drawer.drawPlane(PDB.GROUP_SLICE, e.header.NC, e.header.NR, "", PDB.DIMENSION_Z, n, e)
        }
        console.log("time(ms):" + (new Date - o))
    }, showResidue: function (e, r, t, a, o, n) {
        switch (t) {
            case PDB.LINE:
                PDB.painter.showLineByResdue(e, r, a, o, n);
                break;
            case PDB.DOT:
                PDB.painter.showDotByResdue(e, r, a, o, n);
                break;
            case PDB.BACKBONE:
                PDB.painter.showBackboneByResdue(e, r, a, o, n);
                break;
            case PDB.SPHERE:
                PDB.painter.showSphereByResdue(e, r, a, o, n);
                break;
            case PDB.STICK:
                PDB.painter.showSticksByResdue(e, r, a, o, n);
                break;
            case PDB.BALL_AND_ROD:
                PDB.painter.showBallRodByResdue(e, r, a, o, n);
                break;
            case PDB.TUBE:
                PDB.painter.showTubeByResdue(e, r, a, o, n);
                break;
            case PDB.RIBBON_FLAT:
                PDB.painter.showRibbon_FlatByResdue(e, r, a, o, n);
                break;
            case PDB.RIBBON_ELLIPSE:
                PDB.painter.showRibbon_EllipseByResdue(e, r, a, o, n);
                break;
            case PDB.RIBBON_RECTANGLE:
                PDB.painter.showRibbon_RectangleByResdue(e, r, a, o, n);
                break;
            case PDB.RIBBON_STRIP:
                PDB.painter.showRibbon_StripByResdue(e, r, a, o, n);
                break;
            case PDB.RIBBON_RAILWAY:
                PDB.painter.showRibbon_RailwayByResdue(e, r, a, o, n);
                break;
            case PDB.CARTOON_SSE:
                PDB.painter.showCartoon_SSEByResdue(e, r, a, o, n);
                break;
            default:
                PDB.painter.showTubeByResdue(e, r, a, o, n)
        }
    }, showBond: function (e) {
        var r = w3m.mol[PDB.pdbId].atom.main;
        for (var t in r) {
            var a = PDB.tool.getMainAtom(PDB.pdbId, t);
            for (var o in r) if (t < o) {
                var n = PDB.tool.getMainAtom(PDB.pdbId, o), i = PDB.tool.isBonded(a, n);
                if (e === i) switch (i) {
                    case PDB.BOND_TYPE_COVALENT:
                        var s = new THREE.Color("#567812");
                        PDB.drawer.drawLine(PDB.GROUP_BOND, a.pos_centered, n.pos_centered, s);
                        break;
                    case PDB.BOND_TYPE_HBOND:
                        var s = new THREE.Color("#567092");
                        n.chainname;
                        PDB.drawer.drawLine(PDB.GROUP_BOND, a.pos_centered, n.pos_centered, s);
                        break;
                    case PDB.BOND_TYPE_SSBOND:
                        var s = new THREE.Color("#810902");
                        n.chainname;
                        PDB.drawer.drawLine(PDB.GROUP_BOND, a.pos_centered, n.pos_centered, s)
                }
            }
        }
    }, showAllResiduesBySelect: function () {
        var e = w3m.mol[PDB.pdbId].residueData;
        for (var r in e) {
            if (w3m.mol[PDB.pdbId].chain[r] == w3m.CHAIN_NA && type >= PDB.TUBE && type != PDB.HIDE) for (var t in e[r]) PDB.painter.showResidue(r, t, type, e[r][t].issel), PDB.painter.showDNABond(r, t, e[r][t].issel); else for (var t in e[r]) PDB.painter.showResidue(r, t, PDB.config.mainMode, e[r][t].issel)
        }
    }, showAllResidues0: function (e) {
        var r = PDB.mode == PDB.MODE_VR ? PDB.initVRShowThreshold : PDB.initDesktopShowThreshold;
        if (e === PDB.config.surfaceMode) PDB.painter.showSurface(1, w3m.mol[PDB.pdbId].atom.main.length, !0); else {
            var t = w3m.mol[PDB.pdbId].residueData, a = 0;
            PDB.tool.clearChainNameFlag();
            for (var o in t) {
                void 0 == PDB.residueGroupObject[o] && (PDB.residueGroupObject[o] = {});
                if (w3m.mol[PDB.pdbId].chain[o] == w3m.CHAIN_NA && e >= PDB.TUBE && e != PDB.HIDE) for (var n in t[o]) PDB.painter.showResidue(o, n, PDB.TUBE, !0), PDB.painter.showDNABond(o, n, !0); else if (++a <= PDB.initChainNumThreshold) {
                    PDB.tool.initChainNameFlag(o, !0, a);
                    for (var n in t[o]) {
                        var i = t[o][n].caid, s = PDB.tool.getMainAtom(PDB.pdbId, i).pos_centered, l = camera.position,
                            c = Math.sqrt(Math.pow(l.x - s.x, 2) + Math.pow(l.y - s.y, 2) + Math.pow(l.z - s.z, 2));
                        PDB.painter.showResidue(o, n, e, !0), c < r ? PDB.residueGroupObject[o][n] = PDB.residueGroup_show : (PDB.residueGroupObject[o][n] = PDB.residueGroup_hide, PDB.GROUP[groupindex].children[PDB.GROUP[groupindex].children.length - 1].visible = !1)
                    }
                } else {
                    PDB.tool.initChainNameFlag(o, !1, a);
                    for (var n in t[o]) {
                        var i = t[o][n].caid, s = PDB.tool.getMainAtom(PDB.pdbId, i).pos_centered, l = camera.position,
                            c = Math.sqrt(Math.pow(l.x - s.x, 2) + Math.pow(l.y - s.y, 2) + Math.pow(l.z - s.z, 2));
                        PDB.painter.showResidue(o, n, PDB.LINE, !0), c < r ? PDB.residueGroupObject[o][n] = PDB.residueGroup_show : (PDB.residueGroupObject[o][n] = PDB.residueGroup_hide, PDB.GROUP[groupindex].children[PDB.GROUP[groupindex].children.length - 1].visible = !1)
                    }
                }
            }
            PDB.tool.bindAllChainEvent(e, a)
        }
    }, showAllResidues: function (e) {
        var r = PDB.mode == PDB.MODE_VR ? PDB.initVRShowThreshold : PDB.initDesktopShowThreshold, t = camera.position;
        if (PDB.offset = t.clone(), e === PDB.config.surfaceMode) PDB.painter.showSurface(1, w3m.mol[PDB.pdbId].atom.main.length, !0); else {
            var a = w3m.mol[PDB.pdbId].residueData, o = 0;
            PDB.tool.clearChainNameFlag();
            for (var n in a) {
                void 0 == PDB.residueGroupObject[n] && (PDB.residueGroupObject[n] = {});
                if (w3m.mol[PDB.pdbId].chain[n] == w3m.CHAIN_NA && e >= PDB.TUBE && e != PDB.HIDE) for (var i in a[n]) PDB.painter.showResidue(n, i, PDB.TUBE, !0, !1, !0), PDB.painter.showDNABond(n, i, !0); else {
                    o++, PDB.tool.initChainNameFlag(n, !0, o);
                    for (var i in a[n]) {
                        var s, l = a[n][i].caid, c = PDB.tool.getMainAtom(PDB.pdbId, l).pos_centered;
                        PDB.residueGroupObject[n][i] || (PDB.residueGroupObject[n][i] = {
                            vector: {
                                x: c.x - t.x,
                                y: c.y - t.y,
                                z: c.z - t.z
                            }
                        }), s = PDB.tool.getVectorLength(PDB.residueGroupObject[n][i].vector), PDB.residueGroupObject[n][i].len = s, s < r ? PDB.loadType == PDB.bigmodel ? (PDB.CONFIG = PDB.CONFIG_HIGH, PDB.residueGroupObject[n][i].v = PDB.residueGroup_show, PDB.structureSizeLevel > 1 ? e != PDB.DOT && e != PDB.LINE && e != PDB.BALL_AND_ROD && e != PDB.STICK ? (PDB.painter.showResidue(n, i, e, !0, !1, !0), PDB.CONFIG = PDB.CONFIG_LOW, PDB.painter.showResidue(n, i, e, !0, !0, !1)) : e == PDB.BALL_AND_ROD || e == PDB.STICK ? PDB.structureSizeLevel >= 3 ? (PDB.CONFIG = PDB.CONFIG_LOW, PDB.painter.showResidue(n, i, e, !0, !0, !0)) : (PDB.CONFIG = PDB.CONFIG_HIGH, PDB.painter.showResidue(n, i, e, !0, !1, !0)) : e != PDB.DOT && e != PDB.LINE || PDB.painter.showResidue(n, i, e, !0, !1, !0) : (PDB.CONFIG = PDB.CONFIG_HIGH, PDB.painter.showResidue(n, i, e, !0, !1, !0))) : PDB.loadType == PDB.smallmodel && (PDB.CONFIG = PDB.CONFIG_HIGH, PDB.painter.showResidue(n, i, e, !0), PDB.residueGroupObject[n][i].v = PDB.residueGroup_show) : PDB.loadType == PDB.bigmodel ? (PDB.residueGroupObject[n][i].v = PDB.residueGroup_low, PDB.CONFIG = PDB.CONFIG_LOW,
                            PDB.structureSizeLevel > 1 ? e != PDB.DOT && e != PDB.LINE && e != PDB.BALL_AND_ROD && e != PDB.STICK ? (PDB.painter.showResidue(n, i, e, !0, !0, !0), PDB.CONFIG = PDB.CONFIG_HIGH, PDB.painter.showResidue(n, i, e, !0, !1, !1)) : e == PDB.BALL_AND_ROD || e == PDB.STICK ? PDB.structureSizeLevel >= 3 ? (PDB.CONFIG = PDB.CONFIG_LOW, PDB.painter.showResidue(n, i, e, !0, !0, !0)) : (PDB.CONFIG = PDB.CONFIG_HIGH, PDB.painter.showResidue(n, i, e, !0, !1, !0)) : e != PDB.DOT && e != PDB.LINE || PDB.painter.showResidue(n, i, e, !0, !1, !0) : (PDB.CONFIG = PDB.CONFIG_HIGH, PDB.painter.showResidue(n, i, e, !0, !1, !0))) : PDB.loadType == PDB.smallmodel && (PDB.residueGroupObject[n][i].v = PDB.residueGroup_undefined)
                    }
                }
            }
            PDB.tool.bindAllChainEvent(e, o)
        }
    }, showFragmentsResidues: function () {
        var e = w3m.mol[PDB.pdbId].residueData, r = PDB.fragmentList;
        for (var t in e) for (var a in e[t]) {
            var o = PDB.config.mainMode, n = !1;
            for (var i in r) t == r[i].start.chain && t == r[i].end.chain && a >= r[i].start.id && a <= r[i].end.id && (o = r[i].reptype, n = r[i].issel);
            if (o !== PDB.config.surfaceMode) {
                n = !0;
                var s = w3m.mol[PDB.pdbId].chain[t];
                s == w3m.CHAIN_NA && o >= PDB.TUBE && o != PDB.HIDE ? (PDB.painter.showDNABond(t, a, n), PDB.painter.showResidue(t, a, PDB.TUBE, n)) : PDB.painter.showResidue(t, a, o, n)
            }
        }
        for (var i in r) r[i].reptype === PDB.config.surfaceMode && PDB.painter.showSurface(r[i].start.faid, r[i].end.laid, !0)
    }, showResidueByThreeTravel: function () {
        var e = PDB.CONFIG.tube_radius, r = w3m.mol[PDB.pdbId].residueData, t = [], a = [];
        for (var o in r) for (var n in r[o]) {
            for (var i = new Array(r[o][n].path.length), s = 0; s < i.length; s++) i[s] = r[o][n].id;
            t = t.concat(r[o][n].path), a = a.concat(i)
        }
        PDB.drawer.drawTubeByTravel(t, a, e)
    }, showHet: function (e, r) {
        if (PDB.CONFIG = PDB.CONFIG_HIGH, r) this.showHet_Stick(e, r); else switch (PDB.config.hetMode) {
            case PDB.HET_LINE:
                this.showHet_Line(e, r);
                break;
            case PDB.HET_SPHERE:
                this.showHet_Sphere(e, r);
                break;
            case PDB.HET_STICK:
                this.showHet_Stick(e, r);
                break;
            case PDB.HET_BALL_ROD:
                this.showHet_Ball_Rod(e, r)
        }
    }, showOneRes: function (e, r) {
        switch (e) {
            case PDB.LINE:
                this.showRes_Line(r);
                break;
            case PDB.SPHERE:
                this.showRes_Sphere(r);
                break;
            case PDB.STICK:
                this.showRes_Stick(r);
                break;
            case PDB.BALL_AND_ROD:
                this.showRes_Ball_Rod(r)
        }
    }, showDrugSurface: function (e) {
        var r = PDB.GeoCenterOffset, t = r.x + limit.x[0], a = r.y + limit.y[0], o = r.z + limit.z[0],
            n = r.x + limit.x[1], i = r.y + limit.y[1], s = r.z + limit.z[1],
            l = (new THREE.MeshPhongMaterial({color: 0, specular: 8947848, shininess: 250}), {}), c = w3m.mol[e];
        if (void 0 != c) {
            var d = c.atom.het;
            numblobs = d.length, subtract = 12, strength = 1.2 / ((Math.sqrt(numblobs) - 1) / 4 + 1);
            for (var m in d) {
                var P = (parseInt(m), PDB.tool.getHetAtom(e, m)), u = P.pos_centered, D = P.color,
                    _ = {coord: u, name: P.name, serial: P.id, elem: P.type, resn: P.resname, resi: P.resid, color: D};
                l[P.id] = _
            }
            var h = ProteinSurface({
                min: {x: t, y: a, z: o},
                max: {x: n, y: i, z: s},
                atoms: l,
                type: PDB.SURFACE_TYPE
            }), B = h.verts, p = h.faces, E = new THREE.Geometry;
            E.vertices = B.map(function (e) {
                var r = new THREE.Vector3(e.x, e.y, e.z);
                return r.atomid = e.atomid, r
            }), E.faces = p.map(function (e) {
                return new THREE.Face3(e.a, e.b, e.c)
            }), E.computeFaceNormals(), E.computeVertexNormals(!1);
            var f = E.clone();
            f.faces.forEach(function (e) {
                e.vertexColors = ["a", "b", "c"].map(function (r) {
                    return l[E.vertices[e[r]].atomid].color
                })
            });
            var w = new THREE.Mesh(f, new THREE.MeshLambertMaterial({
                vertexColors: THREE.VertexColors,
                wireframe: PDB.SURFACE_WIREFRAME,
                opacity: PDB.SURFACE_OPACITY,
                transparent: !0
            }));
            PDB.GROUP[PDB.GROUP_SURFACE_HET].add(w);
            var g = PDB.GROUP[PDB.GROUP_DRUG].position;
            PDB.GROUP[PDB.GROUP_SURFACE_HET].position.copy(g), PDB.GROUP[PDB.GROUP_SURFACE_HET].visible = !0
        }
    }, repeatPainter0: function () {
        var e = w3m.mol[PDB.pdbId].residueData,
            r = PDB.mode == PDB.MODE_VR ? PDB.initVRShowThreshold : PDB.initDesktopShowThreshold,
            t = PDB.mode == PDB.MODE_VR ? camera.position : PDB.GeoCenterOffset, a = 0;
        for (var o in e) if (void 0 == PDB.residueGroupObject[o] && (PDB.residueGroupObject[o] = {}), ++a <= PDB.initChainNumThreshold) for (var n in e[o]) {
            var i = e[o][n].caid, s = PDB.tool.getMainAtom(PDB.pdbId, i).pos_centered,
                l = Math.sqrt(Math.pow(t.x - s.x, 2) + Math.pow(t.y - s.y, 2) + Math.pow(t.z - s.z, 2));
            if (l < r) {
                if (void 0 == PDB.residueGroupObject[o][n] || PDB.residueGroupObject[o][n] == PDB.residueGroup_undefined) PDB.painter.showResidue(o, n, PDB.config.mainMode, !0), PDB.residueGroupObject[o][n] = PDB.residueGroup_show; else if (PDB.residueGroupObject[o][n] == PDB.residueGroup_hide) {
                    var c = "chain_" + o;
                    for (var d in PDB.GROUP[c].children) if (e[o][n].caid == PDB.GROUP[c].children[d].name) {
                        PDB.GROUP[c].children[d].visible = !0, PDB.residueGroupObject[o][n] = PDB.residueGroup_show;
                        break
                    }
                }
            } else if (PDB.residueGroupObject[o][n] == PDB.residueGroup_show) {
                var c = "chain_" + o;
                for (var d in PDB.GROUP[c].children) if (e[o][n].caid == PDB.GROUP[c].children[d].name) {
                    PDB.GROUP[c].children[d].visible = !1, PDB.residueGroupObject[o][n] = PDB.residueGroup_hide;
                    break
                }
            }
        } else for (var n in e[o]) {
            var i = e[o][n].caid, s = PDB.tool.getMainAtom(PDB.pdbId, i).pos_centered, t = camera.position,
                l = Math.sqrt(Math.pow(t.x - s.x, 2) + Math.pow(t.y - s.y, 2) + Math.pow(t.z - s.z, 2));
            if (l < r) {
                if (void 0 == PDB.residueGroupObject[o][n] || PDB.residueGroupObject[o][n] == PDB.residueGroup_undefined) PDB.painter.showResidue(o, n, PDB.LINE, !0), PDB.residueGroupObject[o][n] = PDB.residueGroup_show; else if (PDB.residueGroupObject[o][n] == PDB.residueGroup_hide) {
                    var c = "chain_" + o;
                    for (var d in PDB.GROUP[c].children) if (e[o][n].caid == PDB.GROUP[c].children[d].name) {
                        PDB.GROUP[c].children[d].visible = !0, PDB.residueGroupObject[o][n] = PDB.residueGroup_show;
                        break
                    }
                }
            } else if (PDB.residueGroupObject[o][n] == PDB.residueGroup_show) {
                var c = "chain_" + o;
                for (var d in PDB.GROUP[c].children) if (e[o][n].caid == PDB.GROUP[c].children[d].name) {
                    PDB.GROUP[c].children[d].visible = !1, PDB.residueGroupObject[o][n] = PDB.residueGroup_hide;
                    break
                }
            }
        }
    }, repeatPainter: function () {
        var e = w3m.mol[PDB.pdbId].residueData,
            r = PDB.mode == PDB.MODE_VR ? PDB.initVRShowThreshold : PDB.initDesktopShowThreshold;
        for (var t in e) {
            if (!(w3m.mol[PDB.pdbId].chain[t] == w3m.CHAIN_NA && PDB.config.mainMode >= PDB.TUBE && PDB.config.mainMode != PDB.HIDE)) for (var a in e[t]) {
                e[t][a].caid;
                if (PDB.residueGroupObject[t]) {
                    var o = 0;
                    if (PDB.residueGroupObject[t][a] && PDB.residueGroupObject[t][a].vector && (o = PDB.tool.getVectorLength(PDB.residueGroupObject[t][a].vector)), PDB.residueGroupObject[t][a].len = o, PDB.residueGroupObject[t][a].len < r) {
                        if (PDB.loadType == PDB.bigmodel) {
                            if (PDB.residueGroupObject[t][a].v == PDB.residueGroup_low) {
                                if (PDB.config.mainMode != PDB.DOT && PDB.config.mainMode != PDB.LINE && PDB.config.mainMode != PDB.BALL_AND_ROD && PDB.config.mainMode != PDB.STICK && PDB.structureSizeLevel > 1) {
                                    var n = "chain_" + t + "_low", i = PDB.GROUP[n].getChildrenByName(e[t][a].caid);
                                    for (var s in i) i[s].visible = !1;
                                    var l = "chain_" + t, c = PDB.GROUP[l].getChildrenByName(e[t][a].caid);
                                    for (var s in c) c[s].visible = !0
                                }
                                PDB.residueGroupObject[t][a].v = PDB.residueGroup_show
                            }
                        } else if (PDB.loadType == PDB.smallmodel) if (PDB.residueGroupObject[t][a].v == PDB.residueGroup_undefined) PDB.CONFIG = PDB.CONFIG_HIGH, PDB.painter.showResidue(t, a, PDB.config.mainMode, !0), PDB.residueGroupObject[t][a].v = PDB.residueGroup_show; else if (PDB.residueGroupObject[t][a].v == PDB.residueGroup_hide) {
                            var l = "chain_" + t, c = PDB.GROUP[l].getChildrenByName(e[t][a].caid);
                            if (c && c.length > 0) for (var s in c) c[s].visible = !0;
                            PDB.residueGroupObject[t][a].v = PDB.residueGroup_show
                        }
                    } else if (PDB.loadType == PDB.bigmodel) {
                        if (PDB.residueGroupObject[t][a].v == PDB.residueGroup_show) {
                            if (PDB.config.mainMode != PDB.DOT && PDB.config.mainMode != PDB.LINE && PDB.config.mainMode != PDB.BALL_AND_ROD && PDB.config.mainMode != PDB.STICK && PDB.structureSizeLevel > 1) {
                                var n = "chain_" + t + "_low", i = PDB.GROUP[n].getChildrenByName(e[t][a].caid);
                                for (var s in i) i[s].visible = !0;
                                var l = "chain_" + t, c = PDB.GROUP[l].getChildrenByName(e[t][a].caid);
                                for (var s in c) c[s].visible = !1
                            }
                            PDB.residueGroupObject[t][a].v = PDB.residueGroup_low
                        }
                    } else if (PDB.loadType == PDB.smallmodel && PDB.residueGroupObject[t][a].v == PDB.residueGroup_show) {
                        var l = "chain_" + t, c = PDB.GROUP[l].getChildrenByName(e[t][a].caid);
                        if (c && c.length > 0) for (var s in c) c[s].visible = !1;
                        PDB.residueGroupObject[t][a].v = PDB.residueGroup_hide
                    }
                }
            }
        }
    }, showBoxHelper: function (e) {
        e || (e = {
            x: w3m.global.limit.x,
            y: w3m.global.limit.y,
            z: w3m.global.limit.z
        }), e.x = [e.x[0] + PDB.GeoCenterOffset.x, e.x[1] + PDB.GeoCenterOffset.x], e.y = [e.y[0] + PDB.GeoCenterOffset.y, e.y[1] + PDB.GeoCenterOffset.y], e.z = [e.z[0] + PDB.GeoCenterOffset.z, e.z[1] + PDB.GeoCenterOffset.z];
        var r = new THREE.Box3(new THREE.Vector3(e.x[0], e.y[0], e.z[0]), new THREE.Vector3(e.x[1], e.y[1], e.z[1]));
        r.setFromCenterAndSize(new THREE.Vector3((e.x[0] + e.x[1]) / 2, (e.y[0] + e.y[1]) / 2, (e.z[0] + e.z[1]) / 2), new THREE.Vector3(e.x[1] - e.x[0], e.y[1] - e.y[0], e.z[1] - e.z[0]));
        var t = new THREE.Box3Helper(r, 16773376);
        PDB.render.clearGroupIndex(PDB.GROUP_BOX_HELPER), PDB.GROUP[PDB.GROUP_BOX_HELPER].add(t)
    }
}, PDB.controller = {
    webvr: function () {
        WEBVR.checkAvailability().catch(function (e) {
            document.body.appendChild(WEBVR.getMessageContainer(e))
        })
    }, init: function () {
        this.createMenu(), PDB.mode === PDB.MODE_VR ? PDB.render.initVR() : PDB.render.init()
    }, createMenu: function () {
        var e = this;
        document.getElementById("isLow").addEventListener("click", function (r) {
            this.checked ? PDB.loadType = PDB.bigmodel : this.checked || (PDB.loadType = PDB.smallmodel), PDB.render.clear(2), e.refreshGeometryByMode(PDB.config.mainMode), PDB.render.clear(5), PDB.config.hetMode = PDB.config.hetMode, e.refreshGeometryByMode(PDB.config.hetMode)
        }), document.getElementById("search_button").addEventListener("click", function () {
            var r = document.getElementById("search_text");
            0 === r.value.length && (r.value = PDB.pdbId), e.requestRemote(r.value)
        });
        var r = document.getElementById("vrMode"), t = document.getElementById("vrMode2");
        document.getElementById("threeMode").addEventListener("click", function (e) {
            r.style.display = "none", window.location.href = "index.html?vmode=desktop"
        }), r.addEventListener("click", function (e) {
            this.style.display = "none", window.location.href = "index.html?vmode=vr"
        }), t.addEventListener("click", function (e) {
            this.style.display = "none", window.location.href = "index.html?vmode=vr"
        }), document.getElementById("upload_button").addEventListener("change", function () {
            if (this.files.length > 0) {
                var r = this.files[0];
                r.name.endsWith("gz") ? w3m.file.getArrayBuffer(r, function (e) {
                    var t = (r.name.split(".")[0], API_URL_EMMAP + PDB.pdbId.toUpperCase());
                    2 !== ServerType && (t = SERVERURL + "/data/map01.json"), PDB.tool.ajax.get(t, function (r) {
                        if (PDB.MATERIALLIST = [], 0 == PDB.MATERIALLIST.length) for (var t = 1e3; t < 1100; t++) {
                            var a = new THREE.MeshPhongMaterial({
                                color: new THREE.Color(w3m.rgb[t][0], w3m.rgb[t][1], w3m.rgb[t][2]),
                                wireframe: !1,
                                side: THREE.DoubleSide
                            });
                            PDB.MATERIALLIST.push(a)
                        }
                        if (!PDB.tool.isJsonString(r)) return void PDB.tool.printProgress("the response text is not a json string");
                        var o = JSON.parse(r);
                        1 === o.code && void 0 !== o.data ? PDB.controller.emmapLoadFromFile(e, "gz", function (e) {
                            PDB.tool.createDensityMapPanel(o);
                            var r = document.getElementById("dimension");
                            switch (PDB.DIMENSION = Number(r.value), PDB.DIMENSION) {
                                case PDB.DIMENSION_X:
                                    PDB.EMMAP.MAX_SLICE = Number(e.header.NC);
                                    break;
                                case PDB.DIMENSION_Y:
                                    PDB.EMMAP.MAX_SLICE = Number(e.header.NR);
                                    break;
                                case PDB.DIMENSION_Z:
                                    PDB.EMMAP.MAX_SLICE = Number(e.header.NS)
                            }
                            if (PDB.render.clearGroupIndex(PDB.GROUP_MAIN), PDB.render.clear(2), PDB.EMMAP.TYPE = 1, e) switch (PDB.EMMAP.TYPE) {
                                case 0:
                                    PDB.painter.showMapSolid(e, e.threshold), PDB.map_surface_show = 0;
                                    break;
                                case 1:
                                    PDB.painter.showMapSurface(e, e.threshold, !1), PDB.map_surface_show = 1;
                                    break;
                                case 2:
                                    PDB.painter.showMapSurface(e, e.threshold, !0), PDB.map_surface_show = 1
                            }
                            PDB.tool.changeDensityMapRangeValue(e)
                        }) : PDB.tool.printProgress(o.message)
                    })
                }) : r.name.endsWith("mrc") ? w3m.file.getArrayBuffer(r, function (e) {
                    r.name.split(".")[0], PDB.controller.emmapLoadFromFile(e, "mrc", function (e) {
                        if (PDB.render.clearGroupIndex(PDB.GROUP_MAIN), PDB.render.clear(2), PDB.EMMAP.TYPE = 0, e) switch (PDB.EMMAP.TYPE) {
                            case 0:
                                PDB.painter.showMapSolid(e, e.threshold);
                                break;
                            case 1:
                                PDB.painter.showMapSurface(e, e.threshold, !1);
                                break;
                            case 2:
                                PDB.painter.showMapSurface(e, e.threshold, !0)
                        }
                    })
                }) : (console.log("PDB id: " + name), PDB.CHANGESTYLE = 0, e.clear(2, -1), PDB.loader.clear(), PDB.loader.loadFromDisk(r, function () {
                    document.getElementById("search_text").value = PDB.pdbId, e.drawGeometry(PDB.config.mainMode), e.drawGeometry(PDB.config.hetMode), PDB.isShowSurface == PDB.config.openSurface && e.drawGeometry(PDB.config.surfaceMode), e.initFragmentSelect(), PDB.isAnimate || (PDB.render.animate(), PDB.isAnimate = !0), PDB.TravelMode && (PDB.CHANGESTYLE = 6, PDB.render.clearStructure(), PDB.render.changeToThreeMode(PDB.MODE_TRAVEL_THREE, !0), PDB.painter.showResidueByThreeTravel())
                }))
            }
        }), document.getElementById("showWater").addEventListener("click", function (r) {
            r.target.checked ? PDB.isShowWater = !0 : PDB.isShowWater = !1, PDB.painter.showWater(), e.drawGeometry(PDB.config.hetMode)
        }), document.getElementById("showAxis").addEventListener("click", function (e) {
            e.target.checked ? PDB.tool.showAxis(!0) : PDB.tool.showAxis(!1)
        }), document.getElementById("drugSurface").addEventListener("click", function (e) {
            e.target.checked ? PDB.painter.showDrugSurface(PDB.config.selectedDrug) : PDB.render.clearGroupIndex(PDB.GROUP_SURFACE_HET)
        }), document.getElementById("loadDensityMap").addEventListener("click", function () {
            var r = API_URL_EMMAP + PDB.pdbId.toUpperCase();
            2 !== ServerType && (r = SERVERURL + "/data/map01.json"), PDB.tool.ajax.get(r, function (r) {
                if (PDB.MATERIALLIST = [], 0 == PDB.MATERIALLIST.length) for (var t = 1e3; t < 1100; t++) {
                    var a = new THREE.MeshPhongMaterial({
                        color: new THREE.Color(w3m.rgb[t][0], w3m.rgb[t][1], w3m.rgb[t][2]),
                        wireframe: !1,
                        side: THREE.DoubleSide
                    });
                    PDB.MATERIALLIST.push(a)
                }
                if (!PDB.tool.isJsonString(r)) return void PDB.tool.printProgress("the response text is not a json string");
                var o = JSON.parse(r);
                if (1 === o.code && void 0 !== o.data) {
                    PDB.tool.createDensityMapPanel(o);
                    var n = o.method;
                    1 == PDB.DEBUG_MODE && (n = "map-local"), e.emmapLoad(PDB.EMMAP.FIRST_ID, n, function (e) {
                        var r = (Math.floor((PDB.EMMAP.MIN_SLICE + PDB.EMMAP.MAX_SLICE) / 2), document.getElementById("dimension"));
                        switch (PDB.DIMENSION = Number(r.value), PDB.DIMENSION) {
                            case PDB.DIMENSION_X:
                                PDB.EMMAP.MAX_SLICE = Number(e.header.NC);
                                break;
                            case PDB.DIMENSION_Y:
                                PDB.EMMAP.MAX_SLICE = Number(e.header.NR);
                                break;
                            case PDB.DIMENSION_Z:
                                PDB.EMMAP.MAX_SLICE = Number(e.header.NS)
                        }
                        switch (PDB.EMMAP.TYPE) {
                            case 0:
                                PDB.painter.showMapSolid(e, e.threshold);
                                break;
                            case 1:
                                PDB.painter.showMapSurface(e, e.threshold, !1);
                                break;
                            case 2:
                                PDB.painter.showMapSurface(e, e.threshold, !0)
                        }
                        PDB.tool.changeDensityMapRangeValue(e)
                    })
                } else PDB.tool.printProgress(o.message)
            })
        }), document.getElementById("search_text").value = PDB.pdbId;
        var a = document.getElementById("b_hide"), o = document.getElementById("b_line"),
            n = document.getElementById("b_dot"), s = document.getElementById("b_backbone"),
            l = document.getElementById("b_a"), c = document.getElementById("b_b"), d = document.getElementById("b_ab"),
            m = document.getElementById("b_tube"), P = document.getElementById("b_flat"),
            u = document.getElementById("b_ellipse"), D = document.getElementById("b_rectangle"),
            _ = document.getElementById("b_strip"), h = document.getElementById("b_railway"),
            B = document.getElementById("b_sse"),
            p = (document.getElementById("b_surface"), document.getElementById("editResidue")),
            E = document.getElementById("closeeditResidue"), f = document.getElementById("b_show_editResidue");
        E.addEventListener("click", function () {
            PDB.tool.showSegmentholder(!1), p.style.display = "none"
        }), f.addEventListener("click", function (e) {
            PDB.tool.showSegmentholder(!0), p.style.display = "block"
        }), document.getElementById("b_replace").addEventListener("click", function (e) {
            if (PDB.GROUP_ONE_RES = PDB.GROUP_COUNT + 1, PDB.GROUP[PDB.GROUP_ONE_RES]) {
                for (var r in PDB.GROUP[PDB.GROUP_ONE_RES].children) PDB.GROUP[PDB.GROUP_ONE_RES].remove(PDB.GROUP[PDB.GROUP_ONE_RES].children[r]);
                PDB.GROUP[PDB.GROUP_ONE_RES].position.copy(new THREE.Vector3(0, 0, 0))
            } else PDB.GROUP[PDB.GROUP_ONE_RES] = new THREE.Group;
            var t = document.getElementById("representation"), a = t.value;
            a = Number(a), isNaN(a) && (a = PDB.SPHERE);
            var o, n = document.getElementById("chain_replace"), i = "chain_" + n.value;
            PDB.GROUP[i + "_low"] && (o = i + "_low");
            var s = document.getElementById("residue_replace"), l = document.getElementById("allResidue"),
                c = document.getElementById("editResidue"), d = l.value;
            if (w3m.mol[d]) {
                PDB.painter.showOneRes(a, d), PDB.tool.showSegmentholder(!1), c.style.display = "none";
                var m = s.selectedOptions[0].xyz, P = s.value, u = new THREE.Vector3(m[0], m[1], m[2]);
                PDB.GROUP[PDB.GROUP_ONE_RES].position.copy(u);
                var D = new THREE.Vector3(0, 0, 0), _ = {};
                if (PDB.GROUP[i]) for (var r in PDB.GROUP[i].children) if (PDB.GROUP[i].children[r].userData && PDB.GROUP[i].children[r].userData.presentAtom) {
                    var h = PDB.GROUP[i].children[r].userData.presentAtom.resid,
                        B = PDB.GROUP[i].children[r].userData.presentAtom.name;
                    h == P && ("ca" == B && (D.copy(PDB.GROUP[i].children[r].userData.presentAtom.pos_centered), $.extend(_, PDB.GROUP[i].children[r].userData.presentAtom, !0)), PDB.GROUP[i].remove(PDB.GROUP[i].children[r]))
                }
                var p = new THREE.Group;
                p.copy(PDB.GROUP[PDB.GROUP_ONE_RES]);
                var E = new THREE.Vector3(0, 0, 0), f = new THREE.Vector3(0, 0, 0);
                for (var r in p.children) if ("ca" == p.children[r].userData.presentAtom.name) if (f.copy(p.children[r].userData.presentAtom.pos), p.children[r].type = "Line") {
                    var w = p.children[r].userData.presentAtom.pos_centered;
                    E.copy(new THREE.Vector3(w.x, w.y, w.z))
                } else E.copy(p.children[r].position);
                for (var r in p.children) {
                    var g = p.children[r];
                    g.position.x = g.position.x - E.x, g.position.y = g.position.y - E.y, g.position.z = g.position.z - E.z
                }
                if (p.userData = {
                    group: i,
                    presentAtom: _
                }, PDB.GROUP[i].add(p), p.position.copy(D), o && PDB.GROUP[o]) {
                    for (var r in PDB.GROUP[o].children) if (PDB.GROUP[o].children[r].userData && PDB.GROUP[o].children[r].userData.presentAtom) {
                        var h = PDB.GROUP[i].children[r].userData.presentAtom.resid;
                        h == P && PDB.GROUP[o].remove(PDB.GROUP[o].children[r])
                    }
                    var v = new THREE.Group;
                    v.copy(p), v.userData = {group: i, presentAtom: _}, PDB.GROUP[o].add(v)
                }
                PDB.GROUP[PDB.GROUP_ONE_RES].children = [], PDB.tool.updateAllEditResInfo(_, f, d, P, n.value)
            } else PDB.loader.loadResidue(d, function () {
                PDB.painter.showOneRes(a, d), PDB.tool.showSegmentholder(!1), c.style.display = "none";
                var e = s.selectedOptions[0].xyz, r = s.value, t = new THREE.Vector3(e[0], e[1], e[2]);
                PDB.GROUP[PDB.GROUP_ONE_RES].position.copy(t);
                var l = new THREE.Vector3(0, 0, 0), m = {};
                if (PDB.GROUP[i]) {
                    var P = !1;
                    for (var u in PDB.GROUP[i].children) if (PDB.GROUP[i].children[u].userData && PDB.GROUP[i].children[u].userData.presentAtom) {
                        var D = PDB.GROUP[i].children[u].userData.presentAtom.resid,
                            _ = PDB.GROUP[i].children[u].userData.presentAtom.chainname,
                            h = PDB.GROUP[i].children[u].userData.presentAtom.name;
                        if (D == r && _ == n.value && "ca" == h) {
                            if (P) break;
                            P = !0, l.copy(PDB.GROUP[i].children[u].userData.presentAtom.pos_centered), $.extend(m, PDB.GROUP[i].children[u].userData.presentAtom, !0), PDB.GROUP[i].remove(PDB.GROUP[i].children[u])
                        } else if (P) break
                    }
                }
                m.resname = d;
                var B = new THREE.Group;
                B.copy(PDB.GROUP[PDB.GROUP_ONE_RES]);
                var p = new THREE.Vector3(0, 0, 0), E = new THREE.Vector3(0, 0, 0);
                for (var u in B.children) if ("ca" == B.children[u].userData.presentAtom.name) if (E.copy(B.children[u].userData.presentAtom.pos), B.children[u].type = "Line") {
                    var f = B.children[u].userData.presentAtom.pos_centered;
                    p.copy(new THREE.Vector3(f.x, f.y, f.z))
                } else p.copy(B.children[u].position);
                for (var u in B.children) {
                    var w = B.children[u];
                    w.position.x = w.position.x - p.x, w.position.y = w.position.y - p.y, w.position.z = w.position.z - p.z
                }
                if (B.userData = {
                    group: i,
                    presentAtom: m
                }, PDB.GROUP[i].add(B), B.position.copy(l), o && PDB.GROUP[o]) {
                    for (var u in PDB.GROUP[o].children) if (PDB.GROUP[o].children[u].userData && PDB.GROUP[o].children[u].userData.presentAtom) {
                        var D = PDB.GROUP[i].children[u].userData.presentAtom.resid;
                        D == r && PDB.GROUP[o].remove(PDB.GROUP[o].children[u])
                    }
                    var g = new THREE.Group;
                    g.copy(B), g.userData = {group: i, presentAtom: m}, PDB.GROUP[o].add(g)
                }
                PDB.GROUP[PDB.GROUP_ONE_RES].children = [], PDB.tool.updateAllEditResInfo(m, E, d, r, n.value)
            })
        }), a.addEventListener("click", function (e) {
            if ("Hide" == e.target.innerText) {
                var r = w3m.mol[PDB.pdbId].residueData;
                for (var t in r) PDB.GROUP["chain_" + t].visible = !1, PDB.structureSizeLevel > 1 && (PDB.GROUP["chain_" + t + "_low"].visible = !1);
                PDB.GROUP[PDB.GROUP_HET].visible = !1, PDB.render.hideStructure(), e.target.innerText = "Show"
            } else if ("Show" == e.target.innerText) {
                var r = w3m.mol[PDB.pdbId].residueData;
                for (var t in r) PDB.GROUP["chain_" + t].visible = !0, PDB.structureSizeLevel > 1 && (PDB.GROUP["chain_" + t + "_low"].visible = !0);
                PDB.GROUP[PDB.GROUP_HET].visible = !0, PDB.render.showStructure(), e.target.innerText = "Hide"
            }
        }), o.addEventListener("click", function () {
            PDB.render.clear(5), PDB.config.mainMode = PDB.LINE, e.refreshGeometryByMode(PDB.config.mainMode)
        }), n.addEventListener("click", function () {
            PDB.render.clear(5), PDB.config.mainMode = PDB.DOT, e.refreshGeometryByMode(PDB.config.mainMode)
        }), s.addEventListener("click", function () {
            PDB.render.clear(5), PDB.config.mainMode = PDB.BACKBONE, e.refreshGeometryByMode(PDB.config.mainMode)
        }), l.addEventListener("click", function () {
            PDB.render.clear(5), PDB.config.mainMode = PDB.SPHERE, e.refreshGeometryByMode(PDB.config.mainMode)
        }), c.addEventListener("click", function () {
            PDB.render.clear(5), PDB.config.mainMode = PDB.STICK, e.refreshGeometryByMode(PDB.config.mainMode)
        }), d.addEventListener("click", function () {
            PDB.render.clear(5), PDB.config.mainMode = PDB.BALL_AND_ROD, e.refreshGeometryByMode(PDB.config.mainMode)
        }), m.addEventListener("click", function () {
            PDB.render.clear(5), PDB.config.mainMode = PDB.TUBE, e.refreshGeometryByMode(PDB.config.mainMode)
        }), P.addEventListener("click", function () {
            PDB.render.clear(5), PDB.config.mainMode = PDB.RIBBON_FLAT, e.refreshGeometryByMode(PDB.config.mainMode)
        }), u.addEventListener("click", function () {
            PDB.render.clear(5), PDB.config.mainMode = PDB.RIBBON_ELLIPSE, e.refreshGeometryByMode(PDB.config.mainMode)
        }), D.addEventListener("click", function () {
            PDB.render.clear(5), PDB.config.mainMode = PDB.RIBBON_RECTANGLE, e.refreshGeometryByMode(PDB.config.mainMode)
        }), _.addEventListener("click", function () {
            PDB.render.clear(5), PDB.config.mainMode = PDB.RIBBON_STRIP, e.refreshGeometryByMode(PDB.config.mainMode)
        }), h.addEventListener("click", function () {
            PDB.render.clear(5), PDB.config.mainMode = PDB.RIBBON_RAILWAY, e.refreshGeometryByMode(PDB.config.mainMode)
        }), B.addEventListener("click", function () {
            PDB.render.clear(5), PDB.config.mainMode = PDB.CARTOON_SSE, e.refreshGeometryByMode(PDB.config.mainMode)
        });
        var w = document.getElementById("h_hide"), g = document.getElementById("h_line"),
            v = document.getElementById("h_sphere"), R = document.getElementById("h_stick"),
            b = document.getElementById("h_ballrod");
        w.addEventListener("click", function (e) {
            "Hide" == e.target.innerText ? (PDB.GROUP[PDB.GROUP_HET].visible = !1, e.target.innerText = "Show") : "Show" == e.target.innerText && (PDB.GROUP[PDB.GROUP_HET].visible = !0, e.target.innerText = "Hide")
        }), g.addEventListener("click", function () {
            PDB.render.clear(5), PDB.config.hetMode = PDB.HET_LINE, e.refreshGeometryByMode(PDB.config.hetMode)
        }), v.addEventListener("click", function () {
            PDB.render.clear(5), PDB.config.hetMode = PDB.HET_SPHERE, e.refreshGeometryByMode(PDB.config.hetMode)
        }), R.addEventListener("click", function () {
            PDB.render.clear(5), PDB.config.hetMode = PDB.HET_STICK, e.refreshGeometryByMode(PDB.config.hetMode)
        }), b.addEventListener("click", function () {
            PDB.render.clear(5), PDB.config.hetMode = PDB.HET_BALL_ROD, e.refreshGeometryByMode(PDB.config.hetMode)
        });
        var O = document.getElementById("surfaceVDW"), T = document.getElementById("surfaceSE"),
            M = document.getElementById("surfaceSA"), I = document.getElementById("surfaceM"),
            A = document.getElementById("surfaceN");
        O.addEventListener("click", function () {
            PDB.render.clear(5), PDB.CHANGESTYLE = 0, e.refreshSurface(PDB.config.surfaceMode, 1, PDB.SURFACE_OPACITY, PDB.SURFACE_WIREFRAME)
        }), T.addEventListener("click", function () {
            PDB.render.clear(5), PDB.CHANGESTYLE = 0, e.refreshSurface(PDB.config.surfaceMode, 2, PDB.SURFACE_OPACITY, PDB.SURFACE_WIREFRAME)
        }), M.addEventListener("click", function () {
            PDB.render.clear(5), PDB.CHANGESTYLE = 0, e.refreshSurface(PDB.config.surfaceMode, 3, PDB.SURFACE_OPACITY, PDB.SURFACE_WIREFRAME)
        }), I.addEventListener("click", function () {
            PDB.render.clear(5), PDB.CHANGESTYLE = 0, e.refreshSurface(PDB.config.surfaceMode, 4, PDB.SURFACE_OPACITY, PDB.SURFACE_WIREFRAME)
        }), A.addEventListener("click", function (e) {
            PDB.render.clear(5), PDB.CHANGESTYLE = 0, PDB.SURFACE_TYPE = 0, PDB.GROUP[PDB.GROUP_SURFACE].visible = !1
        });
        var y = document.getElementById("surfaceOpacity1"), U = document.getElementById("surfaceOpacity2"),
            N = document.getElementById("surfaceOpacity3"), G = document.getElementById("surfaceOpacity4"),
            S = document.getElementById("surfaceOpacity5"), C = document.getElementById("surfaceOpacity6");
        y.addEventListener("click", function () {
            var r = PDB.GROUP[PDB.GROUP_SURFACE];
            void 0 === r || void 0 !== r && 0 === r.children.length || e.refreshSurface(PDB.config.surfaceMode, PDB.SURFACE_TYPE, 1, PDB.SURFACE_WIREFRAME)
        }), U.addEventListener("click", function () {
            var r = PDB.GROUP[PDB.GROUP_SURFACE];
            void 0 === r || void 0 !== r && 0 === r.children.length || e.refreshSurface(PDB.config.surfaceMode, PDB.SURFACE_TYPE, .9, PDB.SURFACE_WIREFRAME)
        }), N.addEventListener("click", function () {
            var r = PDB.GROUP[PDB.GROUP_SURFACE];
            void 0 === r || void 0 !== r && 0 === r.children.length || e.refreshSurface(PDB.config.surfaceMode, PDB.SURFACE_TYPE, .8, PDB.SURFACE_WIREFRAME)
        }), G.addEventListener("click", function () {
            var r = PDB.GROUP[PDB.GROUP_SURFACE];
            void 0 === r || void 0 !== r && 0 === r.children.length || e.refreshSurface(PDB.config.surfaceMode, PDB.SURFACE_TYPE, .7, PDB.SURFACE_WIREFRAME)
        }), S.addEventListener("click", function () {
            var r = PDB.GROUP[PDB.GROUP_SURFACE];
            void 0 === r || void 0 !== r && 0 === r.children.length || e.refreshSurface(PDB.config.surfaceMode, PDB.SURFACE_TYPE, .6, PDB.SURFACE_WIREFRAME)
        }), C.addEventListener("click", function () {
            var r = PDB.GROUP[PDB.GROUP_SURFACE];
            void 0 === r || void 0 !== r && 0 === r.children.length || e.refreshSurface(PDB.config.surfaceMode, PDB.SURFACE_TYPE, .5, PDB.SURFACE_WIREFRAME)
        }), document.getElementById("wireFrame").addEventListener("click", function (r) {
            var t = PDB.GROUP[PDB.GROUP_SURFACE];
            void 0 === t || void 0 !== t && 0 === t.children.length || void 0 !== r.target.checked && e.refreshSurface(PDB.config.surfaceMode, PDB.SURFACE_TYPE, PDB.SURFACE_OPACITY, r.target.checked)
        });
        var x = document.getElementById("selModel"), L = document.getElementById("selChain"),
            H = document.getElementById("selAtom"), k = document.getElementById("selResidue");
        x.addEventListener("click", function () {
            PDB.label_type = PDB.SELECTION_MODEL
        }), L.addEventListener("click", function () {
            PDB.label_type = PDB.SELECTION_CHAIN
        }), k.addEventListener("click", function () {
            PDB.label_type = PDB.SELECTION_RESIDUE
        }), H.addEventListener("click", function () {
            PDB.label_type = PDB.SELECTION_ATOM
        }), document.getElementById("b_export_scene").addEventListener("click", function () {
            PDB.render.exportToObj(document.getElementById("exportType").value)
        }), document.getElementById("b_export_pdb").addEventListener("click", function (e) {
            w3m.ajax.get(PDB.pdbId, function (e) {
                PDB.exportPdb = !0, w3m.config.rep_mode_main = PDB.config.mainMode, w3m.config.rep_mode_het = PDB.config.hetMode, w3m.pdb(e)
            })
        });
        var F = document.getElementById("triggerDistance"), z = document.getElementById("triggerAngle"),
            V = document.getElementById("isHide");
        F.addEventListener("click", function (e) {
            PDB.selection_mode = PDB.SELECTION_ATOM, PDB.trigger = PDB.TRIGGER_EVENT_DISTANCE
        }), z.addEventListener("click", function (e) {
            PDB.selection_mode = PDB.SELECTION_ATOM, PDB.trigger = PDB.TRIGGER_EVENT_ANGLE
        }), V.addEventListener("click", function (e) {
            e.target.checked ? PDB.GROUP[PDB.GROUP_MAIN].visible = !1 : PDB.GROUP[PDB.GROUP_MAIN].visible = !0
        }), document.getElementById("updatecolor_ByElement").addEventListener("click", function (r) {
            var t = r.target.getAttribute("color_mode");
            e.switchColorBymode(t)
        }), document.getElementById("updatecolor_ByResidue").addEventListener("click", function (r) {
            var t = r.target.getAttribute("color_mode");
            e.switchColorBymode(t)
        }), document.getElementById("updatecolor_BySecondaryStructure").addEventListener("click", function (r) {
            var t = r.target.getAttribute("color_mode");
            e.switchColorBymode(t)
        }), document.getElementById("updatecolor_ByChain").addEventListener("click", function (r) {
            var t = r.target.getAttribute("color_mode");
            e.switchColorBymode(t)
        }), document.getElementById("updatecolor_ByRepresentation").addEventListener("click", function (r) {
            var t = r.target.getAttribute("color_mode");
            e.switchColorBymode(t)
        }), document.getElementById("updatecolor_ByB_Factor").addEventListener("click", function (r) {
            var t = r.target.getAttribute("color_mode");
            e.switchColorBymode(t)
        }), document.getElementById("updatecolor_BySpectrum").addEventListener("click", function (r) {
            var t = r.target.getAttribute("color_mode");
            e.switchColorBymode(t)
        }), document.getElementById("updatecolor_ByChainSpectrum").addEventListener("click", function (r) {
            var t = r.target.getAttribute("color_mode");
            e.switchColorBymode(t)
        }), document.getElementById("updatecolor_ByHydrophobicity").addEventListener("click", function (r) {
            var t = r.target.getAttribute("color_mode");
            e.switchColorBymode(t)
        }), document.getElementById("b_load_conser").addEventListener("click", function (e) {
            var r = PDB.CONSERVATION_URL + "&pdbid=" + PDB.pdbId.toUpperCase() + "&chain=A";
            2 != ServerType && (r = SERVERURL + "/data/conservation.json"), PDB.tool.ajax.get(r, function (e) {
                PDB.controller.clear(4, void 0), PDB.painter.showConservation(e), PDB.render.clearMain(), PDB.controller.drawGeometry(PDB.config.mainMode)
            })
        });
        var Y = document.getElementById("dragReset"), j = document.getElementById("dragHet"),
            X = document.getElementById("dragChain");
        Y.addEventListener("click", function () {
            PDB.tool.backToInitialPositonForDesktop()
        }), j.addEventListener("click", function () {
            PDB.controller.switchDragByMode(PDB.SELECTION_HET)
        }), X.addEventListener("click", function () {
            PDB.controller.switchDragByMode(PDB.SELECTION_CHAIN)
        });
        var W = document.getElementById("closesegment"), q = document.getElementById("segmentPanel");
        document.getElementById("b_show_segmenpanel").addEventListener("click", function () {
            PDB.tool.showSegmentholder(!0), q.style.display = "block"
        }), W.addEventListener("click", function () {
            PDB.tool.showSegmentholder(!1), q.style.display = "none"
        });
        var K = document.getElementById("mutationTCGA"), Z = document.getElementById("mutationCCLE"),
            J = document.getElementById("mutationExAC"), Q = document.getElementById("mutationNone"),
            ee = document.getElementById("dbSNP"), re = document.getElementById("showMutationTable");
        K.addEventListener("click", function () {
            var e = PDB.MUTATION_URL + "&pdbid=" + PDB.pdbId.toUpperCase() + "&ds=tcga";
            1 == PDB.DEBUG_MODE && (e = SERVERURL + "/data/mutation.json"), PDB.tool.ajax.get(e, function (e) {
                PDB.controller.clear(4, void 0), PDB.painter.showMutation(e), PDB.tool.showMutationTable(PDB.showMutationTable, e)
            })
        }), Z.addEventListener("click", function () {
            var e = PDB.MUTATION_URL + "&pdbid=" + PDB.pdbId.toUpperCase() + "&ds=ccle";
            PDB.tool.ajax.get(e, function (e) {
                PDB.controller.clear(4, void 0), PDB.painter.showMutation(e), PDB.tool.showMutationTable(PDB.showMutationTable, e)
            })
        }), J.addEventListener("click", function () {
            var e = PDB.MUTATION_URL + "&pdbid=" + PDB.pdbId.toUpperCase() + "&ds=exac";
            PDB.tool.ajax.get(e, function (e) {
                PDB.controller.clear(4, void 0), PDB.painter.showMutation(e), PDB.tool.showMutationTable(PDB.showMutationTable, e)
            })
        }), ee.addEventListener("click", function () {
            var e = PDB.MUTATION_URL + "&pdbid=" + PDB.pdbId.toUpperCase() + "&ds=dbsnp";
            PDB.tool.ajax.get(e, function (e) {
                PDB.controller.clear(4, void 0), PDB.painter.showMutation(e), PDB.tool.showMutationTable(PDB.showMutationTable, e)
            })
        }), Q.addEventListener("click", function () {
            PDB.controller.clear(4, void 0)
        }), PDB.showMutationTable = !0, re.addEventListener("click", function () {
            this.checked ? (document.getElementById("rightmenu").hidden = !1, PDB.showMutationTable = !0) : (document.getElementById("rightmenu").hidden = !0, PDB.showMutationTable = !1)
        });
        var te = document.getElementById("rotationSwitch"), ae = document.getElementById("rotationCounterclockwise"),
            oe = document.getElementById("rotationClockwise");
        te.addEventListener("click", function () {
            PDB.controller.cancelRotation()
        }), ae.addEventListener("click", function () {
            var e = $('input[name="rotateAxis"]:checked').val();
            PDB.controller.cancelRotation(), PDB.controller.startRotation(Number(e), 1)
        }), oe.addEventListener("click", function () {
            var e = $('input[name="rotateAxis"]:checked').val();
            PDB.controller.cancelRotation(), PDB.controller.startRotation(Number(e), 0)
        }), document.getElementById("showBoxHelper").addEventListener("click", function (e) {
            this.checked ? PDB.GROUP[PDB.GROUP_BOX_HELPER] && (PDB.GROUP[PDB.GROUP_BOX_HELPER].visible = !0) : PDB.GROUP[PDB.GROUP_BOX_HELPER] && (PDB.GROUP[PDB.GROUP_BOX_HELPER].visible = !1)
        }), document.getElementById("hideDrug").addEventListener("click", function (e) {
            this.checked ? PDB.GROUP[PDB.GROUP_DRUG].visible = !1 : PDB.GROUP[PDB.GROUP_DRUG].visible = !0
        }), document.getElementById("hideDrugPanel").addEventListener("click", function (e) {
            PDB.render.clear(6)
        }),
            document.getElementById("b_load_drug").addEventListener("click", function () {
                var e = API_URL + "/server/api.php?taskid=12&pdbid=" + PDB.pdbId.toUpperCase();
                2 !== ServerType && (e = SERVERURL + "/data/drug.json"), PDB.tool.ajax.get(e, function (e) {
                    var r = JSON.parse(e);
                    if (1 === r.code && void 0 !== r.data) {
                        var t = document.getElementById("rightmenu");
                        t.hidden = !1, t.style.overflowY = "hidden", t.innerHTML = '<label>Docking Region</label><br/><span class="xyz_min_max"><label>X:</label><input id="x_min"/>~<input id="x_max"/><br/><label>Y:</label><input id="y_min"/>~<input id="y_max"/><br/><label>Z:</label><input id="z_min"/>~<input id="z_max"/><br/></span>', PDB.tool.generateLabel(t, "", ""), $("#x_min").val(w3m.global.limit.x[0]), $("#x_max").val(w3m.global.limit.x[1]), $("#y_min").val(w3m.global.limit.y[0]), $("#y_max").val(w3m.global.limit.y[1]), $("#z_min").val(w3m.global.limit.z[0]), $("#z_max").val(w3m.global.limit.z[1]), $(".xyz_min_max input").bind("change", function (e) {
                            if (null != $(this).val() && !isNaN(Number($(this).val()))) {
                                var r = "" == $("#x_min").val() ? w3m.global.limit.x[0] : Number($("#x_min").val()),
                                    t = "" == $("#x_max").val() ? w3m.global.limit.x[1] : Number($("#x_max").val()),
                                    a = "" == $("#y_min").val() ? w3m.global.limit.y[0] : Number($("#y_min").val()),
                                    o = "" == $("#y_max").val() ? w3m.global.limit.y[1] : Number($("#y_max").val()),
                                    n = "" == $("#z_min").val() ? w3m.global.limit.z[0] : Number($("#z_min").val()),
                                    i = "" == $("#z_max").val() ? w3m.global.limit.z[1] : Number($("#z_max").val()),
                                    s = {x: w3m.global.limit.x, y: w3m.global.limit.y, z: w3m.global.limit.z};
                                isNaN(r) || (s.x[0] = r), isNaN(t) || (s.x[1] = t), isNaN(a) || (s.y[0] = a), isNaN(o) || (s.y[1] = o), isNaN(n) || (s.z[0] = n), isNaN(i) || (s.z[1] = i), PDB.render.clearGroupIndex(PDB.GROUP_BOX_HELPER), PDB.painter.showBoxHelper(s), PDB.tool.generateDrugMigrationPath(s)
                            }
                        });
                        var a = (PDB.tool.generateLabel(t, "Drug List", ""), PDB.tool.generateSpan(t, "menuSpan", "rightsubmenu")),
                            o = r.data[0].bindingdb;
                        PDB.controller.LoadDrugDetails(a, PDB.DRUG_MODE_CONFIG.BINDING_DB, o);
                        var n = r.data[0].chembl;
                        PDB.controller.LoadDrugDetails(a, PDB.DRUG_MODE_CONFIG.CHEMBL, n);
                        var s = r.data[0].swisslipids;
                        PDB.controller.LoadDrugDetails(a, PDB.DRUG_MODE_CONFIG.SWISSLIPIDS, s);
                        var l = r.data[0].guidetopharmacology;
                        PDB.controller.LoadDrugDetails(a, PDB.DRUG_MODE_CONFIG.GUIDETOPHARMACOLOGY, l);
                        var c = r.data[0].drugbank;
                        PDB.controller.LoadDrugDetails(a, PDB.DRUG_MODE_CONFIG.DRUG_BANK, c), PDB.tool.generateTextBox(a, "drugbankid", "DB04464", "textbox"), PDB.tool.generateButton(a, "Load", "Load", "rightLabelPDB").addEventListener("click", function () {
                            drugbankid = document.getElementById("drugbankid").value, PDB.tool.generateDocklingLink(a, "link" + i, "Docking", drugbankid, "drugbank"), a.appendChild(document.createElement("br"))
                        })
                    } else PDB.tool.printProgress(r.message)
                })
            })
    }, LoadDrugDetails: function (e, r, t) {
        if (void 0 !== t && "" !== t && "null" !== t) {
            PDB.tool.generateLabel(e, "DataBase: " + PDB.DRUBDB_NAME[r], "");
            var a = t.split(";");
            for (var o in a) "" !== a[o] && (PDB.tool.generateButton(e, a[o], a[o], "rightLabelPDB").addEventListener("click", function () {
                var e = this.value;
                PDB.config.selectedDrug = e, PDB.loader.loadDrug(e, r, function () {
                    w3m.mol[e].drug = !0, PDB.render.clearGroupIndex(PDB.GROUP_DRUG), PDB.painter.showHet(e), PDB.tool.generateDrugMigrationPath(), PDB.GROUP[PDB.GROUP_DRUG].visible = !0
                })
            }), PDB.tool.generateALink(e, "link" + o, "Detail", PDB.DRUG_MODE_CONFIG.Detail_URL[r] + a[o], ""), "drugbank" == r && PDB.tool.generateDocklingLink(e, "link" + o, "Docking", a[o], r), e.appendChild(document.createElement("br")));
            e.appendChild(document.createElement("br"))
        }
    }, onKeyDown: function (e) {
        var r = this;
        if (13 == (e || window.event).keyCode) {
            var t = document.getElementById("search_text");
            4 !== t.value.length && (t.value = PDB.pdbId), r.requestRemote(t.value)
        }
    }, onLoadEMD: function (e) {
        if (13 == (e || window.event).keyCode) {
            var r = document.getElementById("load_text"), t = "EM";
            1 == PDB.DEBUG_MODE && (t = "map-local"), EmMapParser.loadMap(r.value, t, function (e) {
                console.log("NC:" + e.header.NC), console.log("NR:" + e.header.NR), console.log("NS:" + e.header.NS), console.log(e.data.length)
            })
        }
    }, emmapLoad: function (e, r, t) {
        EmMapParser.loadMap(e, r, function (e) {
            void 0 !== e.data && e.data.length > 0 && (PDB.EMMAP.DATA = e, PDB.EMMAP.MIN_SLICE = 1, void 0 !== t && t(e))
        })
    }, emmapLoadFromFile: function (e, r, t) {
        EmMapParser.loadMapFromFile(e, r, function (e) {
            void 0 !== e.data && e.data.length > 0 && (PDB.EMMAP.DATA = e, void 0 !== t && t(e))
        })
    }, switchColorBymode: function (e) {
        var r = this;
        w3m.config.color_mode_main = Number(e);
        for (var t in w3m.mol) w3m.tool.updateMolColorMap(t);
        PDB.render.clearMain(), r.drawGeometry(PDB.config.mainMode)
    }, switchMeasureByMode: function (e) {
        PDB.selection_mode = PDB.SELECTION_ATOM, PDB.trigger = e
    }, switchDragByMode: function (e) {
        PDB.trigger = PDB.TRIGGER_EVENT_DRAG, PDB.selection_mode = e
    }, switchFragmentByMode: function (e) {
        PDB.trigger = PDB.TRIGGER_EVENT_FRAGMENT, PDB.selection_mode = PDB.SELECTION_RESIDUE, PDB.fragmentMode = e
    }, switchEditingByMode: function (e) {
        PDB.trigger = PDB.TRIGGER_EVENT_EDITING, PDB.selection_mode = PDB.SELECTION_RESIDUE, PDB.fragmentMode = e
    }, fragmentPainter: function (e, r, t) {
        var a = 0;
        if ("Rectangle" === t ? (0, a = PDB.RIBBON_RECTANGLE) : "Tube" === t ? (PDB.CONFIG.tube_radius, a = PDB.TUBE) : "Ellipse" === t ? (PDB.CONFIG.ellipse_radius, a = PDB.RIBBON_ELLIPSE) : "Strip" == t ? (PDB.CONFIG.strip_radius, a = PDB.RIBBON_STRIP) : "Railway" == t ? (PDB.CONFIG.railway_radius, a = PDB.RIBBON_RAILWAY) : "Flat" == t ? (0, a = PDB.RIBBON_FLAT) : "Sphere" == t ? a = PDB.SPHERE : "Backbone" == t ? a = PDB.BACKBONE : "Line" == t ? a = PDB.LINE : "Sticks" == t ? a = PDB.STICK : "BallRod" == t ? a = PDB.BALL_AND_ROD : "Surface" == t && 0, "Surface" === t) PDB.CONFIG.startSegmentSurfaceID = e, PDB.CONFIG.endSegmentSurfaceID = r, PDB.render.clear(4), PDB.painter.showSurface(PDB.CONFIG.startSegmentSurfaceID, PDB.CONFIG.endSegmentSurfaceID, !0); else {
            PDB.render.clear(0);
            var o = PDB.tool.getMainAtom(PDB.pdbId, e), n = PDB.tool.getMainAtom(PDB.pdbId, r);
            if (o.chainname == n.chainname) {
                var i = {
                    start: w3m.mol[PDB.pdbId].residueData[o.chainname][o.resid],
                    end: w3m.mol[PDB.pdbId].residueData[o.chainname][n.resid],
                    issel: !0,
                    reptype: a
                };
                PDB.fragmentList = {0: i}, PDB.painter.showFragmentsResidues()
            }
        }
    }, segmentSelectBindEvent: function (e, r) {
        var t = this, a = Object.keys(w3m.mol[PDB.pdbId].atom.main),
            o = (w3m.mol[PDB.pdbId].atom.main[a[0]], w3m.mol[PDB.pdbId].atom.main[a[a.length - 1]], document.getElementById("segmentPanel"));
        e.addEventListener("change", function (r) {
            var t = e.value, a = document.getElementById("chainIDSelect").value;
            PDB.tool.getFirstAtomByResidueId(t, a)
        }), r.addEventListener("change", function (e) {
            var t = r.value, a = document.getElementById("chainIDSelect").value;
            PDB.tool.getLastAtomByResidueId(t, a)
        });
        var n = document.getElementById("addSelected"), i = document.getElementById("Confirm_fregment"),
            s = document.getElementsByName("selectedStyle");
        n.addEventListener("click", function (e) {
            for (var r = 0, a = 0; a < s.length; a++) if (s[a].checked) {
                r = Number(s[a].value);
                break
            }
            var o = document.getElementById("chainIDSelect"), n = document.getElementById("startPoint"),
                i = document.getElementById("endPoint"), l = document.getElementById("selectedMode"),
                c = document.getElementById("sseTypeSelect"), d = document.getElementById("residueTypeSelect"),
                m = w3m.mol[PDB.pdbId].residueTypeList[Number(d.value)];
            t.addSelectedPanel(r, o.value, n.value, i.value, l.value, c.value, m), t.initSelectedPanel(r)
        });
        for (var l = 0; l < s.length; l++) s[l].addEventListener("click", function (e) {
            for (var r in w3m.mol[PDB.pdbId].residueData) for (var t in w3m.mol[PDB.pdbId].residueData[r]) w3m.mol[PDB.pdbId].residueData[r][t].issel = !1;
            document.getElementById("seletedPanel").innerHTML = ""
        });
        i.addEventListener("click", function (e) {
            PDB.tool.showSegmentholder(!1), o.style.display = "none", PDB.render.clear(0), t.drawGeometry(PDB.config.mainMode)
        })
    }, addSelectedPanel: function (e, r, t, a, o, n, i) {
        document.getElementById("seletedPanel");
        switch (e) {
            case PDB.DRAWSTYLE_FRAGMENT:
                var s = {
                    start: w3m.mol[PDB.pdbId].residueData[r][t],
                    end: w3m.mol[PDB.pdbId].residueData[r][a],
                    issel: !0,
                    reptype: Number(o)
                }, l = PDB.fragmentList, c = Object.keys(l);
                if (0 == c.length) PDB.fragmentList[0] = s; else {
                    if (r == PDB.fragmentList[c[c.length - 1]].start.chain && PDB.fragmentList[c[c.length - 1]].start.id == t && r == PDB.fragmentList[c[c.length - 1]].end.chain && PDB.fragmentList[c[c.length - 1]].end.id == a) return;
                    PDB.fragmentList[Number(c[c.length - 1]) + 1] = s
                }
                break;
            case PDB.DRAWSTYLE_CHAIN:
                for (var d in w3m.mol[PDB.pdbId].residueData[r]) w3m.mol[PDB.pdbId].residueData[r][d].issel = !0;
                break;
            case PDB.DRAWSTYLE_SSETYPE:
                n = Number(n), PDB.config.mainMode = PDB.CARTOON_SSE;
                for (var m in w3m.mol[PDB.pdbId].residueData) {
                    var P = w3m.mol[PDB.pdbId].residueData[m];
                    for (var u in P) {
                        var D = P[u];
                        Math.floor(D.sse / 10) == n && (w3m.mol[PDB.pdbId].residueData[m][u].issel = !0)
                    }
                }
                break;
            case PDB.DRAWSTYLE_RESIDUETYPE:
                for (var m in w3m.mol[PDB.pdbId].residueData) {
                    var P = w3m.mol[PDB.pdbId].residueData[m];
                    for (var u in P) {
                        var D = P[u];
                        D.name == i && (w3m.mol[PDB.pdbId].residueData[m][u].issel = !0)
                    }
                }
        }
    }, initSelectedPanel: function (e) {
        PDB.CHANGESTYLE = e;
        var r = document.getElementById("seletedPanel");
        r.innerHTML = "";
        var t = "";
        switch (e) {
            case PDB.DRAWSTYLE_FRAGMENT:
                var a = PDB.fragmentList;
                for (fkey in a) {
                    var o = a[fkey].start, n = a[fkey].end;
                    t = t + '<span id="f_' + fkey + '" class="fragment" attr="">' + o.chain + "." + o.name + o.id + "~" + n.chain + "." + n.name + n.id + '<span class="fragmentdel">X</span>&nbsp;</span>'
                }
                break;
            case PDB.DRAWSTYLE_CHAIN:
                var i = w3m.mol[PDB.pdbId].residueData;
                for (var s in i) {
                    var l = Object.keys(i[s]);
                    l = l[l.length - 1];
                    var c = !0;
                    for (var d in i[s]) if (!i[s][d].issel) {
                        c = !1;
                        break
                    }
                    c && (t = t + '<span id="ch_' + s + '" class="fragment" attr="">《' + s + '》Chain<span class="fragmentdel">X</span>&nbsp;</span>')
                }
                break;
            case PDB.DRAWSTYLE_SSETYPE:
                var m = {};
                m[w3m.HELIX] = "HELIX", m[w3m.LOOP] = "LOOP", m[w3m.SHEET] = "SHEET";
                var P = {};
                P[w3m.HELIX] = 0, P[w3m.LOOP] = 0, P[w3m.SHEET] = 0;
                for (var u in w3m.mol[PDB.pdbId].residueData) {
                    var D = w3m.mol[PDB.pdbId].residueData[u];
                    for (var _ in D) {
                        var h = D[_], B = Math.floor(h.sse / 10);
                        1 != P[B] && h.issel && (P[B] = 1)
                    }
                }
                for (var d in P) 1 == P[d] && (t = t + '<span id="sse_' + d + '" class="fragment" attr="">' + m[d] + '<span class="fragmentdel">X</span>&nbsp;</span>');
                break;
            case PDB.DRAWSTYLE_RESIDUETYPE:
                var P = {};
                for (var d in w3m.mol[PDB.pdbId].residueTypeList) P[w3m.mol[PDB.pdbId].residueTypeList[d]] = 0;
                for (var u in w3m.mol[PDB.pdbId].residueData) {
                    var D = w3m.mol[PDB.pdbId].residueData[u];
                    for (var _ in D) {
                        var h = D[_];
                        1 != P[h.name] && h.issel && (P[h.name] = 1)
                    }
                }
                for (var d in P) 1 == P[d] && (t = t + '<span id="res_' + d + '" class="fragment" attr="">' + d + '<span class="fragmentdel">X</span>&nbsp;</span>')
        }
        r.innerHTML = t, this.bindSelectedAndDeleteSpan()
    }, bindSelectedAndDeleteSpan: function () {
        var e = this, r = document.getElementsByClassName("fragment");
        r.blink;
        for (var t = 0; t < r.length; t++) r[t].addEventListener("click", function (e) {
            var r = e.target.id, t = r.split("_");
            0 != t.length && 2 == t.length && "f" == t[0] && (PDB.fragmentList[t[1]].issel ? (e.target.style.backgroundColor = "#9ebff0", PDB.fragmentList[t[1]].issel = !1) : (e.target.style.backgroundColor = "#293342", PDB.fragmentList[t[1]].issel = !0))
        });
        for (var a = document.getElementsByClassName("fragmentdel"), t = 0; t < a.length; t++) a[t].addEventListener("click", function (r) {
            var t = r.target.parentNode.id, a = t.split("_");
            if (0 != a.length) if (2 == a.length && "f" == a[0]) delete PDB.fragmentList[a[1]], e.initSelectedPanel(PDB.DRAWSTYLE_FRAGMENT); else if (2 == a.length && "ch" == a[0]) {
                for (var o in w3m.mol[PDB.pdbId].residueData[a[1]]) w3m.mol[PDB.pdbId].residueData[a[1]][o].issel = !1;
                e.initSelectedPanel(PDB.DRAWSTYLE_CHAIN)
            } else if (2 == a.length && "sse" == a[0]) {
                var n = Number(a[1]);
                for (var i in w3m.mol[PDB.pdbId].residueData) {
                    var s = w3m.mol[PDB.pdbId].residueData[i];
                    for (var l in s) {
                        var c = s[l], d = Math.floor(c.sse / 10);
                        d == n && (w3m.mol[PDB.pdbId].residueData[i][l].issel = !1)
                    }
                }
                e.initSelectedPanel(PDB.DRAWSTYLE_SSETYPE)
            } else if (2 == a.length && "res" == a[0]) {
                var m = a[1];
                for (var i in w3m.mol[PDB.pdbId].residueData) {
                    var s = w3m.mol[PDB.pdbId].residueData[i];
                    for (var l in s) {
                        var c = s[l];
                        c.name == m && (w3m.mol[PDB.pdbId].residueData[i][l].issel = !1)
                    }
                }
                e.initSelectedPanel(PDB.DRAWSTYLE_RESIDUETYPE)
            }
        })
    }, initReplaceResidue: function (e) {
        var r = document.getElementById("residue_replace");
        r.innerHTML = "";
        var t = w3m.mol[PDB.pdbId].atom.main;
        for (var a in t) {
            var o = t[a], n = o[3], n = o[2], i = o[3], s = o[4], l = o[5], c = o[6];
            o[7], o[8], o[9];
            if (e == s && "ca" == n) {
                var d = document.createElement("option");
                d.innerHTML = l + ":" + i, d.value = l, d.xyz = c, d.caid = a, r.appendChild(d)
            }
        }
    }, initSartAndSelect: function (e) {
        var r = document.getElementById("residueTypeSelect");
        for (var t in w3m.mol[PDB.pdbId].residueTypeList) {
            var a = w3m.mol[PDB.pdbId].residueTypeList[t], o = document.createElement("option");
            o.innerHTML = a, o.value = t, r.appendChild(o)
        }
        var n = document.getElementById("startPoint");
        n.innerHTML = "";
        var i = document.getElementById("endPoint");
        i.innerHTML = "";
        var s = {}, l = w3m.mol[PDB.pdbId].atom.main, c = -1;
        for (var d in l) {
            var m = l[d], P = (m[3], m[2], m[3]), u = m[4], D = m[5];
            m[6], m[7], m[8], m[9];
            if (void 0 == s[D] && e == u) {
                c++, s[D] = u;
                var o = document.createElement("option");
                o.innerHTML = D + ":" + P, o.value = D, 0 == c && (o.selected = "selected"), n.appendChild(o), o = document.createElement("option"), o.innerHTML = D + ":" + P, o.value = D, (void 0 == l[d + 1] || void 0 == l[d + 1] != void 0 && l[d + 1][4] != u) && (o.selected = "selected"), i.appendChild(o)
            }
        }
        this.segmentSelectBindEvent(n, i)
    }, initFragmentSelect: function () {
        var e = this, r = document.getElementById("chainIDSelect"), t = document.getElementById("chain_replace"),
            a = Object.keys(w3m.mol[PDB.pdbId].chain);
        r.innerHTML = "", t.innerHTML = "";
        for (var o in a) {
            var n = document.createElement("option");
            n.innerHTML = a[o], n.value = a[o], r.appendChild(n);
            var i = document.createElement("option");
            i.innerHTML = a[o], i.value = a[o], t.appendChild(i)
        }
        r.addEventListener("change", function (t) {
            var a = r.value;
            e.initSartAndSelect(a)
        }), this.initSartAndSelect(a[0]), t.addEventListener("change", function (r) {
            var a = t.value;
            e.initReplaceResidue(a)
        });
        var s = document.getElementById("allResidue");
        s.innerHTML = "";
        var l = Object.keys(w3m.structure.pair);
        for (var o in l) {
            if (o > 19) break;
            var c = l[o], n = document.createElement("option");
            n.innerHTML = c, n.value = c, s.appendChild(n)
        }
        this.initReplaceResidue(a[0])
    }, requestRemote: function (e) {
        console.log("PDB id:" + e), PDB.residueGroupObject && (delete PDB.residueGroupObject, PDB.residueGroupObject = {}), fragment ? PDB.CHANGESTYLE = PDB.DRAWSTYLE_FRAGMENT : PDB.CHANGESTYLE = PDB.DRAWSTYLE_DEFAULT;
        var r = this;
        document.getElementById("search_text").value = e, -1 != e.indexOf("http://") ? console.log(e) : -1 != e.indexOf("https://") ? console.log(e) : PDB.pdbId = e.toLowerCase(), r.clear(2, -1), PDB.loader.clear(), PDB.loader.load(e, function () {
            PDB.tool.initFragmentInfo(), PDB.fragmentList && Object.keys(PDB.fragmentList).length > 0 && PDB.controller.initSelectedPanel(PDB.DRAWSTYLE_FRAGMENT), r.drawGeometry(PDB.config.mainMode), r.drawGeometry(PDB.config.hetMode), PDB.isShowSurface == PDB.config.openSurface && r.drawGeometry(PDB.config.surfaceMode), r.initFragmentSelect(), PDB.isAnimate || (PDB.render.animate(), PDB.isAnimate = !0), !0 === PDB.TravelMode && PDB.mode === PDB.MODE_TRAVEL_THREE && (PDB.CHANGESTYLE = 6, PDB.render.clearStructure(), PDB.render.changeToThreeMode(PDB.MODE_TRAVEL_THREE, !0), PDB.painter.showResidueByThreeTravel())
        })
    }, clear: function (e, r) {
        PDB.render.clear(e)
    }, getLoadType: function (e) {
        var r = w3m.LINE;
        switch (e) {
            case PDB.LINE:
            case PDB.DOT:
                r = w3m.LINE;
                break;
            case PDB.BACKBONE:
                r = w3m.BACKBONE;
                break;
            case PDB.STICK:
            case PDB.BALL_AND_ROD:
                r = w3m.LINE;
                break;
            case PDB.TUBE:
            case PDB.RIBBON_FLAT:
            case PDB.RIBBON_ELLIPSE:
            case PDB.RIBBON_RECTANGLE:
            case PDB.RIBBON_STRIP:
            case PDB.RIBBON_RAILWAY:
            case PDB.CARTOON_SSE:
                r = w3m.CUBE;
                break;
            case PDB.HET_LINE:
            case PDB.HET_STICK:
            case PDB.HET_BALL_ROD:
                r = w3m.LINE;
                break;
            default:
                r = w3m.LINE
        }
        return r
    }, drawGeometry: function (e) {
        PDB.tool.printProgress(""), PDB.tool.showSegmentholder(!0, !0), setTimeout(function (r) {
            if (void 0 != w3m.mol[PDB.pdbId]) {
                console.log("sta: " + e + ": " + new Date), e >= PDB.HET ? PDB.painter.showHet(PDB.pdbId) : PDB.CHANGESTYLE != PDB.DRAWSTYLE_FRAGMENT && PDB.CHANGESTYLE != PDB.DRAWSTYLE_DEFAULT && 6 != PDB.CHANGESTYLE ? PDB.painter.showAllResiduesBySelect() : PDB.CHANGESTYLE == PDB.DRAWSTYLE_FRAGMENT ? PDB.painter.showFragmentsResidues() : PDB.CHANGESTYLE == PDB.DRAWSTYLE_DEFAULT && PDB.painter.showAllResidues(e), console.log("end: " + e + ": " + new Date), PDB.tool.showSegmentholder(!1, !1)
            }
        }, PDB.HOLDERTIME)
    }, refreshGeometryByMode: function (e) {
        PDB.CHANGESTYLE = 0;
        var r = this.getLoadType(e), t = this;
        e < PDB.HET ? (PDB.GROUP[PDB.GROUP_HET].visible = !0, this.clear(0, r), t.drawGeometry(e)) : (this.clear(1, r), t.drawGeometry(e))
    }, refreshSurface: function (e, r, t, a) {
        console.log("Present Surface:" + e);
        var o = this, n = !1;
        void 0 !== r && r !== PDB.SURFACE_TYPE && (n = !0), PDB.SURFACE_OPACITY = PDB.tool.getValue(t, 1), PDB.SURFACE_WIREFRAME = PDB.tool.getValue(a, !1), PDB.SURFACE_TYPE = PDB.tool.getValue(r, 1);
        var i = PDB.GROUP[PDB.GROUP_SURFACE];
        if (void 0 !== i && i.children.length > 0 && i.children[0] instanceof THREE.Mesh && !n) {
            var s = PDB.GROUP[PDB.GROUP_SURFACE].children[0];
            void 0 !== s.material && (s.material.opacity = PDB.SURFACE_OPACITY, s.material.wireframe = PDB.SURFACE_WIREFRAME)
        } else PDB.render.clearGroupIndex(PDB.GROUP_SURFACE), PDB.mode === PDB.MODE_VR ? PDB.tool.matchSurfaceAndMainGroupLocationForVR(PDB.GROUP[PDB.GROUP_SURFACE], PDB.GROUP[PDB.GROUP_MAIN]) : PDB.tool.backToInitialPositonForDesktop(), o.drawGeometry(e)
    }, changePDBIDInVrMode: function (e) {
        var r = this;
        "<--" == e ? PDB.pdbVrId.length > 0 && (PDB.pdbVrId = PDB.pdbVrId.substring(0, PDB.pdbVrId.length - 1)) : PDB.pdbVrId = PDB.pdbVrId + e, PDB.pdbVrId.length >= 5 && (PDB.pdbVrId = ""), console.log("showInput:" + PDB.pdbVrId), PDB.render.clearGroupIndex(PDB.GROUP_INPUT);
        var t = w3m.global.limit, a = t.x[1] + PDB.GeoCenterOffset.x, o = t.z[1] + PDB.GeoCenterOffset.z,
            n = new THREE.Vector3(.02 * a + 1.2, 1.5, .02 * o);
        PDB.painter.drawTextKB(PDB.GROUP_INPUT, n, "PDB: " + PDB.pdbVrId, PDB.pdbVrId, 62277, 135), 4 == PDB.pdbVrId.length && r.requestRemote(PDB.pdbVrId)
    }, startRotation: function (e, r) {
        window.clearInterval(PDB.ROTATION_TASK_ID), PDB.ROTATION_DIRECTION = r, PDB.ROTATION_AXIS = e, PDB.ROTATION_START_FLAG = !0, PDB.ROTATION_TASK_ID = self.setInterval("PDB.painter.rotate()", 20)
    }, cancelRotation: function () {
        PDB.ROTATION_START_FLAG = !1, window.clearInterval(PDB.ROTATION_TASK_ID)
    }, startMotion: function (e, r) {
        window.clearInterval(PDB.MOVE_TASK_ID), PDB.MOVE_AXIS = e, PDB.MOVE_DIRECTION = r, 1 === PDB.MOVE_DIRECTION ? PDB.MOVE_TASK_ID = self.setInterval("PDB.painter.near()", 20) : 2 === PDB.MOVE_DIRECTION && (PDB.MOVE_TASK_ID = self.setInterval("PDB.painter.far()", 20))
    }, cancelMotion: function () {
        window.clearInterval(PDB.MOVE_TASK_ID)
    }
}, Partition = function (e, r) {
    var t = ["", "", ""], a = e.indexOf(r);
    return -1 == a ? t[0] = e : (t[0] = e.substr(0, a), t[1] = r, t[2] = e.substr(a + 1)), t
}, PDBMLparser.prototype.parse = function (e) {
    for (var r, t, a, o, n, i, s, l, c, d, m = e.documentElement, P = this.data["data_" + m.getAttribute("datablockName")] = {}, u = 0; u < m.childNodes.length; u++) if (o = m.childNodes[u], t = o.localName) for (t = t.substr(0, t.length - 8), r = P[t] = {}, a = o.childNodes.length > 3, l = 0, c = 0; c < o.childNodes.length; c++) if (n = o.childNodes[c], n.localName) {
        for (i = [], d = 0; d < n.attributes.length; d++) s = n.attributes.item(d), a ? (r.hasOwnProperty(s.localName) || (r[s.localName] = new Array(l)), r[s.localName].push(s.nodeValue), i.push(s.localName)) : r[s.localName] = [s.nodeValue];
        for (d = 0; d < n.childNodes.length; d++) s = n.childNodes[d], s.localName && (a ? (r.hasOwnProperty(s.localName) || (r[s.localName] = new Array(l)), r[s.localName].push(s.textContent), i.push(s.localName)) : r[s.localName] = [s.textContent]);
        if (a) for (d in r) -1 == i.indexOf(d) && r[d].push(null);
        l++
    }
}, _loop.prototype.addName = function (e) {
    var r = Partition(e, "."), t = this.parserObj.currentTarget[this.parserObj.currentTarget.length - 2];
    r[1] ? (t.hasOwnProperty(r[0]) || (t[r[0]] = {}), t[r[0]].hasOwnProperty(r[2]) || (t[r[0]][r[2]] = []), this.refList.push(t[r[0]][r[2]])) : (t.hasOwnProperty(r[0]) || (t[r[0]] = []), this.refList.push(t[r[0]])), this.length = this.refList.length
}, _loop.prototype.pushValue = function (e) {
    this.namesDefined = !0;
    var r = this.nextTarget();
    if ("stop_" == e) return this.stopPush();
    r.push(e)
}, _loop.prototype.nextTarget = function () {
    return this.refID = (this.refID + 1) % this.length, this.refList[this.refID]
}, _loop.prototype.stopPush = function () {
    this.refID = -1
}, CIFparser.prototype.parse = function (e) {
    for (var r, t, a = e.split("\n"), o = [], n = !1, i = 0; i < a.length; i++) t = a[i].substr(0, 1), r = a[i].trim(), ";" == t && (n ? this.setDataValue(o.join("\n")) : o = [], n = !n, r = r.substr(1).trim()), n ? o.push(r) : this.processContent(this.specialSplit(r))
}, CIFparser.prototype.specialSplit = function (e) {
    for (var r, t = [["", !1]], a = !1, o = e.length, n = 0, i = 0; i < o; i++) if (r = " " == e[i] || "\t" == e[i], "'" != e[i] && '"' != e[i] || 0 != i && " " != e[i - 1] && "\t" != e[i - 1] && i != o - 1 && " " != e[i + 1] && "\t" != e[i + 1]) if (!a && r && "" != t[n][0]) t.push(["", !1]), n++; else {
        if (!a && "#" == e[i]) break;
        r && !a || (t[n][0] += e[i], t[n][1] = a)
    } else a = !a;
    return "" == t[n][0] && t.pop(), t
}, CIFparser.prototype.processContent = function (e) {
    for (var r = 0; r < e.length; r++) "global_" != e[r][0] || e[r][0] ? "data_" != e[r][0].substr(0, 5) || e[r][1] ? "save_" != e[r][0].substr(0, 5) || e[r][1] ? "loop_" != e[r][0] || e[r][1] ? "_" != e[r][0].substr(0, 1) || e[r][1] ? this.setDataValue(e[r][0]) : this.setDataName(e[r][0].substr(1)) : this.loopPointer = new _loop(this) : (this.loopPointer = null, e[r][0].substr(5).length ? this.selectFrame(e[r][0]) : this.endFrame()) : (this.loopPointer = null, this.selectData(e[r][0])) : (this.loopPointer = null, this.selectGlobal())
}, CIFparser.prototype.setDataName = function (e) {
    if (null != this.loopPointer) {
        if (!this.loopPointer.namesDefined) return this.loopPointer.addName(e);
        this.loopPointer = null
    }
    var e = Partition(e, ".");
    this.currentTarget.pop(), e[1] ? (this.currentTarget[this.currentTarget.length - 1].hasOwnProperty(e[0]) || (this.currentTarget[this.currentTarget.length - 1][e[0]] = {}), this.currentTarget[this.currentTarget.length - 1][e[0]][e[2]] = "", this.currentTarget.push([this.currentTarget[this.currentTarget.length - 1][e[0]], e[2]])) : (this.currentTarget[this.currentTarget.length - 1][e[0]] = "", this.currentTarget.push([this.currentTarget[this.currentTarget.length - 1], e[0]]))
}, CIFparser.prototype.setDataValue = function (e) {
    if (null != this.loopPointer) this.loopPointer.pushValue(e); else {
        var r = this.currentTarget[this.currentTarget.length - 1];
        r[0][r[1]] = [e]
    }
}, CIFparser.prototype.selectGlobal = function () {
    this.currentTarget = [this.data, this.data, null]
}, CIFparser.prototype.selectData = function (e) {
    this.data.hasOwnProperty(e) || (this.data[e] = {}), this.currentTarget = [this.data, this.data[e], null]
}, CIFparser.prototype.selectFrame = function (e) {
    this.currentTarget[1].hasOwnProperty(e) || (this.currentTarget[1][e] = {}), this.currentTarget = this.currentTarget.slice(0, 2), this.currentTarget.push(this.currentTarget[1][e]), this.currentTarget.push(null)
}, CIFparser.prototype.endData = function () {
    this.currentTarget = this.currentTarget.slice(0, 2)
}, CIFparser.prototype.endFrame = function () {
    this.currentTarget = this.currentTarget.slice(0, 3)
}, String.form = function (e, r) {
    function t(e, t, o, n, i, s) {
        if ("%%" == e) return "%";
        if (void 0 !== r[++a]) {
            e = n ? parseInt(n.substr(1)) : void 0;
            var l, c = i ? parseInt(i.substr(1)) : void 0;
            switch (s) {
                case"s":
                    l = r[a];
                    break;
                case"c":
                    l = r[a][0];
                    break;
                case"f":
                    l = parseFloat(r[a]).toFixed(e);
                    break;
                case"p":
                    l = parseFloat(r[a]).toPrecision(e);
                    break;
                case"e":
                    l = parseFloat(r[a]).toExponential(e);
                    break;
                case"x":
                    l = parseInt(r[a]).toString(c || 16);
                    break;
                case"d":
                    l = parseFloat(parseInt(r[a], c || 10).toPrecision(e)).toFixed(0)
            }
            l = "object" == typeof l ? JSON.stringify(l) : l.toString(c);
            for (var d = parseInt(o), m = o && "0" == o[0] ? "0" : " "; l.length < d;) l = void 0 !== t ? l + m : m + l;
            return l
        }
    }

    var a = -1, o = /%(-)?(0?[0-9]+)?([.][0-9]+)?([#][0-9]+)?([scfpexd%])/g;
    return e.replace(o, t)
}, String.prototype.$ = function () {
    return String.form(this, Array.prototype.slice.call(arguments))
};
var EmMapParser;
EmMapParser = {
    getURLByType: function (e, r) {
        switch (r) {
            case"X-Ray":
                return "https://www.ebi.ac.uk/pdbe/coordinates/files/" + e.toLowerCase() + ".ccp4";
            case"X-Ray-desc":
                return "https://www.ebi.ac.uk/pdbe/entry/pdb/" + e.toLowerCase();
            case"ccp4":
                return "https://ipr.pdbj.org/edmap/ccp4/" + e.toLowerCase() + ".ccp4.gz";
            case"ccp4-local":
                return "http://localhost/ccp4/data/" + e.toLowerCase() + ".ccp4.gz";
            case"EM":
                return "https://ftp.wwpdb.org/pub/emdb/structures/EMD-" + e.toLowerCase() + "/map/emd_" + e.toLowerCase() + ".map.gz";
            case"EM-desc":
                return "https://www.ebi.ac.uk/pdbe/entry/emdb/EMD-" + e.toLowerCase();
            case"map-local":
                return "data/emd_" + e.toLowerCase() + ".map.gz"
        }
    }, loadMap: function (e, r, t) {
        var a = this, o = new XMLHttpRequest;
        o.onload = function () {
            if (200 == this.status) {
                var o = new Uint8Array(this.response);
                if ("X-Ray" != r) {
                    o = new Zlib.Gunzip(o).decompress()
                }
                var n = a.parseMap(o.buffer, e);
                t(n)
            } else PDB.pptShow || PDB.tool.printProgress("Error! Failed to load " + r + " map " + e)
        }, o.onprogress = function (t) {
            if (!PDB.pptShow && t.lengthComputable) {
                PDB.tool.setProgressBar(t.loaded, t.total);
                var a = Math.floor(t.loaded / t.total * 100) + "%", o = PDB.tool.toHumanByte(t.loaded),
                    n = PDB.tool.toHumanByte(t.total);
                PDB.tool.printProgress(r + " map: " + e + " loaded, size(" + o + "/" + n + ") " + a)
            }
        }, o.onloadstart = function (e) {
            PDB.pptShow || PDB.tool.setProgressBar(0, e.total)
        }, o.onloadend = function (e) {
            PDB.pptShow || PDB.tool.setProgressBar(e.loaded, e.total)
        }, o.onerror = function (r) {
            PDB.pptShow || (PDB.tool.progressBar.value = r.loaded, PDB.tool.printProgress("Error: EMD-" + e))
        };
        var n = a.getURLByType(e, r);
        PDB.pptShow && (n = SERVERURL + "/" + n), console.log(n), o.open("GET", n), o.responseType = "arraybuffer", o.send()
    }, loadMapFromFile: function (e, r, t) {
        var a = this;
        if ("gz" === r) {
            var o = new Zlib.Gunzip(new Uint8Array(e)), n = o.decompress(), i = a.parseMap(n.buffer, 200);
            t(i)
        } else if ("mrc" === r) {
            var i = a.parseMap(e, 200);
            t(i)
        }
    }, parseMap: function (e, r) {
        var t = new Date;
        header_int = new Int32Array(e, 0, 56), header_float = new Float32Array(e, 0, 56), map_header = {}, map_header.NC = header_int[0], map_header.NR = header_int[1], map_header.NS = header_int[2], map_header.NCSTART = header_int[4], map_header.NRSTART = header_int[5], map_header.NSSTART = header_int[6], map_header.NX = header_int[7], map_header.NY = header_int[8], map_header.NZ = header_int[9], map_header.a = header_float[10], map_header.b = header_float[11], map_header.c = header_float[12], map_header.alpha = header_float[13], map_header.beta = header_float[14], map_header.gamma = header_float[15], map_header.MAPC = header_int[16], map_header.MAPR = header_int[17], map_header.MAPS = header_int[18], map_header.min = header_float[19], map_header.max = header_float[20], map_header.mean = header_float[21], map_header.ISPG = header_int[22], map_header.NSYMBT = header_int[23], map_header.ARMS = header_float[54];
        var a = {};
        a.header = map_header;
        for (var o = new Float32Array(e, 1024 + map_header.NSYMBT, map_header.NC * map_header.NR * map_header.NS), n = new Array, i = 0; i < a.header.NS; i++) {
            n[i] = new Array;
            for (var s = 0; s < a.header.NR; s++) {
                n[i][s] = new Array;
                for (var l = 0; l < a.header.NC; l++) n[i][s][l] = o[i * a.header.NC * a.header.NR + s * a.header.NC + l]
            }
        }
        a.id = r, a.data = n, a.center = new THREE.Vector3(-a.header.NC / 2, -a.header.NR / 2, -a.header.NS / 2), a.threshold = (a.header.max - a.header.mean) / 2, a.slice = 0;
        var c = new Date;
        return console.log("times(ms):" + parseInt(c - t)), a
    }
};
var ProteinSurface = function (e) {
    var r, t, a, o, n, s, l, c, d, m, P, u, D, _, h, B, p, E = 128, f = 1.4, w = 1,
        g = [1.9, 1.88, 1.63, 1.48, 1.78, 1.2, 1.87, 1.96, 1.63, .74, 1.8, 1.48, 1.2], v = new Array(13),
        R = new Array(13),
        b = [[1, 0, 0], [-1, 0, 0], [0, 1, 0], [0, -1, 0], [0, 0, 1], [0, 0, -1], [1, 1, 0], [1, -1, 0], [-1, 1, 0], [-1, -1, 0], [1, 0, 1], [1, 0, -1], [-1, 0, 1], [-1, 0, -1], [0, 1, 1], [0, 1, -1], [0, -1, 1], [0, -1, -1], [1, 1, 1], [1, 1, -1], [1, -1, 1], [-1, 1, 1], [1, -1, -1], [-1, -1, 1], [-1, 1, -1], [-1, -1, -1]],
        O = function (e, r, t) {
            this.x = e, this.y = r, this.z = t
        }, T = function (e, r, t) {
            this.a = e, this.b = r, this.c = t
        };
    return this.initparm = function (e, i, c) {
        var d = 2.5;
        if (void 0 !== e && void 0 !== i) {
            m = e.x, D = i.x, P = e.y, _ = i.y, u = e.z, h = i.z, c ? (m -= d, P -= d, u -= d, D += d, _ += d, h += d) : (m -= 3.9, P -= 3.9, u -= 3.9, D += 3.9, _ += 3.9, h += 3.9), r = -m, t = -P, a = -u, w = D - m, _ - P > w && (w = _ - P), h - u > w && (w = h - u), w = (E - 1) / w, E = Math.floor(2 * E / w), w = 2;
            E > 180 && (sfthresh = 180 / E, E = Math.floor(180), w *= sfthresh), s = Math.ceil(w * (D - m)) + 1, n = Math.ceil(w * (_ - P)) + 1, o = Math.ceil(w * (h - u)) + 1, s > E && (s = E), n > E && (n = E), o > E && (o = E), this.boundingatom(c), cutRadis = f * w, l = new Array(s * n * o)
        }
    }, this.boundingatom = function (e) {
        for (var r, t, a, o = new Array(13), n = 0; 13 > n; ++n) for (o[n] = e ? (g[n] + f) * w + .5 : g[n] * w + .5, a = o[n] * o[n], R[n] = Math.floor(o[n]) + 1, v[n] = new Array(R[n] * R[n]), indx = 0, j = 0; j < R[n]; ++j) for (k = 0; k < R[n]; ++k) r = j * j + k * k, r > a ? v[n][indx] = -1 : (t = Math.sqrt(a - r), v[n][indx] = Math.floor(t)), indx++
    }, this.fillvoxels = function (e) {
        if (void 0 !== l) {
            for (var r = 0, t = l.length; t > r; ++r) l[r] = {
                inout: !1,
                isdone: !1,
                isbound: !1,
                distance: -1,
                atomid: -1
            };
            for (r in e) this.fillAtom(e[r], e);
            for (r = 0, t = l.length; t > r; ++r) l[r].inout && (l[r].isdone = !0);
            this.vp = l;
            for (var r = 0, t = l.length; t > r; ++r) l[r].inout && (l[r].isdone = !0)
        }
    }, this.fillAtom = function (e, c) {
        var d, m, P, u, D, _;
        d = Math.floor(.5 + w * (e.coord.x + r)), m = Math.floor(.5 + w * (e.coord.y + t)), P = Math.floor(.5 + w * (e.coord.z + a));
        var h = this.getAtomType(e), B = 0;
        for (i = 0; i < R[h]; ++i) for (j = 0; j < R[h]; ++j) {
            if (-1 != v[h][B]) for (ii = -1; ii < 2; ++ii) for (jj = -1; jj < 2; ++jj) for (kk = -1; kk < 2; ++kk) if (0 != ii && 0 != jj && 0 != kk) for (mi = ii * i, mk = kk * j, k = 0; k <= v[h][B]; ++k) if (mj = k * jj, si = d + mi, sj = m + mj, sk = P + mk, !(si < 0 || sj < 0 || sk < 0 || si >= s || sj >= n || sk >= o)) {
                var p = l[si * n * o + sj * o + sk];
                if (0 == p.inout) p.inout = !0, p.atomid = e.serial; else if (p.inout) {
                    var E = c[p.atomid];
                    u = Math.floor(.5 + w * (E.coord.x + r)), D = Math.floor(.5 + w * (E.coord.y + t)), _ = Math.floor(.5 + w * (E.coord.z + a)), mi * mi + mj * mj + mk * mk < u * u + D * D + _ * _ && (p.atomid = e.serial)
                }
            }
            B++
        }
    }, this.fillvoxelswaals = function (e) {
        for (var r = 0, t = l.length; t > r; ++r) l[r].isdone = !1;
        for (r in e) this.fillAtomWaals(e[r], e)
    }, this.fillAtomWaals = function (e, s) {
        var c, d, m, P, u, D, _ = 0;
        c = Math.floor(.5 + w * (e.coord.x + r)), d = Math.floor(.5 + w * (e.coord.y + t)), m = Math.floor(.5 + w * (e.coord.z + a));
        var h = this.getAtomType(e);
        for (i = 0; i < R[h]; ++i) for (j = 0; j < R[h]; ++j) {
            if (-1 != v[h][_]) for (ii = -1; ii < 2; ++ii) for (jj = -1; jj < 2; ++jj) for (kk = -1; kk < 2; ++kk) if (0 != ii && 0 != jj && 0 != kk) for (mi = ii * i, mk = kk * j, k = 0; k <= v[h][_]; ++k) if (mj = k * jj, si = c + mi, sj = d + mj, sk = m + mk, !(si < 0 || sj < 0 || sk < 0)) {
                var B = l[si * n * o + sj * o + sk];
                if (0 == B.isdone) B.isdone = !0, B.atomid = e.serial; else if (B.isdone) {
                    var p = s[B.atomid];
                    P = Math.floor(.5 + w * (p.coord.x + r)), u = Math.floor(.5 + w * (p.coord.y + t)), D = Math.floor(.5 + w * (p.coord.z + a)), mi * mi + mj * mj + mk * mk < P * P + u * u + D * D && (B.atomid = e.serial)
                }
            }
            _++
        }
    }, this.getAtomType = function (e) {
        var r = 10;
        return "CA" == e.name ? r = 0 : "C" == e.name ? r = 1 : "C" == e.elem ? r = 7 : "0" == e.name ? r = 3 : "O" == e.elem ? r = 11 : "N" == e.name ? r = 2 : "N" == e.elem ? r = 8 : "S" == e.elem ? r = 4 : "P" == e.elem ? r = 6 : "FE" == e.name ? r = 9 : "H" == e.name ? r = 5 : "H" == e.elem && (r = 12), r
    }, this.buildboundary = function () {
        for (l = this.vp, i = 0; i < s; ++i) for (j = 0; j < o; ++j) for (k = 0; k < n; ++k) {
            var e = l[i * n * o + k * o + j];
            if (e.inout) for (var r = !1, t = 0; !r && 26 > t;) {
                var a = i + b[t][0], c = j + b[t][2], d = k + b[t][1];
                a > -1 && s > a && d > -1 && n > d && c > -1 && o > c && !l[a * n * o + d * o + c].inout ? (e.isbound = !0, r = !0) : t++
            }
        }
    }, this.fastdistancemap = function () {
        var e, r;
        totalsurfacevox = 0, totalinnervox = 0;
        for (var t = new Array(s), a = 0; s > a; ++a) {
            for (var i = new Array(n), c = 0; n > c; ++c) {
                for (var d = new Array(o), m = 0; o > m; ++m) d[m] = {ix: 0, iy: 0, iz: 0};
                i[c] = d
            }
            t[a] = i
        }
        for (a = 0; s > a; ++a) for (c = 0; n > c; ++c) for (m = 0; o > m; ++m) {
            var P = l[a * n * o + c * o + m];
            P.isdone = !1, P.inout && (P.isbound ? (totalsurfacevox++, t[a][c][m].ix = a, t[a][c][m].iy = c, t[a][c][m].iz = m, P.distance = 0, P.isdone = !0) : totalinnervox++)
        }
        inarray = new Array, outarray = new Array;
        var e = 0, r = 0;
        for (a = 0; s > a; ++a) for (c = 0; n > c; ++c) for (m = 0; o > m; ++m) {
            var P = l[a * n * o + c * o + m];
            P.isbound && (inarray.push({ix: a, iy: c, iz: m}), e++, P.isbound = !1)
        }
        do {
            for (r = this.fastoneshell(e, t), e = 0, inarray = [], a = 0; r > a; ++a) {
                var u = l[n * o * outarray[a].ix + o * outarray[a].iy + outarray[a].iz];
                u.isbound = !1, u.distance <= 1.02 * cutRadis && (inarray.push({
                    ix: outarray[a].ix,
                    iy: outarray[a].iy,
                    iz: outarray[a].iz
                }), e++)
            }
        } while (0 != e);
        var D = w - .5;
        for (0 > D && (D = 0), a = 0; s > a; ++a) for (c = 0; n > c; ++c) for (m = 0; o > m; ++m) {
            var P = l[a * n * o + c * o + m];
            P.isbound = !1, P.inout && (!P.isdone || P.isdone && P.distance >= cutRadis - .5 / (.1 + D)) && (P.isbound = !0)
        }
        inarray = [], outarray = []
    }, this.fastoneshell = function (e, r) {
        var t, a, i, c, d, m, P, u = 0;
        if (0 == e) return 0;
        outarray = [], tnv = {ix: -1, iy: -1, iz: -1};
        for (var D = 0; e > D; ++D) {
            t = inarray[D].ix, a = inarray[D].iy, i = inarray[D].iz;
            for (var _ = 0; 6 > _; ++_) {
                tnv.ix = t + b[_][0], tnv.iy = a + b[_][1], tnv.iz = i + b[_][2];
                var h = l[tnv.ix * n * o + o * tnv.iy + tnv.iz];
                if (tnv.ix < s && tnv.ix > -1 && tnv.iy < n && tnv.iy > -1 && tnv.iz < o && tnv.iz > -1 && h.inout && !h.isdone) {
                    r[tnv.ix][tnv.iy][i + b[_][2]].ix = r[t][a][i].ix, r[tnv.ix][tnv.iy][i + b[_][2]].iy = r[t][a][i].iy, r[tnv.ix][tnv.iy][i + b[_][2]].iz = r[t][a][i].iz, c = tnv.ix - r[t][a][i].ix, d = tnv.iy - r[t][a][i].iy, m = tnv.iz - r[t][a][i].iz;
                    var P = c * c + d * d + m * m;
                    h.distance = Math.sqrt(P), h.isdone = !0, h.isbound = !0, outarray.push({
                        ix: tnv.ix,
                        iy: tnv.iy,
                        iz: tnv.iz
                    }), u++
                } else tnv.ix < s && tnv.ix > -1 && tnv.iy < n && tnv.iy > -1 && tnv.iz < o && tnv.iz > -1 && h.inout && h.isdone && (c = tnv.ix - r[t][a][i].ix, d = tnv.iy - r[t][a][i].iy, m = tnv.iz - r[t][a][i].iz, P = c * c + d * d + m * m, (P = Math.sqrt(P)) < h.distance && (r[tnv.ix][tnv.iy][tnv.iz].ix = r[t][a][i].ix, r[tnv.ix][tnv.iy][tnv.iz].iy = r[t][a][i].iy, r[tnv.ix][tnv.iy][tnv.iz].iz = r[t][a][i].iz, h.distance = P, h.isbound || (h.isbound = !0, outarray.push({
                    ix: tnv.ix,
                    iy: tnv.iy,
                    iz: tnv.iz
                }), u++)))
            }
        }
        for (D = 0; e > D; ++D) for (t = inarray[D].ix, a = inarray[D].iy, i = inarray[D].iz, _ = 6; 18 > _; ++_) {
            tnv.ix = t + b[_][0], tnv.iy = a + b[_][1], tnv.iz = i + b[_][2]
            ;var h = l[tnv.ix * n * o + o * tnv.iy + tnv.iz];
            tnv.ix < s && tnv.ix > -1 && tnv.iy < n && tnv.iy > -1 && tnv.iz < o && tnv.iz > -1 && h.inout && !h.isdone ? (r[tnv.ix][tnv.iy][i + b[_][2]].ix = r[t][a][i].ix, r[tnv.ix][tnv.iy][i + b[_][2]].iy = r[t][a][i].iy, r[tnv.ix][tnv.iy][i + b[_][2]].iz = r[t][a][i].iz, c = tnv.ix - r[t][a][i].ix, d = tnv.iy - r[t][a][i].iy, m = tnv.iz - r[t][a][i].iz, P = c * c + d * d + m * m, h.distance = Math.sqrt(P), h.isdone = !0, h.isbound = !0, outarray.push({
                ix: tnv.ix,
                iy: tnv.iy,
                iz: tnv.iz
            }), u++) : tnv.ix < s && tnv.ix > -1 && tnv.iy < n && tnv.iy > -1 && tnv.iz < o && tnv.iz > -1 && h.inout && h.isdone && (c = tnv.ix - r[t][a][i].ix, d = tnv.iy - r[t][a][i].iy, m = tnv.iz - r[t][a][i].iz, (P = Math.sqrt(c * c + d * d + m * m)) < h.distance && (r[tnv.ix][tnv.iy][tnv.iz].ix = r[t][a][i].ix, r[tnv.ix][tnv.iy][tnv.iz].iy = r[t][a][i].iy, r[tnv.ix][tnv.iy][tnv.iz].iz = r[t][a][i].iz, h.distance = P, h.isbound || (h.isbound = !0, outarray.push({
                ix: tnv.ix,
                iy: tnv.iy,
                iz: tnv.iz
            }), u++)))
        }
        for (D = 0; e > D; ++D) for (t = inarray[D].ix, a = inarray[D].iy, i = inarray[D].iz, _ = 18; 26 > _; ++_) {
            tnv.ix = t + b[_][0], tnv.iy = a + b[_][1], tnv.iz = i + b[_][2];
            var h = l[tnv.ix * n * o + o * tnv.iy + tnv.iz];
            tnv.ix < s && tnv.ix > -1 && tnv.iy < n && tnv.iy > -1 && tnv.iz < o && tnv.iz > -1 && h.inout && !h.isdone ? (r[tnv.ix][tnv.iy][i + b[_][2]].ix = r[t][a][i].ix, r[tnv.ix][tnv.iy][i + b[_][2]].iy = r[t][a][i].iy, r[tnv.ix][tnv.iy][i + b[_][2]].iz = r[t][a][i].iz, c = tnv.ix - r[t][a][i].ix, d = tnv.iy - r[t][a][i].iy, m = tnv.iz - r[t][a][i].iz, P = c * c + d * d + m * m, h.distance = Math.sqrt(P), h.isdone = !0, h.isbound = !0, outarray.push({
                ix: tnv.ix,
                iy: tnv.iy,
                iz: tnv.iz
            }), u++) : tnv.ix < s && tnv.ix > -1 && tnv.iy < n && tnv.iy > -1 && tnv.iz < o && tnv.iz > -1 && h.inout && h.isdone && (c = tnv.ix - r[t][a][i].ix, d = tnv.iy - r[t][a][i].iy, m = tnv.iz - r[t][a][i].iz, (P = Math.sqrt(c * c + d * d + m * m)) < h.distance && (r[tnv.ix][tnv.iy][tnv.iz].ix = r[t][a][i].ix, r[tnv.ix][tnv.iy][tnv.iz].iy = r[t][a][i].iy, r[tnv.ix][tnv.iy][tnv.iz].iz = r[t][a][i].iz, h.distance = P, h.isbound || (h.isbound = !0, outarray.push({
                ix: tnv.ix,
                iy: tnv.iy,
                iz: tnv.iz
            }), u++)))
        }
        return u
    }, this.marchingcube = function (e) {
        if (void 0 !== l) {
            for (var r = 0, t = l.length; t > r; ++r) 1 == e ? l[r].isbound = !1 : 4 == e ? (l[r].isdone = !1, l[r].isbound && (l[r].isdone = !0), l[r].isbound = !1) : 2 == e ? l[r].isbound && l[r].isdone ? l[r].isbound = !1 : l[r].isbound && !l[r].isdone && (l[r].isdone = !0) : 3 == e && (l[r].isbound = !1);
            for (var a = new Array(s), r = 0; s > r; ++r) {
                for (var i = new Array(n), m = 0; n > m; ++m) {
                    for (var P = new Array(o), u = 0; o > u; ++u) P[u] = -1;
                    i[m] = P
                }
                a[r] = i
            }
            c = 0, d = 0, p = new Array, B = new Array;
            for (var D, _, h, E, f = new Array(6), r = 0; 6 > r; ++r) f[r] = new Array(3);
            for (r = 0; 1 > r; ++r) for (m = 0; n - 1 > m; ++m) for (u = 0; o - 1 > u; ++u) {
                var w = l[n * o * r + o * m + u].isdone, g = l[n * o * r + o * m + u + 1].isdone,
                    v = l[n * o * r + o * (m + 1) + u].isdone, R = l[n * o * r + o * (m + 1) + u + 1].isdone,
                    b = l[n * o * (r + 1) + o * m + u].isdone, M = l[n * o * (r + 1) + o * m + u + 1].isdone,
                    I = l[n * o * (r + 1) + o * (m + 1) + u].isdone,
                    A = l[n * o * (r + 1) + o * (m + 1) + u + 1].isdone;
                if (w && v && R && g) {
                    for (f[0][0] = r, f[0][1] = m, f[0][2] = u, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u + 1, f[3][0] = r, f[3][1] = m, f[3][2] = u + 1, _ = 0; 4 > _; ++_) -1 == a[f[_][0]][f[_][1]][f[_][2]] && (a[f[_][0]][f[_][1]][f[_][2]] = c, p.push(new O(f[_][0], f[_][1], f[_][2])), c++);
                    B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[2][0]][f[2][1]][f[2][2]], a[f[1][0]][f[1][1]][f[1][2]])), d++, B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[3][0]][f[3][1]][f[3][2]], a[f[2][0]][f[2][1]][f[2][2]])), d++
                } else if (w && v && R || v && R && g || R && g && w || g && w && v) {
                    for (w && v && R ? (f[0][0] = r, f[0][1] = m, f[0][2] = u, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u + 1) : v && R && g ? (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u + 1, f[2][0] = r, f[2][1] = m, f[2][2] = u + 1) : R && g && w ? (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m, f[1][2] = u + 1, f[2][0] = r, f[2][1] = m, f[2][2] = u) : g && w && v && (f[0][0] = r, f[0][1] = m, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m, f[1][2] = u, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u), _ = 0; 3 > _; ++_) -1 == a[f[_][0]][f[_][1]][f[_][2]] && (a[f[_][0]][f[_][1]][f[_][2]] = c, p.push(new O(f[_][0], f[_][1], f[_][2])), c++);
                    B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[2][0]][f[2][1]][f[2][2]], a[f[1][0]][f[1][1]][f[1][2]])), d++
                }
            }
            for (r = 0; s - 1 > r; ++r) for (m = 0; 1 > m; ++m) for (u = 0; o - 1 > u; ++u) {
                var w = l[n * o * r + o * m + u].isdone, g = l[n * o * r + o * m + u + 1].isdone,
                    b = l[n * o * (r + 1) + o * m + u].isdone, M = l[n * o * (r + 1) + o * m + u + 1].isdone;
                if (w && b && M && g) {
                    for (f[0][0] = r, f[0][1] = m, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u + 1, f[3][0] = r, f[3][1] = m, f[3][2] = u + 1, _ = 0; 4 > _; ++_) -1 == a[f[_][0]][f[_][1]][f[_][2]] && (a[f[_][0]][f[_][1]][f[_][2]] = c, p.push(new O(f[_][0], f[_][1], f[_][2])), c++);
                    B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[1][0]][f[1][1]][f[1][2]], a[f[2][0]][f[2][1]][f[2][2]])), d++, B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[2][0]][f[2][1]][f[2][2]], a[f[3][0]][f[3][1]][f[3][2]])), d++
                } else if (w && b && M || b && M && g || M && g && w || g && w && b) {
                    for (w && b && M ? (f[0][0] = r, f[0][1] = m, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u + 1) : b && M && g ? (f[0][0] = r + 1, f[0][1] = m, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u + 1, f[2][0] = r, f[2][1] = m, f[2][2] = u + 1) : M && g && w ? (f[0][0] = r + 1, f[0][1] = m, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m, f[1][2] = u + 1, f[2][0] = r, f[2][1] = m, f[2][2] = u) : g && w && b && (f[0][0] = r, f[0][1] = m, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u), _ = 0; 3 > _; ++_) -1 == a[f[_][0]][f[_][1]][f[_][2]] && (a[f[_][0]][f[_][1]][f[_][2]] = c, p.push(new O(f[_][0], f[_][1], f[_][2])), c++);
                    B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[1][0]][f[1][1]][f[1][2]], a[f[2][0]][f[2][1]][f[2][2]])), d++
                }
            }
            for (r = 0; s - 1 > r; ++r) for (m = 0; n - 1 > m; ++m) for (u = 0; 1 > u; ++u) {
                var w = l[n * o * r + o * m + u].isdone, v = l[n * o * r + o * (m + 1) + u].isdone,
                    b = l[n * o * (r + 1) + o * m + u].isdone, I = l[n * o * (r + 1) + o * (m + 1) + u].isdone;
                if (w && b && I && v) {
                    for (f[0][0] = r, f[0][1] = m, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u, f[3][0] = r, f[3][1] = m + 1, f[3][2] = u, _ = 0; 4 > _; ++_) -1 == a[f[_][0]][f[_][1]][f[_][2]] && (a[f[_][0]][f[_][1]][f[_][2]] = c, p.push(new O(f[_][0], f[_][1], f[_][2])), c++);
                    B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[2][0]][f[2][1]][f[2][2]], a[f[1][0]][f[1][1]][f[1][2]])), d++, B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[3][0]][f[3][1]][f[3][2]], a[f[2][0]][f[2][1]][f[2][2]])), d++
                } else if (w && b && I || b && I && v || I && v && w || v && w && b) {
                    for (w && b && I ? (f[0][0] = r, f[0][1] = m, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u) : b && I && v ? (f[0][0] = r + 1, f[0][1] = m, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u) : I && v && w ? (f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r, f[2][1] = m, f[2][2] = u) : v && w && b && (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u, f[1][0] = r, f[1][1] = m, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u), _ = 0; 3 > _; ++_) -1 == a[f[_][0]][f[_][1]][f[_][2]] && (a[f[_][0]][f[_][1]][f[_][2]] = c, p.push(new O(f[_][0], f[_][1], f[_][2])), c++);
                    B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[2][0]][f[2][1]][f[2][2]], a[f[1][0]][f[1][1]][f[1][2]])), d++
                }
            }
            for (r = s - 1; s > r; ++r) for (m = 0; n - 1 > m; ++m) for (u = 0; o - 1 > u; ++u) {
                var w = l[n * o * r + o * m + u].isdone, g = l[n * o * r + o * m + u + 1].isdone,
                    v = l[n * o * r + o * (m + 1) + u].isdone, R = l[n * o * r + o * (m + 1) + u + 1].isdone;
                if (w && v && R && g) {
                    for (f[0][0] = r, f[0][1] = m, f[0][2] = u, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u + 1, f[3][0] = r, f[3][1] = m, f[3][2] = u + 1, _ = 0; 4 > _; ++_) -1 == a[f[_][0]][f[_][1]][f[_][2]] && (a[f[_][0]][f[_][1]][f[_][2]] = c, p.push(new O(f[_][0], f[_][1], f[_][2])), c++);
                    B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[1][0]][f[1][1]][f[1][2]], a[f[2][0]][f[2][1]][f[2][2]])), d++, B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[2][0]][f[2][1]][f[2][2]], a[f[3][0]][f[3][1]][f[3][2]])), d++
                } else if (w && v && R || v && R && g || R && g && w || g && w && v) {
                    for (w && v && R ? (f[0][0] = r, f[0][1] = m, f[0][2] = u, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u + 1) : v && R && g ? (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u + 1, f[2][0] = r, f[2][1] = m, f[2][2] = u + 1) : R && g && w ? (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m, f[1][2] = u + 1, f[2][0] = r, f[2][1] = m, f[2][2] = u) : g && w && v && (f[0][0] = r, f[0][1] = m, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m, f[1][2] = u, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u), _ = 0; 3 > _; ++_) -1 == a[f[_][0]][f[_][1]][f[_][2]] && (a[f[_][0]][f[_][1]][f[_][2]] = c, p.push(new O(f[_][0], f[_][1], f[_][2])), c++);
                    B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[1][0]][f[1][1]][f[1][2]], a[f[2][0]][f[2][1]][f[2][2]])), d++
                }
            }
            for (r = 0; s - 1 > r; ++r) for (m = n - 1; n > m; ++m) for (u = 0; o - 1 > u; ++u) {
                var w = l[n * o * r + o * m + u].isdone, g = l[n * o * r + o * m + u + 1].isdone,
                    b = l[n * o * (r + 1) + o * m + u].isdone, M = l[n * o * (r + 1) + o * m + u + 1].isdone;
                if (w && b && M && g) {
                    for (f[0][0] = r, f[0][1] = m, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u + 1, f[3][0] = r, f[3][1] = m, f[3][2] = u + 1, _ = 0; 4 > _; ++_) -1 == a[f[_][0]][f[_][1]][f[_][2]] && (a[f[_][0]][f[_][1]][f[_][2]] = c, p.push(new O(f[_][0], f[_][1], f[_][2])), c++);
                    B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[2][0]][f[2][1]][f[2][2]], a[f[1][0]][f[1][1]][f[1][2]])), d++, B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[3][0]][f[3][1]][f[3][2]], a[f[2][0]][f[2][1]][f[2][2]])), d++
                } else if (w && b && M || b && M && g || M && g && w || g && w && b) {
                    for (w && b && M ? (f[0][0] = r, f[0][1] = m, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u + 1) : b && M && g ? (f[0][0] = r + 1, f[0][1] = m, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u + 1, f[2][0] = r, f[2][1] = m, f[2][2] = u + 1) : M && g && w ? (f[0][0] = r + 1, f[0][1] = m, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m, f[1][2] = u + 1, f[2][0] = r, f[2][1] = m, f[2][2] = u) : g && w && b && (f[0][0] = r, f[0][1] = m, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u), _ = 0; 3 > _; ++_) -1 == a[f[_][0]][f[_][1]][f[_][2]] && (a[f[_][0]][f[_][1]][f[_][2]] = c, p.push(new O(f[_][0], f[_][1], f[_][2])), c++);
                    B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[2][0]][f[2][1]][f[2][2]], a[f[1][0]][f[1][1]][f[1][2]])), d++
                }
            }
            for (r = 0; s - 1 > r; ++r) for (m = 0; n - 1 > m; ++m) for (u = o - 1; o > u; ++u) {
                var w = l[n * o * r + o * m + u].isdone, v = l[n * o * r + o * (m + 1) + u].isdone,
                    b = l[n * o * (r + 1) + o * m + u].isdone, I = l[n * o * (r + 1) + o * (m + 1) + u].isdone;
                if (w && b && I && v) {
                    for (f[0][0] = r, f[0][1] = m, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u, f[3][0] = r, f[3][1] = m + 1, f[3][2] = u, _ = 0; 4 > _; ++_) -1 == a[f[_][0]][f[_][1]][f[_][2]] && (a[f[_][0]][f[_][1]][f[_][2]] = c, p.push(new O(f[_][0], f[_][1], f[_][2])), c++);
                    B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[1][0]][f[1][1]][f[1][2]], a[f[2][0]][f[2][1]][f[2][2]])), d++, B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[2][0]][f[2][1]][f[2][2]], a[f[3][0]][f[3][1]][f[3][2]])), d++
                } else if (w && b && I || b && I && v || I && v && w || v && w && b) {
                    for (w && b && I ? (f[0][0] = r, f[0][1] = m, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u) : b && I && v ? (f[0][0] = r + 1, f[0][1] = m, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u) : I && v && w ? (f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r, f[2][1] = m, f[2][2] = u) : v && w && b && (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u, f[1][0] = r, f[1][1] = m, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u), _ = 0; 3 > _; ++_) -1 == a[f[_][0]][f[_][1]][f[_][2]] && (a[f[_][0]][f[_][1]][f[_][2]] = c, p.push(new O(f[_][0], f[_][1], f[_][2])), c++);
                    B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[1][0]][f[1][1]][f[1][2]], a[f[2][0]][f[2][1]][f[2][2]])), d++
                }
            }
            for (r = 0; s - 1 > r; ++r) for (m = 0; n - 1 > m; ++m) for (u = 0; o - 1 > u; ++u) {
                var w = l[n * o * r + o * m + u].isdone, g = l[n * o * r + o * m + u + 1].isdone,
                    v = l[n * o * r + o * (m + 1) + u].isdone, R = l[n * o * r + o * (m + 1) + u + 1].isdone,
                    b = l[n * o * (r + 1) + o * m + u].isdone, M = l[n * o * (r + 1) + o * m + u + 1].isdone,
                    I = l[n * o * (r + 1) + o * (m + 1) + u].isdone,
                    A = l[n * o * (r + 1) + o * (m + 1) + u + 1].isdone, D = 0;
                for (_ = 0; 2 > _; ++_) for (h = 0; 2 > h; ++h) for (E = 0; 2 > E; ++E) l[n * o * (r + _) + o * (m + h) + u + E].isdone && D++;
                if (3 == D) {
                    if (w && b && I || w && v && I || v && b && I || w && v && b || g && M && A || g && R && A || R && M && A || g && R && M || w && b && M || b && M && g || w && M && g || w && b && g || I && b && A || I && M && A || b && M && A || I && b && M || I && v && R || v && R && A || I && R && A || I && v && A || w && v && g || w && g && R || g && v && R || w && v && R) {
                        for (w && b && I ? (f[0][0] = r, f[0][1] = m, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u) : w && v && I ? (f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r, f[2][1] = m, f[2][2] = u) : v && b && I ? (f[0][0] = r + 1, f[0][1] = m, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u) : w && v && b ? (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u, f[1][0] = r, f[1][1] = m, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u) : g && M && A ? (f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u + 1, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u + 1, f[2][0] = r, f[2][1] = m, f[2][2] = u + 1) : g && R && A ? (f[0][0] = r, f[0][1] = m, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u + 1, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u + 1) : R && M && A ? (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u + 1, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u + 1, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u + 1) : g && R && M ? (f[0][0] = r + 1, f[0][1] = m, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m, f[1][2] = u + 1, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u + 1) : w && b && M ? (f[0][0] = r + 1, f[0][1] = m, f[0][2] = u + 1, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u, f[2][0] = r, f[2][1] = m, f[2][2] = u) : b && M && g ? (f[0][0] = r, f[0][1] = m, f[0][2] = u + 1, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u + 1, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u) : w && M && g ? (f[0][0] = r, f[0][1] = m, f[0][2] = u, f[1][0] = r, f[1][1] = m, f[1][2] = u + 1, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u + 1) : w && b && g ? (f[0][0] = r + 1, f[0][1] = m, f[0][2] = u, f[1][0] = r, f[1][1] = m, f[1][2] = u, f[2][0] = r, f[2][1] = m, f[2][2] = u + 1) : I && b && A ? (f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u + 1, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u) : I && M && A ? (f[0][0] = r + 1, f[0][1] = m, f[0][2] = u + 1, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u + 1, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u) : b && M && A ? (f[0][0] = r + 1, f[0][1] = m, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u + 1, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u + 1) : I && b && M ? (f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u + 1) : I && v && R ? (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u) : v && R && A ? (f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u + 1, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u) : I && R && A ? (f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u + 1, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u + 1) : I && v && A ? (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u + 1) : w && v && g ? (f[0][0] = r, f[0][1] = m, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m, f[1][2] = u, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u) : w && g && R ? (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m, f[1][2] = u + 1, f[2][0] = r, f[2][1] = m, f[2][2] = u) : g && v && R ? (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u + 1, f[2][0] = r, f[2][1] = m, f[2][2] = u + 1) : w && v && R && (f[0][0] = r, f[0][1] = m, f[0][2] = u, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u + 1), _ = 0; 3 > _; ++_) -1 == a[f[_][0]][f[_][1]][f[_][2]] && (a[f[_][0]][f[_][1]][f[_][2]] = c, p.push(new O(f[_][0], f[_][1], f[_][2])), c++);
                        B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[1][0]][f[1][1]][f[1][2]], a[f[2][0]][f[2][1]][f[2][2]])), d++
                    }
                } else if (4 == D) {
                    if (w && b && I && v || g && M && A && R || w && b && M && g || I && b && M && A || I && v && R && A || w && v && g && R) {
                        for (w && b && I && v ? (f[0][0] = r, f[0][1] = m, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u, f[3][0] = r, f[3][1] = m + 1, f[3][2] = u) : g && M && A && R ? (f[0][0] = r, f[0][1] = m, f[0][2] = u + 1, f[3][0] = r + 1, f[3][1] = m, f[3][2] = u + 1, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u + 1, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u + 1) : w && b && M && g ? (f[0][0] = r, f[0][1] = m, f[0][2] = u, f[3][0] = r + 1, f[3][1] = m, f[3][2] = u, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u + 1, f[1][0] = r, f[1][1] = m, f[1][2] = u + 1) : I && b && M && A ? (f[0][0] = r + 1, f[0][1] = m, f[0][2] = u, f[3][0] = r + 1, f[3][1] = m + 1, f[3][2] = u, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u + 1, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u + 1) : I && v && R && A ? (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u + 1, f[3][0] = r, f[3][1] = m + 1, f[3][2] = u + 1) : w && v && g && R && (f[0][0] = r, f[0][1] = m, f[0][2] = u, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u + 1, f[3][0] = r, f[3][1] = m, f[3][2] = u + 1), _ = 0; 4 > _; ++_) -1 == a[f[_][0]][f[_][1]][f[_][2]] && (a[f[_][0]][f[_][1]][f[_][2]] = c, p.push(new O(f[_][0], f[_][1], f[_][2])), c++);
                        B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[1][0]][f[1][1]][f[1][2]], a[f[2][0]][f[2][1]][f[2][2]])), d++, B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[2][0]][f[2][1]][f[2][2]], a[f[3][0]][f[3][1]][f[3][2]])), d++
                    } else if (w && b && I && R || w && v && I && M || v && b && I && g || w && v && b && A || g && M && A && v || g && R && A && b || R && M && A && w || g && R && M && I || w && b && M && R || b && M && g && v || w && M && g && I || w && b && g && A || I && b && A && g || I && M && A && w || b && M && A && v || I && b && M && R || I && v && R && M || v && R && A && b || I && R && A && w || I && v && A && g || w && v && g && A || w && g && R && I || g && v && R && b || w && v && R && M) {
                        for (w && b && I && R ? (f[0][0] = r, f[0][1] = m, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u) : w && v && I && M ? (f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r, f[2][1] = m, f[2][2] = u) : v && b && I && g ? (f[0][0] = r + 1, f[0][1] = m, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u) : w && v && b && A ? (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u, f[1][0] = r, f[1][1] = m, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u) : g && M && A && v ? (f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u + 1, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u + 1, f[2][0] = r, f[2][1] = m, f[2][2] = u + 1) : g && R && A && b ? (f[0][0] = r, f[0][1] = m, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u + 1, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u + 1) : R && M && A && w ? (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u + 1, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u + 1, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u + 1) : g && R && M && I ? (f[0][0] = r + 1, f[0][1] = m, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m, f[1][2] = u + 1, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u + 1) : w && b && M && R ? (f[0][0] = r + 1, f[0][1] = m, f[0][2] = u + 1, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u, f[2][0] = r, f[2][1] = m, f[2][2] = u) : b && M && g && v ? (f[0][0] = r, f[0][1] = m, f[0][2] = u + 1, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u + 1, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u) : w && M && g && I ? (f[0][0] = r, f[0][1] = m, f[0][2] = u, f[1][0] = r, f[1][1] = m, f[1][2] = u + 1, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u + 1) : w && b && g && A ? (f[0][0] = r + 1, f[0][1] = m, f[0][2] = u, f[1][0] = r, f[1][1] = m, f[1][2] = u, f[2][0] = r, f[2][1] = m, f[2][2] = u + 1) : I && b && A && g ? (f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u + 1, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u) : I && M && A && w ? (f[0][0] = r + 1, f[0][1] = m, f[0][2] = u + 1, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u + 1, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u) : b && M && A && v ? (f[0][0] = r + 1, f[0][1] = m, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u + 1, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u + 1) : I && b && M && R ? (f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u + 1) : I && v && R && M ? (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u) : v && R && A && b ? (f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u + 1, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u) : I && R && A && w ? (f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u + 1, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u + 1) : I && v && A && g ? (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u + 1) : w && v && g && A ? (f[0][0] = r, f[0][1] = m, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m, f[1][2] = u, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u) : w && g && R && I ? (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m, f[1][2] = u + 1, f[2][0] = r, f[2][1] = m, f[2][2] = u) : g && v && R && b ? (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u + 1, f[2][0] = r, f[2][1] = m, f[2][2] = u + 1) : w && v && R && M && (f[0][0] = r, f[0][1] = m, f[0][2] = u, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u + 1), _ = 0; 3 > _; ++_) -1 == a[f[_][0]][f[_][1]][f[_][2]] && (a[f[_][0]][f[_][1]][f[_][2]] = c, p.push(new O(f[_][0], f[_][1], f[_][2])), c++);
                        B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[1][0]][f[1][1]][f[1][2]], a[f[2][0]][f[2][1]][f[2][2]])), d++
                    } else if (w && R && I && v || w && b && I && M || w && g && b && v || v && b && I && A || g && R && A && v || g && b && A && M || w && g && M && R || R && M && I && A) {
                        for (v && R && w && I ? (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u) : b && M && I && w ? (f[0][0] = r + 1, f[0][1] = m, f[0][2] = u + 1, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r, f[2][1] = m, f[2][2] = u) : w && g && b && v ? (f[0][0] = r, f[0][1] = m, f[0][2] = u + 1, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u) : I && A && v && b ? (f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u) : v && R && A && g ? (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u, f[2][0] = r, f[2][1] = m, f[2][2] = u + 1, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u + 1) : b && M && A && g ? (f[0][0] = r + 1, f[0][1] = m, f[0][2] = u, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u + 1, f[1][0] = r, f[1][1] = m, f[1][2] = u + 1) : w && g && M && R ? (f[0][0] = r, f[0][1] = m, f[0][2] = u, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u + 1, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u + 1) : R && M && I && A && (f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u + 1, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u + 1), _ = 0; 3 > _; ++_) -1 == a[f[_][0]][f[_][1]][f[_][2]] && (a[f[_][0]][f[_][1]][f[_][2]] = c, p.push(new O(f[_][0], f[_][1], f[_][2])), c++);
                        B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[1][0]][f[1][1]][f[1][2]], a[f[2][0]][f[2][1]][f[2][2]])), d++
                    } else if (w && b && I && g || v && b && I && M || v && w && I && A || v && w && b && R || R && g && M && b || A && g && M && I || A && R && M && v || A && R && g && w || I && R && g && v || M && w && g && v || M && w && A && b || R && I && A && b) {
                        for (w && b && I && g ? (f[0][0] = r + 1, f[0][1] = m, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r, f[2][1] = m, f[2][2] = u, f[3][0] = r, f[3][1] = m, f[3][2] = u + 1) : v && b && I && M ? (f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u, f[3][0] = r + 1, f[3][1] = m, f[3][2] = u + 1) : v && w && I && A ? (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u, f[1][0] = r, f[1][1] = m, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u, f[3][0] = r + 1, f[3][1] = m + 1, f[3][2] = u + 1) : v && w && b && R ? (f[0][0] = r, f[0][1] = m, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u, f[3][0] = r, f[3][1] = m + 1, f[3][2] = u + 1) : R && g && M && b ? (f[0][0] = r + 1, f[0][1] = m, f[0][2] = u + 1, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u, f[2][0] = r, f[2][1] = m, f[2][2] = u + 1, f[3][0] = r, f[3][1] = m + 1, f[3][2] = u + 1) : A && g && M && I ? (f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u + 1, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u + 1, f[3][0] = r, f[3][1] = m, f[3][2] = u + 1) : A && R && M && v ? (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u + 1, f[3][0] = r + 1, f[3][1] = m, f[3][2] = u + 1) : A && R && g && w ? (f[0][0] = r, f[0][1] = m, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m, f[1][2] = u, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u + 1, f[3][0] = r + 1, f[3][1] = m + 1, f[3][2] = u + 1) : I && R && g && v ? (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u + 1, f[3][0] = r, f[3][1] = m, f[3][2] = u + 1) : M && w && g && v ? (f[0][0] = r, f[0][1] = m, f[0][2] = u, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r, f[2][1] = m, f[2][2] = u + 1, f[3][0] = r + 1, f[3][1] = m, f[3][2] = u + 1) : M && w && A && b ? (f[0][0] = r + 1, f[0][1] = m, f[0][2] = u, f[1][0] = r, f[1][1] = m, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u + 1, f[3][0] = r + 1, f[3][1] = m + 1, f[3][2] = u + 1) : R && I && A && b && (f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u + 1, f[3][0] = r, f[3][1] = m + 1, f[3][2] = u + 1), _ = 0; 4 > _; ++_) -1 == a[f[_][0]][f[_][1]][f[_][2]] && (a[f[_][0]][f[_][1]][f[_][2]] = c, p.push(new O(f[_][0], f[_][1], f[_][2])), c++);
                        B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[1][0]][f[1][1]][f[1][2]], a[f[2][0]][f[2][1]][f[2][2]])), d++, B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[2][0]][f[2][1]][f[2][2]], a[f[3][0]][f[3][1]][f[3][2]])), d++
                    } else if (w && b && v && M || w && b && I && A || v && b && I && R || v && w && I && g || A && g && M && w || A && R && M && b || A && R && g && I || M && R && g && v || A && R && w && v || b && w && g && R || M && g && I && b || v && I && A && M) {
                        for (w && b && v && M ? (f[0][0] = r + 1, f[0][1] = m, f[0][2] = u, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r, f[2][1] = m, f[2][2] = u, f[3][0] = r + 1, f[3][1] = m, f[3][2] = u + 1) : w && b && I && A ? (f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u, f[1][0] = r, f[1][1] = m, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u, f[3][0] = r + 1, f[3][1] = m + 1, f[3][2] = u + 1) : v && b && I && R ? (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u, f[3][0] = r, f[3][1] = m + 1, f[3][2] = u + 1) : v && w && I && g ? (f[0][0] = r, f[0][1] = m, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u, f[3][0] = r, f[3][1] = m, f[3][2] = u + 1) : A && g && M && w ? (f[0][0] = r + 1, f[0][1] = m, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m, f[1][2] = u, f[2][0] = r, f[2][1] = m, f[2][2] = u + 1, f[3][0] = r + 1, f[3][1] = m + 1, f[3][2] = u + 1) : A && R && M && b ? (f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u + 1, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u + 1, f[3][0] = r, f[3][1] = m + 1, f[3][2] = u + 1) : A && R && g && I ? (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u + 1, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u + 1, f[3][0] = r, f[3][1] = m, f[3][2] = u + 1) : M && R && g && v ? (f[0][0] = r, f[0][1] = m, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u + 1, f[3][0] = r + 1, f[3][1] = m, f[3][2] = u + 1) : A && R && w && v ? (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u + 1, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u + 1, f[3][0] = r, f[3][1] = m, f[3][2] = u) : b && w && g && R ? (f[0][0] = r, f[0][1] = m, f[0][2] = u, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u + 1, f[2][0] = r, f[2][1] = m, f[2][2] = u + 1, f[3][0] = r + 1, f[3][1] = m, f[3][2] = u) : M && g && I && b ? (f[0][0] = r + 1, f[0][1] = m, f[0][2] = u, f[1][0] = r, f[1][1] = m, f[1][2] = u + 1, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u + 1, f[3][0] = r + 1, f[3][1] = m + 1, f[3][2] = u) : v && I && A && M && (f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u + 1, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u + 1, f[3][0] = r, f[3][1] = m + 1, f[3][2] = u), _ = 0; 4 > _; ++_) -1 == a[f[_][0]][f[_][1]][f[_][2]] && (a[f[_][0]][f[_][1]][f[_][2]] = c, p.push(new O(f[_][0], f[_][1], f[_][2])), c++);
                        B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[1][0]][f[1][1]][f[1][2]], a[f[2][0]][f[2][1]][f[2][2]])), d++, B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[2][0]][f[2][1]][f[2][2]], a[f[3][0]][f[3][1]][f[3][2]])), d++
                    }
                } else if (5 == D) if ((b || g || A) && (v || g || A) && (I || M || R) && (w || M || R) && (M || w || I) && (R || w || I) && (A || b || v) && (g || b || v)) if ((w || b || I) && (w || v || I) && (v || b || I) && (w || v || b) && (g || M || A) && (g || R || A) && (R || M || A) && (g || R || M) && (w || b || M) && (b || M || g) && (w || M || g) && (w || b || g) && (I || b || A) && (I || M || A) && (b || M || A) && (I || b || M) && (I || v || R) && (v || R || A) && (I || R || A) && (I || v || A) && (w || v || g) && (w || g || R) && (g || v || R) && (w || v || R)) if ((w || b || A) && (v || I || g) && (R || A || b) && (g || M || I) && (w || v || A) && (M || A || v) && (b || I || R) && (g || R || I) && (w || g || A) && (I || A || w) && (b || M || R) && (v || R || M)) {
                    if (!((w || b || R) && (v || I || M) && (R || A || w) && (g || M || v) && (w || v || M) && (M || A || w) && (b || I || g) && (g || R || b) && (w || g || I) && (I || A || g) && (b || M || v) && (v || R || b))) {
                        for (w || b || R ? v || I || M ? R || A || w ? g || M || v ? w || v || M ? M || A || w ? b || I || g ? g || R || b ? w || g || I ? I || A || g ? b || M || v ? v || R || b || (f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u, f[1][0] = r, f[1][1] = m, f[1][2] = u, f[2][0] = r, f[2][1] = m, f[2][2] = u + 1, f[3][0] = r + 1, f[3][1] = m + 1, f[3][2] = u + 1, f[4][0] = r + 1, f[4][1] = m, f[4][2] = u + 1) : (f[0][0] = r, f[0][1] = m, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u + 1, f[3][0] = r, f[3][1] = m, f[3][2] = u + 1, f[4][0] = r, f[4][1] = m + 1, f[4][2] = u + 1) : (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u + 1, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u + 1, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u, f[3][0] = r, f[3][1] = m + 1, f[3][2] = u, f[4][0] = r, f[4][1] = m, f[4][2] = u) : (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u + 1, f[3][0] = r, f[3][1] = m + 1, f[3][2] = u + 1, f[4][0] = r + 1, f[4][1] = m + 1, f[4][2] = u + 1) : (f[0][0] = r, f[0][1] = m, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u + 1, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u + 1, f[3][0] = r, f[3][1] = m + 1, f[3][2] = u, f[4][0] = r + 1, f[4][1] = m + 1, f[4][2] = u) : (f[0][0] = r + 1, f[0][1] = m, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m, f[1][2] = u, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u, f[3][0] = r + 1, f[3][1] = m + 1, f[3][2] = u + 1, f[4][0] = r, f[4][1] = m + 1, f[4][2] = u + 1) : (f[0][0] = r, f[0][1] = m, f[0][2] = u + 1, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u, f[3][0] = r, f[3][1] = m + 1, f[3][2] = u + 1, f[4][0] = r, f[4][1] = m + 1, f[4][2] = u) : (f[1][0] = r, f[1][1] = m, f[1][2] = u + 1, f[0][0] = r + 1, f[0][1] = m, f[0][2] = u, f[3][0] = r + 1, f[3][1] = m + 1, f[3][2] = u, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u + 1, f[4][0] = r + 1, f[4][1] = m + 1, f[4][2] = u + 1) : (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u, f[3][0] = r + 1, f[3][1] = m + 1, f[3][2] = u + 1, f[4][0] = r + 1, f[4][1] = m + 1, f[4][2] = u) : (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u, f[1][0] = r, f[1][1] = m, f[1][2] = u + 1, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u + 1, f[3][0] = r + 1, f[3][1] = m + 1, f[3][2] = u, f[4][0] = r + 1, f[4][1] = m, f[4][2] = u) : (f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u + 1, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u, f[2][0] = r, f[2][1] = m, f[2][2] = u, f[3][0] = r, f[3][1] = m + 1, f[3][2] = u + 1, f[4][0] = r, f[4][1] = m, f[4][2] = u + 1) : (f[0][0] = r, f[0][1] = m, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u, f[3][0] = r + 1, f[3][1] = m, f[3][2] = u + 1, f[4][0] = r + 1, f[4][1] = m + 1, f[4][2] = u + 1), _ = 0; 5 > _; ++_) -1 == a[f[_][0]][f[_][1]][f[_][2]] && (a[f[_][0]][f[_][1]][f[_][2]] = c, p.push(new O(f[_][0], f[_][1], f[_][2])), c++);
                        B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[1][0]][f[1][1]][f[1][2]], a[f[2][0]][f[2][1]][f[2][2]])), d++, B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[2][0]][f[2][1]][f[2][2]], a[f[3][0]][f[3][1]][f[3][2]])), d++, B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[4][0]][f[4][1]][f[4][2]], a[f[1][0]][f[1][1]][f[1][2]])), d++
                    }
                } else {
                    for (w || b || A ? v || I || g ? R || A || b ? g || M || I ? w || v || A ? M || A || v ? b || I || R ? g || R || I ? w || g || A ? I || A || w ? b || M || R ? v || R || M || (f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u, f[1][0] = r, f[1][1] = m, f[1][2] = u, f[2][0] = r, f[2][1] = m, f[2][2] = u + 1, f[3][0] = r + 1, f[3][1] = m + 1, f[3][2] = u + 1, f[4][0] = r + 1, f[4][1] = m, f[4][2] = u) : (f[0][0] = r, f[0][1] = m, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u + 1, f[3][0] = r, f[3][1] = m, f[3][2] = u + 1, f[4][0] = r, f[4][1] = m + 1, f[4][2] = u) : (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u + 1, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u + 1, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u, f[3][0] = r, f[3][1] = m + 1, f[3][2] = u, f[4][0] = r, f[4][1] = m, f[4][2] = u + 1) : (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u + 1, f[3][0] = r, f[3][1] = m + 1, f[3][2] = u + 1, f[4][0] = r + 1, f[4][1] = m + 1, f[4][2] = u) : (f[0][0] = r, f[0][1] = m, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u + 1, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u + 1, f[3][0] = r, f[3][1] = m + 1, f[3][2] = u, f[4][0] = r + 1, f[4][1] = m, f[4][2] = u) : (f[0][0] = r + 1, f[0][1] = m, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m, f[1][2] = u, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u, f[3][0] = r + 1, f[3][1] = m + 1, f[3][2] = u + 1, f[4][0] = r, f[4][1] = m, f[4][2] = u + 1) : (f[0][0] = r, f[0][1] = m, f[0][2] = u + 1, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u, f[3][0] = r, f[3][1] = m + 1, f[3][2] = u + 1, f[4][0] = r, f[4][1] = m, f[4][2] = u) : (f[1][0] = r, f[1][1] = m, f[1][2] = u + 1, f[0][0] = r + 1, f[0][1] = m, f[0][2] = u, f[3][0] = r + 1, f[3][1] = m + 1, f[3][2] = u, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u + 1, f[4][0] = r + 1, f[4][1] = m, f[4][2] = u + 1) : (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u, f[3][0] = r + 1, f[3][1] = m + 1, f[3][2] = u + 1, f[4][0] = r, f[4][1] = m + 1, f[4][2] = u) : (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u, f[1][0] = r, f[1][1] = m, f[1][2] = u + 1, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u + 1, f[3][0] = r + 1, f[3][1] = m + 1, f[3][2] = u, f[4][0] = r, f[4][1] = m, f[4][2] = u) : (f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u + 1, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u, f[2][0] = r, f[2][1] = m, f[2][2] = u, f[3][0] = r, f[3][1] = m + 1, f[3][2] = u + 1, f[4][0] = r + 1, f[4][1] = m, f[4][2] = u + 1) : (f[0][0] = r, f[0][1] = m, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u, f[3][0] = r + 1, f[3][1] = m, f[3][2] = u + 1, f[4][0] = r, f[4][1] = m + 1, f[4][2] = u + 1), _ = 0; 5 > _; ++_) -1 == a[f[_][0]][f[_][1]][f[_][2]] && (a[f[_][0]][f[_][1]][f[_][2]] = c, p.push(new O(f[_][0], f[_][1], f[_][2])), c++);
                    B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[1][0]][f[1][1]][f[1][2]], a[f[2][0]][f[2][1]][f[2][2]])), d++, B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[2][0]][f[2][1]][f[2][2]], a[f[3][0]][f[3][1]][f[3][2]])), d++, B.push(new T(a[f[2][0]][f[2][1]][f[2][2]], a[f[4][0]][f[4][1]][f[4][2]], a[f[3][0]][f[3][1]][f[3][2]])), d++
                } else {
                    for (w || b || I ? w || v || I ? v || b || I ? w || v || b ? g || M || A ? g || R || A ? R || M || A ? g || R || M ? w || b || M ? b || M || g ? w || M || g ? w || b || g ? I || b || A ? I || M || A ? b || M || A ? I || b || M ? I || v || R ? v || R || A ? I || R || A ? I || v || A ? w || v || g ? w || g || R ? g || v || R ? w || v || R || (f[2][0] = r + 1, f[2][1] = m, f[2][2] = u, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u, f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u + 1, f[3][0] = r, f[3][1] = m, f[3][2] = u + 1) : (f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u + 1, f[0][0] = r + 1, f[0][1] = m, f[0][2] = u + 1, f[3][0] = r, f[3][1] = m, f[3][2] = u) : (f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u + 1, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u + 1, f[0][0] = r + 1, f[0][1] = m, f[0][2] = u, f[3][0] = r, f[3][1] = m + 1, f[3][2] = u) : (f[2][0] = r + 1, f[2][1] = m, f[2][2] = u + 1, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u, f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u, f[3][0] = r, f[3][1] = m + 1, f[3][2] = u + 1) : (f[2][0] = r, f[2][1] = m, f[2][2] = u, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u, f[0][0] = r + 1, f[0][1] = m, f[0][2] = u + 1, f[3][0] = r, f[3][1] = m + 1, f[3][2] = u + 1) : (f[2][0] = r + 1, f[2][1] = m, f[2][2] = u, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u + 1, f[0][0] = r, f[0][1] = m, f[0][2] = u + 1, f[3][0] = r, f[3][1] = m + 1, f[3][2] = u) : (f[2][0] = r + 1, f[2][1] = m, f[2][2] = u + 1, f[1][0] = r, f[1][1] = m, f[1][2] = u + 1, f[0][0] = r, f[0][1] = m, f[0][2] = u, f[3][0] = r + 1, f[3][1] = m + 1, f[3][2] = u) : (f[2][0] = r, f[2][1] = m, f[2][2] = u + 1, f[1][0] = r, f[1][1] = m, f[1][2] = u, f[0][0] = r + 1, f[0][1] = m, f[0][2] = u, f[3][0] = r + 1, f[3][1] = m + 1, f[3][2] = u + 1) : (f[2][0] = r, f[2][1] = m + 1, f[2][2] = u, f[1][0] = r, f[1][1] = m, f[1][2] = u, f[0][0] = r, f[0][1] = m, f[0][2] = u + 1, f[3][0] = r + 1, f[3][1] = m + 1, f[3][2] = u + 1) : (f[2][0] = r, f[2][1] = m, f[2][2] = u, f[1][0] = r, f[1][1] = m, f[1][2] = u + 1, f[0][0] = r, f[0][1] = m + 1, f[0][2] = u + 1, f[3][0] = r + 1, f[3][1] = m + 1, f[3][2] = u) : (f[2][0] = r, f[2][1] = m, f[2][2] = u + 1, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u + 1, f[0][0] = r, f[0][1] = m + 1, f[0][2] = u, f[3][0] = r + 1, f[3][1] = m, f[3][2] = u) : (f[2][0] = r, f[2][1] = m + 1, f[2][2] = u + 1, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u, f[0][0] = r, f[0][1] = m, f[0][2] = u, f[3][0] = r + 1, f[3][1] = m, f[3][2] = u + 1) : (f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u, f[0][0] = r, f[0][1] = m + 1, f[0][2] = u + 1, f[3][0] = r + 1, f[3][1] = m, f[3][2] = u + 1) : (f[2][0] = r, f[2][1] = m + 1, f[2][2] = u, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u + 1,
                        f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u + 1, f[3][0] = r + 1, f[3][1] = m, f[3][2] = u) : (f[2][0] = r, f[2][1] = m + 1, f[2][2] = u + 1, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u + 1, f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u, f[3][0] = r, f[3][1] = m, f[3][2] = u) : (f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u + 1, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u, f[0][0] = r, f[0][1] = m + 1, f[0][2] = u, f[3][0] = r, f[3][1] = m, f[3][2] = u + 1) : (f[2][0] = r + 1, f[2][1] = m, f[2][2] = u, f[1][0] = r, f[1][1] = m, f[1][2] = u, f[0][0] = r, f[0][1] = m + 1, f[0][2] = u, f[3][0] = r + 1, f[3][1] = m + 1, f[3][2] = u + 1) : (f[2][0] = r, f[2][1] = m + 1, f[2][2] = u, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u, f[0][0] = r + 1, f[0][1] = m, f[0][2] = u, f[3][0] = r, f[3][1] = m, f[3][2] = u + 1) : (f[2][0] = r, f[2][1] = m, f[2][2] = u, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u, f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u, f[3][0] = r + 1, f[3][1] = m, f[3][2] = u + 1) : (f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u, f[0][0] = r, f[0][1] = m, f[0][2] = u, f[3][0] = r, f[3][1] = m + 1, f[3][2] = u + 1) : (f[2][0] = r, f[2][1] = m + 1, f[2][2] = u + 1, f[1][0] = r, f[1][1] = m, f[1][2] = u + 1, f[0][0] = r + 1, f[0][1] = m, f[0][2] = u + 1, f[3][0] = r + 1, f[3][1] = m + 1, f[3][2] = u) : (f[2][0] = r + 1, f[2][1] = m, f[2][2] = u + 1, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u + 1, f[0][0] = r, f[0][1] = m + 1, f[0][2] = u + 1, f[3][0] = r, f[3][1] = m, f[3][2] = u) : (f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u + 1, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u + 1, f[0][0] = r, f[0][1] = m, f[0][2] = u + 1, f[3][0] = r + 1, f[3][1] = m, f[3][2] = u) : (f[2][0] = r, f[2][1] = m, f[2][2] = u + 1, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u + 1, f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u + 1, f[3][0] = r, f[3][1] = m + 1, f[3][2] = u), _ = 0; 4 > _; ++_) -1 == a[f[_][0]][f[_][1]][f[_][2]] && (a[f[_][0]][f[_][1]][f[_][2]] = c, p.push(new O(f[_][0], f[_][1], f[_][2])), c++);
                    B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[1][0]][f[1][1]][f[1][2]], a[f[2][0]][f[2][1]][f[2][2]])), d++, B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[2][0]][f[2][1]][f[2][2]], a[f[3][0]][f[3][1]][f[3][2]])), d++
                } else {
                    for (b || g || A ? v || g || A ? I || M || R ? w || M || R ? M || w || I ? R || w || I ? A || b || v ? g || b || v || (f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u + 1, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u + 1) : (f[0][0] = r, f[0][1] = m, f[0][2] = u, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u + 1, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u + 1) : (f[0][0] = r + 1, f[0][1] = m, f[0][2] = u, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u + 1, f[1][0] = r, f[1][1] = m, f[1][2] = u + 1) : (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u, f[2][0] = r, f[2][1] = m, f[2][2] = u + 1, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u + 1) : (f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u) : (f[0][0] = r, f[0][1] = m, f[0][2] = u + 1, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u) : (f[0][0] = r + 1, f[0][1] = m, f[0][2] = u + 1, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r, f[2][1] = m, f[2][2] = u) : (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u), _ = 0; 3 > _; ++_) -1 == a[f[_][0]][f[_][1]][f[_][2]] && (a[f[_][0]][f[_][1]][f[_][2]] = c, p.push(new O(f[_][0], f[_][1], f[_][2])), c++);
                    B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[1][0]][f[1][1]][f[1][2]], a[f[2][0]][f[2][1]][f[2][2]])), d++
                } else if (6 == D) {
                    if (!w && !b || !v && !I || !R && !A || !g && !M || !w && !v || !M && !A || !b && !I || !g && !R || !w && !g || !I && !A || !b && !M || !v && !R) {
                        for (w || b ? v || I ? R || A ? g || M ? w || v ? M || A ? b || I ? g || R ? w || g ? I || A ? b || M ? v || R || (f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u + 1, f[3][0] = r, f[3][1] = m, f[3][2] = u + 1, f[2][0] = r, f[2][1] = m, f[2][2] = u, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u) : (f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m, f[1][2] = u + 1, f[2][0] = r, f[2][1] = m, f[2][2] = u, f[3][0] = r + 1, f[3][1] = m + 1, f[3][2] = u) : (f[0][0] = r + 1, f[0][1] = m, f[0][2] = u + 1, f[3][0] = r, f[3][1] = m + 1, f[3][2] = u + 1, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u) : (f[0][0] = r + 1, f[0][1] = m, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u + 1, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u, f[3][0] = r + 1, f[3][1] = m, f[3][2] = u) : (f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u + 1, f[3][0] = r + 1, f[3][1] = m, f[3][2] = u + 1, f[2][0] = r, f[2][1] = m, f[2][2] = u, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u) : (f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u + 1, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u + 1, f[2][0] = r, f[2][1] = m, f[2][2] = u, f[3][0] = r, f[3][1] = m + 1, f[3][2] = u) : (f[0][0] = r, f[0][1] = m, f[0][2] = u + 1, f[3][0] = r, f[3][1] = m + 1, f[3][2] = u + 1, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u) : (f[0][0] = r, f[0][1] = m, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u + 1, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u, f[3][0] = r + 1, f[3][1] = m, f[3][2] = u) : (f[0][0] = r, f[0][1] = m, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u + 1, f[3][0] = r, f[3][1] = m + 1, f[3][2] = u + 1) : (f[0][0] = r, f[0][1] = m, f[0][2] = u + 1, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u + 1, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u, f[3][0] = r, f[3][1] = m + 1, f[3][2] = u) : (f[0][0] = r, f[0][1] = m, f[0][2] = u, f[3][0] = r + 1, f[3][1] = m, f[3][2] = u, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u + 1, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u + 1) : (f[0][0] = r, f[0][1] = m, f[0][2] = u + 1, f[3][0] = r + 1, f[3][1] = m, f[3][2] = u + 1, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u), _ = 0; 4 > _; ++_) -1 == a[f[_][0]][f[_][1]][f[_][2]] && (a[f[_][0]][f[_][1]][f[_][2]] = c, p.push(new O(f[_][0], f[_][1], f[_][2])), c++);
                        B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[1][0]][f[1][1]][f[1][2]], a[f[2][0]][f[2][1]][f[2][2]])), d++, B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[2][0]][f[2][1]][f[2][2]], a[f[3][0]][f[3][1]][f[3][2]])), d++
                    } else if (!w && !A || !b && !R || !v && !M || !I && !g) {
                        for (w || A ? b || R ? v || M ? I || g || (f[0][0] = r + 1, f[0][1] = m, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u + 1, f[2][0] = r, f[2][1] = m, f[2][2] = u, f[3][0] = r + 1, f[3][1] = m + 1, f[3][2] = u + 1, f[4][0] = r + 1, f[4][1] = m, f[4][2] = u, f[5][0] = r, f[5][1] = m + 1, f[5][2] = u) : (f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m, f[1][2] = u + 1, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u, f[3][0] = r, f[3][1] = m + 1, f[3][2] = u + 1, f[4][0] = r + 1, f[4][1] = m + 1, f[4][2] = u, f[5][0] = r, f[5][1] = m, f[5][2] = u) : (f[0][0] = r, f[0][1] = m, f[0][2] = u + 1, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u + 1, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u, f[3][0] = r + 1, f[3][1] = m, f[3][2] = u + 1, f[4][0] = r, f[4][1] = m, f[4][2] = u, f[5][0] = r + 1, f[5][1] = m + 1, f[5][2] = u) : (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u + 1, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u + 1, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u, f[3][0] = r, f[3][1] = m, f[3][2] = u + 1, f[4][0] = r, f[4][1] = m + 1, f[4][2] = u, f[5][0] = r + 1, f[5][1] = m, f[5][2] = u), _ = 0; 6 > _; ++_) -1 == a[f[_][0]][f[_][1]][f[_][2]] && (a[f[_][0]][f[_][1]][f[_][2]] = c, p.push(new O(f[_][0], f[_][1], f[_][2])), c++);
                        B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[1][0]][f[1][1]][f[1][2]], a[f[2][0]][f[2][1]][f[2][2]])), d++, B.push(new T(a[f[3][0]][f[3][1]][f[3][2]], a[f[4][0]][f[4][1]][f[4][2]], a[f[5][0]][f[5][1]][f[5][2]])), d++
                    } else if (!w && !M || !b && !g || !b && !A || !I && !M || !I && !R || !v && !A || !v && !g || !w && !R || !g && !A || !M && !R || !w && !I || !b && !v) {
                        for (w || M ? b || g ? b || A ? I || M ? I || R ? v || A ? v || g ? w || R ? g || A ? M || R ? w || I ? b || v || (f[0][0] = r, f[0][1] = m, f[0][2] = u, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u + 1, f[3][0] = r + 1, f[3][1] = m, f[3][2] = u + 1) : (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u + 1, f[3][0] = r, f[3][1] = m, f[3][2] = u + 1) : (f[0][0] = r, f[0][1] = m, f[0][2] = u + 1, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u + 1, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u, f[3][0] = r, f[3][1] = m + 1, f[3][2] = u) : (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u + 1, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u + 1, f[1][0] = r, f[1][1] = m, f[1][2] = u, f[3][0] = r + 1, f[3][1] = m + 1, f[3][2] = u) : (f[0][0] = r, f[0][1] = m, f[0][2] = u + 1, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u + 1, f[3][0] = r + 1, f[3][1] = m, f[3][2] = u) : (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u + 1, f[2][0] = r, f[2][1] = m, f[2][2] = u, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u, f[3][0] = r + 1, f[3][1] = m, f[3][2] = u + 1) : (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u + 1, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u + 1, f[3][0] = r, f[3][1] = m, f[3][2] = u) : (f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u + 1, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u, f[3][0] = r, f[3][1] = m, f[3][2] = u + 1) : (f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u + 1, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u, f[1][0] = r, f[1][1] = m, f[1][2] = u + 1, f[3][0] = r, f[3][1] = m + 1, f[3][2] = u) : (f[0][0] = r + 1, f[0][1] = m, f[0][2] = u + 1, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u, f[1][0] = r, f[1][1] = m, f[1][2] = u, f[3][0] = r, f[3][1] = m + 1, f[3][2] = u + 1) : (f[0][0] = r + 1, f[0][1] = m, f[0][2] = u + 1, f[2][0] = r, f[2][1] = m, f[2][2] = u, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u + 1, f[3][0] = r + 1, f[3][1] = m + 1, f[3][2] = u) : (f[0][0] = r, f[0][1] = m, f[0][2] = u + 1, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u, f[3][0] = r + 1, f[3][1] = m + 1, f[3][2] = u + 1), _ = 0; 4 > _; ++_) -1 == a[f[_][0]][f[_][1]][f[_][2]] && (a[f[_][0]][f[_][1]][f[_][2]] = c, p.push(new O(f[_][0], f[_][1], f[_][2])), c++);
                        B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[1][0]][f[1][1]][f[1][2]], a[f[2][0]][f[2][1]][f[2][2]])), d++, B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[2][0]][f[2][1]][f[2][2]], a[f[3][0]][f[3][1]][f[3][2]])), d++
                    }
                } else if (7 == D) {
                    for (w ? b ? I ? v ? g ? M ? A ? R || (f[0][0] = r, f[0][1] = m, f[0][2] = u + 1, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u + 1, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u) : (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u + 1, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u + 1, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u) : (f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m, f[1][2] = u + 1, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u) : (f[0][0] = r + 1, f[0][1] = m, f[0][2] = u + 1, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u + 1, f[2][0] = r, f[2][1] = m, f[2][2] = u) : (f[0][0] = r + 1, f[0][1] = m + 1, f[0][2] = u, f[1][0] = r, f[1][1] = m, f[1][2] = u, f[2][0] = r, f[2][1] = m + 1, f[2][2] = u + 1) : (f[0][0] = r + 1, f[0][1] = m, f[0][2] = u, f[1][0] = r, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m + 1, f[2][2] = u + 1) : (f[0][0] = r, f[0][1] = m, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m + 1, f[1][2] = u, f[2][0] = r + 1, f[2][1] = m, f[2][2] = u + 1) : (f[0][0] = r, f[0][1] = m + 1, f[0][2] = u, f[1][0] = r + 1, f[1][1] = m, f[1][2] = u, f[2][0] = r, f[2][1] = m, f[2][2] = u + 1), _ = 0; 3 > _; ++_) -1 == a[f[_][0]][f[_][1]][f[_][2]] && (a[f[_][0]][f[_][1]][f[_][2]] = c, p.push(new O(f[_][0], f[_][1], f[_][2])), c++);
                    B.push(new T(a[f[0][0]][f[0][1]][f[0][2]], a[f[1][0]][f[1][1]][f[1][2]], a[f[2][0]][f[2][1]][f[2][2]])), d++
                }
            }
            for (this.faces = B, this.verts = p, r = 0; c > r; ++r) p[r].atomid = l[p[r].x * n * o + o * p[r].y + p[r].z].atomid
        }
    }, this.laplaciansmooth = function (e) {
        for (var r = new Array(c), t = 0; c > t; ++t) r[t] = {x: 0, y: 0, z: 0};
        for (var a, o = new Array(20), t = 0; 20 > t; ++t) o[t] = new Array(c);
        for (var t = 0; c > t; ++t) o[0][t] = 0;
        for (var t = 0; d > t; ++t) {
            a = !0;
            for (var n = 0; n < o[0][B[t].a]; ++n) if (B[t].b == o[n + 1][B[t].a]) {
                a = !1;
                break
            }
            a && (o[0][B[t].a]++, o[o[0][B[t].a]][B[t].a] = B[t].b), a = !0;
            for (var n = 0; n < o[0][B[t].a]; ++n) if (B[t].c == o[n + 1][B[t].a]) {
                a = !1;
                break
            }
            for (a && (o[0][B[t].a]++, o[o[0][B[t].a]][B[t].a] = B[t].c), a = !0, n = 0; n < o[0][B[t].b]; ++n) if (B[t].a == o[n + 1][B[t].b]) {
                a = !1;
                break
            }
            for (a && (o[0][B[t].b]++, o[o[0][B[t].b]][B[t].b] = B[t].a), a = !0, n = 0; n < o[0][B[t].b]; ++n) if (B[t].c == o[n + 1][B[t].b]) {
                a = !1;
                break
            }
            for (a && (o[0][B[t].b]++, o[o[0][B[t].b]][B[t].b] = B[t].c), a = !0, n = 0; n < o[0][B[t].c]; ++n) if (B[t].a == o[n + 1][B[t].c]) {
                a = !1;
                break
            }
            for (a && (o[0][B[t].c]++, o[o[0][B[t].c]][B[t].c] = B[t].a), a = !0, n = 0; n < o[0][B[t].c]; ++n) if (B[t].b == o[n + 1][B[t].c]) {
                a = !1;
                break
            }
            a && (o[0][B[t].c]++, o[o[0][B[t].c]][B[t].c] = B[t].b)
        }
        for (var i = .5, s = 0; e > s; ++s) {
            for (var t = 0; c > t; ++t) if (o[0][t] < 3) r[t].x = p[t].x, r[t].y = p[t].y, r[t].z = p[t].z; else if (3 == o[0][t] || 4 == o[0][t]) {
                for (r[t].x = 0, r[t].y = 0, r[t].z = 0, n = 0; n < o[0][t]; ++n) r[t].x += p[o[n + 1][t]].x, r[t].y += p[o[n + 1][t]].y, r[t].z += p[o[n + 1][t]].z;
                r[t].x += i * p[t].x, r[t].y += i * p[t].y, r[t].z += i * p[t].z, r[t].x /= i + o[0][t], r[t].y /= i + o[0][t], r[t].z /= i + o[0][t]
            } else {
                r[t].x = 0, r[t].y = 0, r[t].z = 0;
                for (var n = 0; n < o[0][t]; ++n) r[t].x += p[o[n + 1][t]].x, r[t].y += p[o[n + 1][t]].y, r[t].z += p[o[n + 1][t]].z;
                r[t].x += 1 * p[t].x, r[t].y += 1 * p[t].y, r[t].z += 1 * p[t].z, r[t].x /= 1 + o[0][t], r[t].y /= 1 + o[0][t], r[t].z /= 1 + o[0][t]
            }
            for (var t = 0; c > t; ++t) p[t].x = r[t].x, p[t].y = r[t].y, p[t].z = r[t].z
        }
    }, this.transformVertices = function () {
        for (var e = this.verts, o = 1 / w, n = 0; c > n; ++n) e[n].x = e[n].x * o - r, e[n].y = e[n].y * o - t, e[n].z = e[n].z * o - a
    }, initparm(e.min, e.max, e.type > 1), fillvoxels(e.atoms), buildboundary(), 4 != e.type && 2 != e.type || fastdistancemap(), 2 == e.type && (boundingatom(!1), fillvoxelswaals(e.atoms)), marchingcube(e.type), laplaciansmooth(1), transformVertices(), {
        verts: p,
        faces: B
    }
};
self.addEventListener("message", function (e) {
    self.postMessage(ProteinSurface(e.data))
});